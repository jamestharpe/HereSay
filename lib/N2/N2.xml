<?xml version="1.0"?>
<doc>
    <assembly>
        <name>N2</name>
    </assembly>
    <members>
        <member name="T:N2.Collections.AccessFilter">
            <summary>
            Filter based on user access and security.
            </summary>
        </member>
        <member name="T:N2.Collections.ItemFilter">
            <summary>
            The abstract base class of item filters.
            </summary>
        </member>
        <member name="T:N2.Collections.IPipeline`1">
            <summary>
            Filters items.
            </summary>
        </member>
        <member name="M:N2.Collections.IPipeline`1.Pipe(System.Collections.Generic.IEnumerable{`0})">
            <summary>Filter the given items returning the filtered enumeration.</summary>
            <param name="input">The input enumeration to filter.</param>
            <returns>A filtered enumeration of items.</returns>
        </member>
        <member name="M:N2.Collections.ItemFilter.Match(N2.ContentItem)">
            <summary>Matches an item against the current filter.</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.ItemFilter.Filter(System.Collections.Generic.IList{N2.ContentItem})">
            <summary>Filters items by matching them against the current filter.</summary>
            <param name="items">The items to perform the filtering on.</param>
        </member>
        <member name="M:N2.Collections.ItemFilter.Pipe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Filters the supplied items according to the current filter type.</summary>
            <param name="items">The initial item enumeration.</param>
            <returns>The filtered item enumeration.</returns>
        </member>
        <member name="M:N2.Collections.ItemFilter.Pipe(System.Collections.Generic.IEnumerable{N2.ContentItem})">
            <summary>Filters the supplied items according to the current filter type.</summary>
            <param name="items">The initial item enumeration.</param>
            <returns>The filtered item enumeration.</returns>
        </member>
        <member name="M:N2.Collections.ItemFilter.Filter(System.Collections.Generic.IList{N2.ContentItem},N2.Collections.ItemFilter)">
            <summary>Applies a filter on a list of items.</summary>
            <param name="items">The items to filter.</param>
            <param name="filter">The filter to apply.</param>
        </member>
        <member name="M:N2.Collections.ItemFilter.Dispose">
            <summary>Resets the filter if applicable.</summary>
        </member>
        <member name="F:N2.Collections.AccessFilter.CurrentUser">
            <summary>Used to decouple from HttpContext during testing.</summary>
        </member>
        <member name="F:N2.Collections.AccessFilter.CurrentSecurityManager">
            <summary>Used to decouple from N2.Context.Current during testing.</summary>
        </member>
        <member name="M:N2.Collections.AccessFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:N2.Collections.AccessFilter"/> class.
            </summary>
        </member>
        <member name="M:N2.Collections.AccessFilter.#ctor(System.Security.Principal.IPrincipal,N2.Security.ISecurityManager)">
            <summary>
            Initializes a new instance of the <see cref="T:N2.Collections.AccessFilter"/> class.
            </summary>
            <param name="user">The user.</param>
            <param name="securityManager">The security manager.</param>
        </member>
        <member name="M:N2.Collections.AccessFilter.Match(N2.ContentItem)">
            <summary>
            Matches an item by checking if the user is authorised for the item, using the security manager.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.AccessFilter.Filter(System.Collections.Generic.IList{N2.ContentItem},System.Security.Principal.IPrincipal,N2.Security.ISecurityManager)">
            <summary>
            Filters the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="user">The user.</param>
            <param name="securityManager">The security manager.</param>
        </member>
        <member name="M:N2.Collections.AccessFilter.DefaultFilter(System.Collections.Generic.IList{N2.ContentItem})">
            <summary>
            Filters using the default filter.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:N2.Collections.AccessFilter.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:N2.Collections.AccessFilter.SecurityManager">
            <summary>
            Gets or sets the security manager.
            </summary>
            <value>The security manager.</value>
        </member>
        <member name="T:N2.Collections.ChildFactoryDelegate">
            <summary>A method that gets the children of the given item.</summary>
            <param name="item">The item whose children to get.</param>
            <returns>An enumeration of the children of the item.</returns>
        </member>
        <member name="T:N2.Collections.ContentList`1">
            <summary>
            A list of items that have a name with dictionary-like semantics.
            </summary>
            <typeparam name="T">The type of item to list.</typeparam>
        </member>
        <member name="T:N2.Collections.INamedList`1">
            <summary>
            A list of items that have a name with dictionary-like semantics.
            </summary>
            <typeparam name="T">The type of item to list.</typeparam>
        </member>
        <member name="M:N2.Collections.INamedList`1.FindNamed(System.String)">
            <summary>Finds an item with the given name.</summary>
            <param name="name">The name of the item to find.</param>
            <returns>The item with the given name or null if no item was found.</returns>
        </member>
        <member name="M:N2.Collections.INamedList`1.Add(System.String,`0)">
            <summary>Adds an element with the provided key and value to the list.</summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:N2.Collections.INamedList`1.ContainsKey(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:N2.Collections.INamedList`1.Remove(System.String)" -->
        <member name="M:N2.Collections.INamedList`1.TryGetValue(System.String,`0@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the list contains an element with the specified key; otherwise, false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:N2.Collections.INamedList`1.Keys" -->
        <!-- Badly formed XML comment ignored for member "P:N2.Collections.INamedList`1.Values" -->
        <member name="P:N2.Collections.INamedList`1.Item(System.String)">
            <summary>Gets or sets the element with the specified key.</summary>
            <param name="name">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="T:N2.Collections.IPageableList`1">
            <summary>
            Retrieves a subset of the list.
            </summary>
            <typeparam name="T">The type of item in the list.</typeparam>
        </member>
        <member name="M:N2.Collections.IPageableList`1.FindRange(System.Int32,System.Int32)">
            <summary>Gets a subset of the list without causing the complete list to be loaded.</summary>
            <param name="skip">The number of items to skip.</param>
            <param name="take">The number of items to take.</param>
            <returns>A list of items within the given range.</returns>
        </member>
        <member name="T:N2.Collections.IQueryableList`1">
            <summary>
            Query items in the list (possibly by querying the database).
            </summary>
            <typeparam name="T">The type of item to query.</typeparam>
        </member>
        <member name="M:N2.Collections.IQueryableList`1.Query">
            <summary>Gets the queryable used to query a subset of the list.</summary>
            <returns>A queryable enumeration.</returns>
        </member>
        <member name="M:N2.Collections.ContentList`1.Add(System.String,`0)">
            <summary>Adds an element with the provided key and value to the list.</summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:N2.Collections.ContentList`1.ContainsKey(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:N2.Collections.ContentList`1.Remove(System.String)" -->
        <member name="M:N2.Collections.ContentList`1.TryGetValue(System.String,`0@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the list contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:N2.Collections.ContentList`1.FindNamed(System.String)">
            <summary>Finds an item with the given name.</summary>
            <param name="name">The name of the item to find.</param>
            <returns>The item with the given name or null if no item was found.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:N2.Collections.ContentList`1.Keys" -->
        <!-- Badly formed XML comment ignored for member "P:N2.Collections.ContentList`1.Values" -->
        <member name="P:N2.Collections.ContentList`1.Item(System.String)">
            <summary>Gets or sets the element with the specified key.</summary>
            <param name="name">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="T:N2.Collections.AccessiblePageFilter">
            <summary>
            Filters parts and unauthorized or unpublished items.
            </summary>
        </member>
        <member name="T:N2.Collections.AllFilter">
            <summary>
            Applies a collection of filters.
            </summary>
        </member>
        <member name="P:N2.Collections.AllFilter.Filters">
            <summary>
            The filters that compose this filter.
            </summary>
        </member>
        <member name="T:N2.Collections.AnyFilter">
            <summary>
            Filters items not matching any of the filters.
            </summary>
        </member>
        <member name="P:N2.Collections.AnyFilter.Filters">
            <summary>
            The filters that compose this filter.
            </summary>
        </member>
        <member name="T:N2.Collections.StateFilter">
            <summary>
            Filters items not having a given state.
            </summary>
        </member>
        <member name="T:N2.Collections.PartFilter">
            <summary>
            Filters items that arn't parts.
            </summary>
        </member>
        <member name="T:N2.Collections.ParallelRootHierarchyBuilder">
            <summary>
            Builds a hierarchy and moves the root node from the root position to first child position.
            </summary>
        </member>
        <member name="T:N2.Collections.HierarchyBuilder">
            <summary>
            Abstract base class for hierarchy builders.
            </summary>
        </member>
        <member name="M:N2.Collections.HierarchyBuilder.Build">
            <summary>
            Builds the hierachy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.HierarchyBuilder.Children(N2.Collections.ItemFilter[])">
            <summary>Builds the hierachy using the specified child factory method.</summary>
            <param name="filters">The filters.</param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.HierarchyBuilder.Children(N2.Collections.ChildFactoryDelegate)">
            <summary>Builds the hierachy using the specified child factory method.</summary>
            <param name="filters">The filters.</param>
            <returns></returns>
        </member>
        <member name="T:N2.Collections.FixedHierarchyBuilder">
            <summary>
            Builds a fixed hierarchy.
            </summary>
        </member>
        <member name="M:N2.Collections.FixedHierarchyBuilder.Build">
            <summary>
            Builds the hierachy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:N2.Collections.NoHierarchyBuilder">
            <summary>
            Creates a hierarchy without any items.
            </summary>
        </member>
        <member name="T:N2.Collections.CountFilter">
            <summary>
            Filters based on start index and count.
            </summary>
        </member>
        <member name="M:N2.Collections.CountFilter.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of the <see cref="T:N2.Collections.CountFilter"/>.</summary>
            <param name="startIndex">The index of the first item to show.</param>
            <param name="maxCount">The maximum number of items to leave.</param>
        </member>
        <member name="M:N2.Collections.CountFilter.Match(N2.ContentItem)">
            <summary>This method doesn't consider the input item at all. Instead it increments and compares against this filter's CurrentIndex property.</summary>
        </member>
        <member name="M:N2.Collections.FilterHelper.Accessible">
            <summary>Filters by access.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Accessible(System.Security.Principal.IPrincipal,N2.Security.ISecurityManager)">
            <summary>Filters by access.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.AccessiblePage">
            <summary>Filters by access and pages.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.AccessiblePage(System.Security.Principal.IPrincipal,N2.Security.ISecurityManager)">
            <summary>Filters by access and pages.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.All(N2.Collections.ItemFilter[])">
            <summary>Filters by all the provided filters.</summary>
            <param name="filters">The filters to aggregate.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.All(System.Collections.Generic.IEnumerable{N2.Collections.ItemFilter})">
            <summary>Filters by all the provided filters.</summary>
            <param name="filters">The filters to aggregate.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Any(N2.Collections.ItemFilter[])">
            <summary>Filters by all the provided filters.</summary>
            <param name="filters">The filters to aggregate.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Any(System.Collections.Generic.IEnumerable{N2.Collections.ItemFilter})">
            <summary>Filters by all the provided filters.</summary>
            <param name="filters">The filters to aggregate.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.All(N2.Collections.ItemFilter,System.Collections.Generic.IEnumerable{N2.Collections.ItemFilter})">
            <summary>Filters by all the provided filters.</summary>
            <param name="filters">The filters to aggregate.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Any(N2.Collections.ItemFilter,System.Collections.Generic.IEnumerable{N2.Collections.ItemFilter})">
            <summary>Filters by all the provided filters.</summary>
            <param name="filters">The filters to aggregate.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Count(System.Int32,System.Int32)">
            <summary>Filters by counting items. This filter must be reset after each usage.</summary>
            <param name="skip">Number of items to skip.</param>
            <param name="take">Number of items to take.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Custom(System.Func{N2.ContentItem,System.Boolean})">
            <summary>Filters by the passed delegate.</summary>
            <param name="isMatch">A function that returns true if the item can be filtered.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Distinct">
            <summary>Filters away duplicates.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Navigatable">
            <summary>Filters by items that can be shown in a navigation. This is a composition of page, access, visibility and published filter.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Anything">
            <summary>Doesn't filter.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Page">
            <summary>Filters by pages.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Part">
            <summary>Filters items that are parts on a page.</summary>
            <returns>A filter apart.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.DescendantOf(N2.ContentItem)">
            <summary>Filters items below an ancestor.</summary>
            <param name="ancestor">The ancestor of the items to pass.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.DescendantOrSelf(N2.ContentItem)">
            <summary>Filters items below an ancestor or the ancestor itself.</summary>
            <param name="ancestor">The ancestor of the items to pass.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Published">
            <summary>Filters by items that are published and not expired.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Type(System.Type[])">
            <summary>Filters by types of page.</summary>
            <param name="types">The types of pages to allow.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Definition(System.String)">
            <summary>Filters by definition name.</summary>
            <param name="discriminatorAndTemplateKey">A discriminator and/or template key to filter by, e.g. ContentPage, ContentPage/News or /News.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.TemplateOnly(System.String)">
            <summary>Filters items by temlate key.</summary>
            <param name="templateKey">The template key the item should have.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Type``1">
            <summary>Filters by type of page.</summary>
            <typeparam name="T">The type of page to allow.</typeparam>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Visible">
            <summary>Filters by items that are visible.</summary>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.Not(N2.Collections.ItemFilter)">
            <summary>Inverses the given filter.</summary>
            <param name="itemFilter">The filter to inverse.</param>
            <returns>A filter that does the inverse of the given filter.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.State(N2.ContentState)">
            <summary>Filters items returning those of the given state.</summary>
            <param name="requiredState">The state to return.</param>
            <returns>A filter that filters on content state.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.DescendantOf``1">
            <summary>Filters items below an item of a certain type.</summary>
            <typeparam name="T">The type of item to exist as ancestor or self.</typeparam>
            <returns>A filter that filters on a type of ancestor.</returns>
        </member>
        <member name="M:N2.Collections.FilterHelper.InZone(System.String)">
            <summary>Filters items in a certain zone.</summary>
            <param name="zoneName">The name of the zone the items should be in.</param>
            <returns>A filter that filters on zone name.</returns>
        </member>
        <member name="T:N2.Collections.IZonedList`1">
            <summary>
            A list that supports sub-selecting items that are placeable.
            </summary>
            <typeparam name="T">The type of item in the list.</typeparam>
        </member>
        <member name="M:N2.Collections.IZonedList`1.FindNavigatablePages">
            <summary>Retrieves visible and published pages where the zone name is null.</summary>
            <returns>A list of items that are considered to be pages.</returns>
            <remarks>This method does not perform security checks.</remarks>
        </member>
        <member name="M:N2.Collections.IZonedList`1.FindPages">
            <summary>Retrieves pages where the zone name is null.</summary>
            <returns>A list of items that are considered to be pages.</returns>
        </member>
        <member name="M:N2.Collections.IZonedList`1.FindParts">
            <summary>Retrieves items where the zone name is not null.</summary>
            <returns>A list of items that are considered to be parts.</returns>
        </member>
        <member name="M:N2.Collections.IZonedList`1.FindParts(System.String)">
            <summary>Retrieves items a zone with a particular name.</summary>
            <param name="zoneName">The name of the zone.</param>
            <returns>A list of items in the zone.</returns>
        </member>
        <member name="M:N2.Collections.IZonedList`1.FindZoneNames">
            <summary>Retrieves names of zones in this list.</summary>
            <returns>A distinct set of zone names.</returns>
        </member>
        <member name="T:N2.Collections.INameable">
            <summary>
            An item that has a name.
            </summary>
        </member>
        <member name="P:N2.Collections.INameable.Name">
            <summary>The name of the item.</summary>
        </member>
        <member name="T:N2.Collections.ItemComparer`1">
            <summary>
            An item comparer. This class can compare classes given a expression.
            </summary>
            <typeparam name="T">
            The type of items to compare.
            </typeparam>
        </member>
        <member name="M:N2.Collections.ItemComparer`1.#ctor">
            <summary>Creates a new instance of the ItemComparer that sorts on the item's sort order.</summary>
        </member>
        <member name="M:N2.Collections.ItemComparer`1.#ctor(System.String)">
            <summary>Creates a new instance of the ItemComparer that sorts using a custom sort expression.</summary>
            <param name="sortExpression">The name of the property to sort on. DESC can be appended to the string to reverse the sort order.</param>
        </member>
        <member name="M:N2.Collections.ItemComparer`1.#ctor(System.String,System.Boolean)">
            <summary>Creates a new instance of the ItemComparer that sorts using sort property and direction.</summary>
            <param name="detailToCompare">The name of the property to sort on.</param>
            <param name="inverse">Wether the comparison should be "inverse", i.e. make Z less than A.</param>
        </member>
        <member name="M:N2.Collections.ItemComparer`1.Compare(`0,`0,System.String,System.Boolean)">
            <summary>Compares two items with each other.</summary>
            <param name="x">The first item.</param>
            <param name="y">The second item</param>
            <param name="detailToCompare">The detail name to use for comparison.</param>
            <param name="inverse">Inverse the comparison.</param>
            <returns>The compared difference.</returns>
        </member>
        <member name="M:N2.Collections.ItemComparer`1.Compare(System.Object,System.Object)">
            <summary>Compares to items.</summary>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="M:N2.Collections.ItemComparer`1.Compare(`0,`0)">
            <summary>Compares two items.</summary>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="P:N2.Collections.ItemComparer`1.DetailToCompare">
            <summary>Gets or sets the detail name to use for comparison.</summary>
        </member>
        <member name="P:N2.Collections.ItemComparer`1.Inverse">
            <summary>Gets or sets wether the comparison should be inversed.</summary>
        </member>
        <member name="T:N2.Collections.ItemListEventArgs">
            <summary>
            Event argument containing items.
            </summary>
        </member>
        <member name="M:N2.Collections.ItemListEventArgs.#ctor(N2.Collections.ItemList)">
            <summary>Creates a new instance of the ItemListEventArgs.</summary>
            <param name="items">The items to associate with these arguments.</param>
        </member>
        <member name="P:N2.Collections.ItemListEventArgs.Items">
            <summary>Gets or sets the items associated with these arguments.</summary>
        </member>
        <member name="T:N2.Collections.ItemList">
            <summary>
            A list of content items. Provides easier access to filtering and sorting.
            </summary>
        </member>
        <member name="T:N2.Collections.ItemList`1">
            <summary>
            A generic item list.
            </summary>
            <typeparam name="T">The type of item to list.</typeparam>
        </member>
        <member name="M:N2.Collections.ItemList`1.#ctor">
            <summary>Initializes an empty instance of the ItemList class.</summary>
        </member>
        <member name="M:N2.Collections.ItemList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes an instance of the ItemList class with the supplied items.</summary>
        </member>
        <member name="M:N2.Collections.ItemList`1.#ctor(System.Collections.IEnumerable,N2.Collections.ItemFilter[])">
            <summary>Initializes an instance of the ItemList class adding the items matching the supplied filter.</summary>
            <param name="items">The full enumeration of items to initialize with.</param>
            <param name="filters">The filters that should be applied to the full collection.</param>
        </member>
        <member name="M:N2.Collections.ItemList`1.#ctor(System.Collections.Generic.ICollection{`0},N2.Collections.ItemFilter)">
            <summary>Initializes an instance of the ItemList class adding the items matching the supplied filter.</summary>
            <param name="items">The full enumeration of items to initialize with.</param>
            <param name="filters">The filters that should be applied to the full collection.</param>
        </member>
        <member name="M:N2.Collections.ItemList`1.Sort">
            <summary>Sorts the elements in the entire list using the default comparer.</summary>
        </member>
        <member name="M:N2.Collections.ItemList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the elements in the entire list using the specified comparer.</summary>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="M:N2.Collections.ItemList`1.Sort(System.String)">
            <summary>Sorts the elements in the entire list using the specified expression.</summary>
            <param name="sortExpression">A sort expression, e.g. Published DESC.</param>
        </member>
        <member name="M:N2.Collections.ItemList`1.Cast``1">
            <summary>Converts a list to a strongly typed list filtering all items of another type.</summary>
            <typeparam name="OtherT">The type the items in resulting list should have.</typeparam>
            <returns>A list of items of the correct type.</returns>
        </member>
        <member name="M:N2.Collections.ItemList.#ctor">
            <summary>Initializes an empty instance of the ItemList class.</summary>
        </member>
        <member name="M:N2.Collections.ItemList.#ctor(System.Collections.Generic.IEnumerable{N2.ContentItem})">
            <summary>Initializes an instance of the ItemList class with the supplied items.</summary>
        </member>
        <member name="M:N2.Collections.ItemList.#ctor(System.Collections.Generic.IEnumerable{N2.ContentItem},N2.Collections.ItemFilter)">
            <summary>Initializes an instance of the ItemList class adding the items matching the supplied filter.</summary>
            <param name="items">The gross enumeration of items to initialize with.</param>
            <param name="filter">The filters that should be applied to the gross collection.</param>
        </member>
        <member name="T:N2.Collections.IPlaceable">
            <summary>
            An item that can be placed in a zone.
            </summary>
        </member>
        <member name="P:N2.Collections.IPlaceable.ZoneName">
            <summary>The name of the zone where the item has been placed.</summary>
        </member>
        <member name="T:N2.Collections.TypeFilter">
            <summary>
            Filters based on item type.
            </summary>
        </member>
        <member name="M:N2.Collections.TypeFilter.#ctor(System.Type[])">
            <summary>Instantiates a type filter that will filter anythning but the supplied types (and subclasses).</summary>
            <param name="allowedTypes">Types that will match.</param>
        </member>
        <member name="M:N2.Collections.TypeFilter.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Instantiates a type filter that will filter anythning but the supplied types (and subclasses).</summary>
            <param name="allowedTypes">Types that will match.</param>
        </member>
        <member name="M:N2.Collections.TypeFilter.#ctor(System.Boolean,System.Type[])">
            <summary>Instantiats a type filter that will filter based on the supplied types. The types will be kept or filtered out depending on the inverse parameter.</summary>
            <param name="inverse">True means that supplied types will be removed when filtering.</param>
            <param name="allowedTypes">The types that will match or the inverse based on the inverse parameter.</param>
        </member>
        <member name="M:N2.Collections.TypeFilter.Of``1">
            <summary>A shorthand for type filter creation.</summary>
            <typeparam name="T">The type to filter.</typeparam>
            <returns>A new type filter.</returns>
        </member>
        <member name="P:N2.Collections.TypeFilter.Inverse">
            <summary>Gets or sets whether matching types should be removed instead beeing kept.</summary>
        </member>
        <member name="P:N2.Collections.TypeFilter.AllowedTypes">
            <summary>Gets or sets types that should match and thus are kept when applying this filter. This behaviour can be inversed by setting the Inverse property to true.</summary>
        </member>
        <member name="T:N2.Collections.ZoneFilter">
            <summary>
            Filters based on the <see cref="P:N2.ContentItem.ZoneName"/> property.
            </summary>
        </member>
        <member name="T:N2.Configuration.ExternalsElement">
            <summary>
            Configuration related to the external items feature.
            </summary>
        </member>
        <member name="P:N2.Configuration.ExternalsElement.ExternalItemType">
            <summary>A custom external item type to instantiate instead of the default.</summary>
        </member>
        <member name="T:N2.Configuration.MembershipElement">
            <summary>
            Configuration related to membership, and the ContentMembershipProvider.
            </summary>
        </member>
        <member name="P:N2.Configuration.MembershipElement.UserType">
            <summary>A custom user type to instantiate instead of the default.</summary>
        </member>
        <member name="P:N2.Configuration.ResourcesElement.Debug">
            <summary>Whether to make registered web resources debuggable.</summary>
        </member>
        <member name="P:N2.Configuration.SearchElement.IndexPath">
            <summary>The virtual path to the lucene search index database.</summary>
        </member>
        <member name="P:N2.Configuration.SearchElement.AsyncIndexing">
            <summary>Whether to index in a separate thread.</summary>
        </member>
        <member name="P:N2.Configuration.SearchElement.Enabled">
            <summary>Enable indexing of content.</summary>
        </member>
        <member name="P:N2.Configuration.SearchElement.HandleErrors">
            <summary>Try handling errors gracefully.</summary>
        </member>
        <member name="P:N2.Configuration.VppElement.Zips">
            <summary>Zip files to register as virtual path providers.</summary>
        </member>
        <member name="P:N2.Configuration.ZipVppElement.FilePath">
            <summary>The virtual location of the zip file.</summary>
        </member>
        <member name="P:N2.Configuration.ZipVppElement.ObservedPath">
            <summary>The path below which resources may be retrieved from the zip file.</summary>
        </member>
        <member name="T:N2.Configuration.LazyRemovableCollection`1">
            <summary>
            Allws to "remove" items not in the collection. The reader of the configuration must 
            implement "remove" semantics reading from the RemovedElements collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:N2.Configuration.LazyRemovableCollection`1.AddDefault(`0)">
            <summary>Adds an element to the collection of defaults.</summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:N2.Configuration.LazyRemovableCollection`1.Add(`0)">
            <summary>Adds an element to the collection.</summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:N2.Configuration.LazyRemovableCollection`1.Remove(`0)">
            <summary>"Removes" an element from the collection.</summary>
            <param name="element">The element to "remove".</param>
        </member>
        <member name="M:N2.Configuration.LazyRemovableCollection`1.Clear">
            <summary>Clears all the elements in this collection.</summary>
        </member>
        <member name="P:N2.Configuration.LazyRemovableCollection`1.RemovedElements">
            <summary>Elements that were "removed".</summary>
        </member>
        <member name="P:N2.Configuration.LazyRemovableCollection`1.Defaults">
            <summary>Elements that were "removed".</summary>
        </member>
        <member name="P:N2.Configuration.LazyRemovableCollection`1.AddedElements">
            <summary>All added elements except those that have been removed but not default elements.</summary>
        </member>
        <member name="P:N2.Configuration.LazyRemovableCollection`1.AllElements">
            <summary>All added elements except those that have been removed.</summary>
        </member>
        <member name="T:N2.Definitions.IActiveChildren">
            <summary>
            When defined on a content item this tells the management UI to ask the model 
            for children rather than querying the database directly.
            </summary>
        </member>
        <member name="T:N2.Definitions.ISystemNode">
            <summary>
            Nodes that stores information about the system and aren't directly intended 
            for public consumption. This interface is used for filtering system pages in
            selection interfaces.
            </summary>
        </member>
        <member name="T:N2.Definitions.IRedirect">
            <summary>
            Marks a content item that redirects to another location.
            </summary>
        </member>
        <member name="P:N2.Definitions.IRedirect.RedirectUrl">
            <summary>The url the item redirects to.</summary>
        </member>
        <member name="P:N2.Definitions.IRedirect.RedirectTo">
            <summary>Another item the item redirects to, or null if the redirect url isn't a content item.</summary>
        </member>
        <member name="T:N2.Definitions.IWebFormsAddable">
            <summary>
            Marker interface used on MVC parts that may be added to webform pages via an adapter.
            </summary>
        </member>
        <member name="T:N2.ContentItem">
            <summary>
            The base of N2 content items. All content pages and data items are 
            derived from this item. During the initialization phase the CMS looks 
            for classes deriving from <see cref="T:N2.ContentItem"/> marked with the 
            <see cref="T:N2.DefinitionAttribute"/> and makes them available for
            editing and storage in the database.
            </summary>
            <example>
            // Since the class is inheriting <see cref="T:N2.ContentItem"/> it's 
            // recognized by the CMS and made available for editing.
            [PageDefinition(TemplateUrl = "~/Path/To/My/Template.aspx")]
            public class MyPage : N2.ContentItem
            {
            }
            </example>
            <remarks>
            Note that the class name (e.g. MyPage) is used as discriminator when
            retrieving items from database storage. If you change the class name 
            you should manually change the discriminator in the database or set the 
            name of the definition attribute, e.g. [Definition("Title", "OldClassName")]
            </remarks>
        </member>
        <member name="T:N2.Engine.IInjectable`1">
            <summary>
            Sets a dependency on a loaded entity.
            </summary>
            <typeparam name="T">The type of dependency to set.</typeparam>
        </member>
        <member name="M:N2.Engine.IInjectable`1.Set(`0)">
            <summary>Assigns the dependency to the enityty.</summary>
            <param name="dependency">The dependency to assign.</param>
        </member>
        <member name="T:N2.INode">
            <summary>
            Represents a node in the tree in edit mode.
            </summary>
        </member>
        <member name="T:N2.Web.ILink">
            <summary>
            Represents a link to somewhere.
            </summary>
        </member>
        <member name="P:N2.Web.ILink.Contents">
            <summary>The contents of the link. Usually the title.</summary>
        </member>
        <member name="P:N2.Web.ILink.ToolTip">
            <summary>The title attribute of the link.</summary>
        </member>
        <member name="P:N2.Web.ILink.Target">
            <summary>The target frame.</summary>
        </member>
        <member name="P:N2.Web.ILink.Url">
            <summary>The href attribute. Where the link should lead.</summary>
        </member>
        <member name="M:N2.INode.IsAuthorized(System.Security.Principal.IPrincipal)">
            <summary>Finds out wether a certain user is authorized to read the node.</summary>
            <param name="user">The user to authorize.</param>
            <returns>True if the user is authorized.</returns>
        </member>
        <member name="P:N2.INode.Name">
            <summary>The name of the node.</summary>
        </member>
        <member name="P:N2.INode.Path">
            <summary>The logical path to the node from the root node.</summary>
        </member>
        <member name="P:N2.INode.PreviewUrl">
            <summary>The url used to preview the node in edit mode.</summary>
        </member>
        <member name="P:N2.INode.IconUrl">
            <summary>Url to an icon image.</summary>
        </member>
        <member name="P:N2.INode.ClassNames">
            <summary>Gets a whitespace separated list of class names used to decorate the node for editors.</summary>
        </member>
        <member name="T:N2.Persistence.IUpdatable`1">
            <summary>
            Used by the versioning manager to ask the master version of 
            a content item to update it's data to another version.
            </summary>
            <typeparam name="T">Probably ContentItem.</typeparam>
        </member>
        <member name="T:N2.Persistence.Proxying.IInterceptableType">
            <summary>
            Marks a type available for interception.
            </summary>
        </member>
        <member name="M:N2.Persistence.Proxying.IInterceptableType.GetContentType">
            <summary>The actual content type the proxied object represents.</summary>
            <returns>The actual type.</returns>
        </member>
        <member name="M:N2.Persistence.Proxying.IInterceptableType.SetValue(System.String,System.Object,System.Type)">
            <summary>Sets a value to the underlying detail store.</summary>
            <param name="detailName">The name of the detail.</param>
            <param name="value">The value to set.</param>
            <param name="valueType">The type of value to assign.</param>
        </member>
        <member name="M:N2.Persistence.Proxying.IInterceptableType.GetValue(System.String)">
            <summary>Gets a value from the underlying detail store.</summary>
            <param name="detailName">The name of the detail.</param>
            <returns>The value of the given detial name or null.</returns>
        </member>
        <member name="M:N2.Persistence.Proxying.IInterceptableType.SetValues(System.String,System.Collections.IEnumerable)">
            <summary>Sets values to the underlying detail store.</summary>
            <param name="detailCollectionName">The name of the detail.</param>
            <param name="values">The values to set.</param>
        </member>
        <member name="M:N2.Persistence.Proxying.IInterceptableType.GetValues(System.String)">
            <summary>Gets values from the underlying detail store.</summary>
            <param name="detailCollectionName">The name of the detail.</param>
            <returns>The value of the given detial name or null.</returns>
        </member>
        <member name="M:N2.ContentItem.#ctor">
            <summary>Creates a new instance of the ContentItem.</summary>
        </member>
        <member name="M:N2.ContentItem.GetDetail(System.String)">
            <summary>Gets a detail from the details bag.</summary>
            <param name="detailName">The name of the value to get.</param>
            <returns>The value stored in the details bag or null if no item was found.</returns>
        </member>
        <member name="M:N2.ContentItem.GetDetail``1(System.String,``0)">
            <summary>Gets a detail from the details bag.</summary>
            <param name="detailName">The name of the value to get.</param>
            <param name="defaultValue">The default value to return when no detail is found.</param>
            <returns>The value stored in the details bag or null if no item was found.</returns>
        </member>
        <member name="M:N2.ContentItem.SetDetail``1(System.String,``0,``0)">
            <summary>Set a value into the <see cref="P:N2.ContentItem.Details"/> bag. If a value with the same name already exists it is overwritten. If the value equals the default value it will be removed from the details bag.</summary>
            <param name="detailName">The name of the item to set.</param>
            <param name="value">The value to set. If this parameter is null or equal to defaultValue the detail is removed.</param>
            <param name="defaultValue">The default value. If the value is equal to this value the detail will be removed.</param>
        </member>
        <member name="M:N2.ContentItem.SetDetail``1(System.String,``0)">
            <summary>Set a value into the <see cref="P:N2.ContentItem.Details"/> bag. If a value with the same name already exists it is overwritten.</summary>
            <param name="detailName">The name of the item to set.</param>
            <param name="value">The value to set. If this parameter is null the detail is removed.</param>
            <typeparam name="T">The type of value to store in details.</typeparam>
        </member>
        <member name="M:N2.ContentItem.SetDetail(System.String,System.Object,System.Type)">
            <summary>Set a value into the <see cref="P:N2.ContentItem.Details"/> bag. If a value with the same name already exists it is overwritten.</summary>
            <param name="detailName">The name of the item to set.</param>
            <param name="value">The value to set. If this parameter is null the detail is removed.</param>
            <param name="valueType">The type of value to store in details.</param>
        </member>
        <member name="M:N2.ContentItem.GetDetailCollection(System.String,System.Boolean)">
            <summary>Gets a named detail collection.</summary>
            <param name="collectionName">The name of the detail collection to get.</param>
            <param name="createWhenEmpty">Wether a new collection should be created if none exists. Setting this to false means null will be returned if no collection exists.</param>
            <returns>A new or existing detail collection or null if the createWhenEmpty parameter is false and no collection with the given name exists..</returns>
        </member>
        <member name="M:N2.ContentItem.AddTo(N2.ContentItem)">
            <summary>Adds an item to the children of this item updating its parent refernce.</summary>
            <param name="newParent">The new parent of the item. If this parameter is null the item is detached from the hierarchical structure.</param>
        </member>
        <member name="M:N2.ContentItem.FindPath(System.String)">
            <summary>Finds children based on the given url segments. The method supports convering the last segments into action and parameter.</summary>
            <param name="remainingUrl">The remaining url segments.</param>
            <returns>A path data object which can be empty (check using data.IsEmpty()).</returns>
        </member>
        <member name="M:N2.ContentItem.GetChild(System.String)">
            <summary>Tries to get a child item with a given name. This method igonres user permissions and any trailing '.aspx' that might be part of the name.</summary>
            <param name="childName">The name of the child item to get.</param>
            <returns>The child item if it is found otherwise null.</returns>
            <remarks>If the method is passed an empty or null string it will return null.</remarks>
        </member>
        <member name="M:N2.ContentItem.IsNamed(System.String)">
            <summary>
            Compares the item's name ignoring case and extension.
            </summary>
            <param name="name">The name to compare against.</param>
            <returns>True if the supplied name is considered the same as the item's.</returns>
        </member>
        <member name="M:N2.ContentItem.GetChildren">
            <summary>Gets child items the current user is allowed to access.</summary>
            <returns>A list of content items.</returns>
            <remarks>This method is used by N2 for site map providers, and for data source controls. Keep this in mind when overriding this method.</remarks>
        </member>
        <member name="M:N2.ContentItem.GetChildren(System.String)">
            <summary>Gets children the current user is allowed to access belonging to a certain zone, i.e. get only children with a certain zone name. </summary>
            <param name="childZoneName">The name of the zone.</param>
            <returns>A list of items that have the specified zone name.</returns>
            <remarks>This method is used by N2 when when non-page items are added to a zone on a page and in edit mode when displaying which items are placed in a certain zone. Keep this in mind when overriding this method.</remarks>
        </member>
        <member name="M:N2.ContentItem.GetChildren(N2.Collections.ItemFilter[])">
            <summary>Gets children applying filters.</summary>
            <param name="filters">The filters to apply on the children.</param>
            <returns>A list of filtered child items.</returns>
        </member>
        <member name="M:N2.ContentItem.GetChildren(N2.Collections.ItemFilter)">
            <summary>Gets children applying filters.</summary>
            <param name="filter">The filters to apply on the children.</param>
            <returns>A list of filtered child items.</returns>
        </member>
        <member name="M:N2.ContentItem.GetChildren(System.Int32,System.Int32,N2.Collections.ItemFilter)">
            <summary>Gets children applying filters.</summary>
            <param name="skip">Number of child items to skip at the database level.</param>
            <param name="skip">Number of child items to take at the database level.</param>
            <param name="filter">The filters to apply on the children after they have been loaded from the database.</param>
            <returns>A list of filtered child items.</returns>
        </member>
        <member name="M:N2.ContentItem.Clone(System.Boolean)">
            <summary>Creates a copy of this item including details and authorized roles resetting ID.</summary>
            <param name="includeChildren">Wether this item's child items also should be cloned.</param>
            <returns>The cloned item with or without cloned child items.</returns>
        </member>
        <member name="M:N2.ContentItem.IsAuthorized(System.Security.Principal.IPrincipal)">
            <summary>Gets whether a certain user is authorized to view this item.</summary>
            <param name="user">The user to check.</param>
            <returns>True if the item is open for all or the user has the required permissions.</returns>
        </member>
        <member name="M:N2.ContentItem.Equals(System.Object)">
            <summary>Checks the item with another for equality.</summary>
            <returns>True if two items have the same ID.</returns>
        </member>
        <member name="M:N2.ContentItem.GetHashCode">
            <summary>Gets a hash code based on the ID.</summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:N2.ContentItem.ToString">
            <summary>Returns this item's name.</summary>
            <returns>The item's name.</returns>
        </member>
        <member name="M:N2.ContentItem.op_Equality(N2.ContentItem,N2.ContentItem)">
            <summary>Compares two content items for equality.</summary>
            <param name="a">The fist item. If equality is overridden this item's method is invoked.</param>
            <param name="b">The second item.</param>
            <returns>True if the items are equal or null.</returns>
        </member>
        <member name="M:N2.ContentItem.op_Inequality(N2.ContentItem,N2.ContentItem)">
            <summary>Compares two content items for iverse equality.</summary>
            <param name="a">The fist item. If equality is overridden this item's method is invoked.</param>
            <param name="b">The second item.</param>
            <returns>False if the items are equal or null.</returns>
        </member>
        <member name="P:N2.ContentItem.ID">
            <summary>Gets or sets item ID.</summary>
        </member>
        <member name="P:N2.ContentItem.Parent">
            <summary>Gets or sets this item's parent. This can be null for root items and previous versions but should be another page in other situations.</summary>
        </member>
        <member name="P:N2.ContentItem.Title">
            <summary>Gets or sets the item's title. This is used in edit mode and probably in a custom implementation.</summary>
        </member>
        <member name="P:N2.ContentItem.Name">
            <summary>Gets or sets the item's name. This is used to compute the item's url and can be used to uniquely identify the item among other items on the same level.</summary>
        </member>
        <member name="P:N2.ContentItem.ZoneName">
            <summary>Gets or sets zone name which is associated with data items and their placement on a page.</summary>
        </member>
        <member name="P:N2.ContentItem.TemplateKey">
            <summary>Gets or sets the sub-definition name of this item.</summary>
        </member>
        <member name="P:N2.ContentItem.TranslationKey">
            <summary>A key shared by translations of an item. It's used to find translations and associate items as translations.</summary>
        </member>
        <member name="P:N2.ContentItem.Created">
            <summary>Gets or sets when this item was initially created.</summary>
        </member>
        <member name="P:N2.ContentItem.Updated">
            <summary>Gets or sets the date this item was updated.</summary>
        </member>
        <member name="P:N2.ContentItem.Published">
            <summary>Gets or sets the publish date of this item.</summary>
        </member>
        <member name="P:N2.ContentItem.Expires">
            <summary>Gets or sets the expiration date of this item.</summary>
        </member>
        <member name="P:N2.ContentItem.SortOrder">
            <summary>Gets or sets the sort order of this item.</summary>
        </member>
        <member name="P:N2.ContentItem.Visible">
            <summary>Gets or sets whether this item is visible. This is normally used to control its visibility in the site map provider.</summary>
        </member>
        <member name="P:N2.ContentItem.VersionOf">
            <summary>Gets or sets the published version of this item. If this value is not null then this item is a previous version of the item specified by VersionOf.</summary>
        </member>
        <member name="P:N2.ContentItem.SavedBy">
            <summary>Gets or sets the name of the identity who saved this item.</summary>
        </member>
        <member name="P:N2.ContentItem.Details">
            <summary>Gets or sets the details collection. These are usually accessed using the e.g. item["Detailname"]. This is a place to store content data.</summary>
        </member>
        <member name="P:N2.ContentItem.DetailCollections">
            <summary>Gets or sets the details collection collection. These are details grouped into a collection.</summary>
        </member>
        <member name="P:N2.ContentItem.Children">
            <summary>Gets or sets all a collection of child items of this item ignoring permissions. If you want the children the current user has permission to use <see cref="M:N2.ContentItem.GetChildren"/> instead.</summary>
        </member>
        <member name="P:N2.ContentItem.AncestralTrail">
            <summary>Represents the trail of id's uptil the current item e.g. "/1/10/14/"</summary>
        </member>
        <member name="P:N2.ContentItem.VersionIndex">
            <summary>The version number of this item</summary>
        </member>
        <member name="P:N2.ContentItem.Extension">
            <summary>The default file extension for this content item, e.g. ".aspx".</summary>
        </member>
        <member name="P:N2.ContentItem.IsPage">
            <summary>Gets whether this item is a page. This is used for and site map purposes.</summary>
        </member>
        <member name="P:N2.ContentItem.Url">
            <summary>Gets the public url to this item. This is computed by walking the parent path and prepending their names to the url.</summary>
        </member>
        <member name="P:N2.ContentItem.TemplateUrl">
            <summary>Gets the template that handle the presentation of this content item. For non page items (IsPage) this can be a user control (ascx).</summary>
        </member>
        <member name="P:N2.ContentItem.IconUrl">
            <summary>Gets the icon of this item. This can be used to distinguish item types in edit mode.</summary>
        </member>
        <member name="P:N2.ContentItem.RewrittenUrl">
            <summary>Gets the non-friendly url to this item (e.g. "/Default.aspx?page=1"). This is used to uniquely identify this item when rewriting to the template page. Non-page items have two query string properties; page and item (e.g. "/Default.aspx?page=1&amp;item&#61;27").</summary>
        </member>
        <member name="P:N2.ContentItem.AuthorizedRoles">
            <summary>Gets an array of roles allowed to read this item. Null or empty list is interpreted as this item has no access restrictions (anyone may read).</summary>
        </member>
        <member name="P:N2.ContentItem.Item(System.String)">
            <summary>Gets or sets the detail or property with the supplied name. If a property with the supplied name exists this is always returned in favour of any detail that might have the same name.</summary>
            <param name="detailName">The name of the propery or detail.</param>
            <returns>The value of the property or detail. If now property exists null is returned.</returns>
        </member>
        <member name="P:N2.ContentItem.Path">
            <summary>The logical path to the node from the root node.</summary>
        </member>
        <member name="T:N2.Definitions.ITemplateProvider">
            <summary>
            Provides the ability to create items with alternative editors, and pre-canned content.
            </summary>
        </member>
        <member name="M:N2.Definitions.ITemplateProvider.GetTemplates(System.Type)">
            <summary>Gets all templates for the given content type</summary>
            <param name="contentType">The type of content item whose templates to get.</param>
            <returns>An emumeration of templates of the given type.</returns>
        </member>
        <member name="M:N2.Definitions.ITemplateProvider.GetTemplate(N2.ContentItem)">
            <summary>Gives the template definition for items created by this template.</summary>
            <param name="item">The item whose template definition to get.</param>
            <returns>The corresponding template definition or null if the item doesn't derive from this provider.</returns>
        </member>
        <member name="M:N2.Definitions.Runtime.ViewTemplateRegistratorExtensions.RegisterViewTemplates``1(N2.Engine.IEngine)">
            <summary>Analyzes views in the controllers's view folder looking for dynamic template registrations.</summary>
            <typeparam name="T">The type of controller to analyze.</typeparam>
            <param name="engine">The engine from which to resolve the <see cref="T:N2.Definitions.Runtime.ViewTemplateRegistrator"/>.</param>
            <returns>The singleton <see cref="T:N2.Definitions.Runtime.ViewTemplateRegistrator"/> instance.</returns>
        </member>
        <member name="M:N2.Definitions.Runtime.ViewTemplateRegistratorExtensions.RegisterViewTemplates``1(N2.Engine.IEngine,System.String)">
            <summary>Analyzes views in the controllers's view folder looking for dynamic template registrations.</summary>
            <typeparam name="T">The type of controller to analyze.</typeparam>
            <param name="engine">The engine from which to resolve the <see cref="T:N2.Definitions.Runtime.ViewTemplateRegistrator"/>.</param>
            <param name="viewFileExtension">The type of view file to analyze. By the default .cshtml files are analyzed.</param>
            <returns>The singleton <see cref="T:N2.Definitions.Runtime.ViewTemplateRegistrator"/> instance.</returns>
        </member>
        <member name="T:N2.Definitions.Runtime.ViewTemplateRegistrator">
            <summary>
            Conveys information about controllers registered for view template discovery.
            </summary>
        </member>
        <member name="M:N2.Definitions.Runtime.ViewTemplateRegistrator.Add``1">
            <summary>Analyzes views in the controllers's view folder looking for dynamic template registrations.</summary>
            <typeparam name="T">The type of controller to analyze.</typeparam>
            <param name="engine">The engine from which to resolve the <see cref="T:N2.Definitions.Runtime.ViewTemplateRegistrator"/>.</param>
            <returns>The singleton <see cref="T:N2.Definitions.Runtime.ViewTemplateRegistrator"/> instance.</returns>
        </member>
        <member name="M:N2.Definitions.Runtime.ViewTemplateRegistrator.Add``1(System.String)">
            <summary>Analyzes views in the controllers's view folder looking for dynamic template registrations.</summary>
            <typeparam name="T">The type of controller to analyze.</typeparam>
            <param name="engine">The engine from which to resolve the <see cref="T:N2.Definitions.Runtime.ViewTemplateRegistrator"/>.</param>
            <param name="viewFileExtension">The type of view file to analyze. By the default .cshtml files are analyzed.</param>
            <returns>The singleton <see cref="T:N2.Definitions.Runtime.ViewTemplateRegistrator"/> instance.</returns>
        </member>
        <member name="T:N2.Definitions.AttributeTransformerBase`1">
            <summary>
            Transforms an objects into another shape.
            </summary>
            <typeparam name="TIn">The type of object that is to be transformed.</typeparam>
            <typeparam name="TOut">The type of object to be transformed into.</typeparam>
        </member>
        <member name="T:N2.Definitions.TransformerBase`1">
            <summary>
            Transforms an objects into another shape.
            </summary>
            <typeparam name="TOut">The type of object to be transformed into.</typeparam>
        </member>
        <member name="T:N2.Details.EditableFolderSelectionAttribute">
            <summary>
            Defines an editable image this allows to select an image with the file picker.
            </summary>
            <example>
            	public class MyItem : N2.ContentItem
            	{
            		[N2.Details.EditableFolderSelection]
            		public virtual string FolderUrl { get; set; }
            	}
            </example>
        </member>
        <member name="T:N2.Details.AbstractEditableAttribute">
            <summary>
            Basic implementation of the <see cref="T:N2.Definitions.IEditable"/>. This 
            class implements properties, provides comparison and equality but does
            not add any controls.
            </summary>
        </member>
        <member name="T:N2.Definitions.IEditable">
            <summary>
            Attributes implementing this interface defines editors of a content 
            item. The interface defines methods to add editor controls to a web 
            form and updating items with their values.
            </summary>
        </member>
        <member name="T:N2.Definitions.IContainable">
            <summary>
            Classes implementing this interface can add a graphical representation to 
            a control hierarchy.
            </summary>
        </member>
        <member name="T:N2.Definitions.IUniquelyNamed">
            <summary>
            Classes implementing this interface have a name that must be unique 
            within the a certain scope.
            </summary>
        </member>
        <member name="P:N2.Definitions.IUniquelyNamed.Name">
            <summary>Gets or sets the name of the prpoerty referenced by this attribute.</summary>
        </member>
        <member name="T:N2.Security.ISecurableBase">
            <summary>
            Common interface shared by <see cref="T:N2.Security.ISecurable"/> and <see cref="T:N2.Security.IPermittable"/>.
            </summary>
        </member>
        <member name="M:N2.Definitions.IContainable.AddTo(System.Web.UI.Control)">
            <summary>Adds a containable control to a container and returns it.</summary>
            <param name="container">The container onto which to add the containable control.</param>
            <returns>The newly added control.</returns>
        </member>
        <member name="P:N2.Definitions.IContainable.ContainerName">
            <summary>Gets or sets the name of a container containing this container.</summary>
        </member>
        <member name="P:N2.Definitions.IContainable.SortOrder">
            <summary>The order of this container compared to other containers and editors. Editors within the container are sorted according to their sort order.</summary>
        </member>
        <member name="M:N2.Definitions.IEditable.UpdateItem(N2.ContentItem,System.Web.UI.Control)">
            <summary>Updates the object with the values from the editor.</summary>
            <param name="item">The object to update.</param>
            <param name="editor">The editor contorl whose values to update the object with.</param>
            <returns>True if the item was changed (and needs to be saved).</returns>
        </member>
        <member name="M:N2.Definitions.IEditable.UpdateEditor(N2.ContentItem,System.Web.UI.Control)">
            <summary>Updates the editor with the values from the object.</summary>
            <param name="item">The object that contains values to assign to the editor.</param>
            <param name="editor">The editor to load with a value.</param>
        </member>
        <member name="P:N2.Definitions.IEditable.Title">
            <summary>Gets or sets the label used for presentation.</summary>
        </member>
        <member name="T:N2.Security.ISecurable">
            <summary>
            Editable attributes implementing this interface can have their 
            AuthorizedRoles property set through an external attribute.
            </summary>
        </member>
        <member name="T:N2.Security.IPermittable">
            <summary>
            When implemented by a plugin this attribute controls who may use it.
            </summary>
        </member>
        <member name="P:N2.Security.IPermittable.RequiredPermission">
            <summary>The permissions required.</summary>
        </member>
        <member name="T:N2.Persistence.Proxying.IInterceptableProperty">
            <summary>
            When added to an attribute this interface instructs the proxying system on how to deal with a property.
            </summary>
        </member>
        <member name="P:N2.Persistence.Proxying.IInterceptableProperty.PersistAs">
            <summary>Describes how the property is stored.</summary>
        </member>
        <member name="P:N2.Persistence.Proxying.IInterceptableProperty.DefaultValue">
            <summary>The default value of intercepted properties that have null value.</summary>
        </member>
        <member name="T:N2.Details.IContentTransformer">
            <summary>
            Applies modifications to a content item before it enters a state.
            </summary>
        </member>
        <member name="M:N2.Details.IContentTransformer.Transform(N2.ContentItem)">
            <summary>Applies modifications to the given item.</summary>
            <param name="item">The item to modify.</param>
        </member>
        <member name="P:N2.Details.IContentTransformer.ChangingTo">
            <summary>Apply modifications before transitioning item to this state.</summary>
            <remarks>Only New is currently supported.</remarks>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.#ctor">
            <summary>Default/empty constructor.</summary>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the AbstractEditableAttribute.</summary>
            <param name="title">The label displayed to editors</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>Initializes a new instance of the AbstractEditableAttribute.</summary>
            <param name="title">The label displayed to editors</param>
            <param name="name">The name used for equality comparison and reference.</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.UpdateItem(N2.ContentItem,System.Web.UI.Control)">
            <summary>Updates the object with the values from the editor.</summary>
            <param name="item">The object to update.</param>
            <param name="editor">The editor contorl whose values to update the object with.</param>
            <returns>True if the item was changed (and needs to be saved).</returns>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.UpdateEditor(N2.ContentItem,System.Web.UI.Control)">
            <summary>Updates the editor with data from the item.</summary>
            <param name="item">The content item containing the values to bind to the editor.</param>
            <param name="editor">The editor to be bound with data from the item.</param>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.AddTo(System.Web.UI.Control)">
            <summary>Adds a label and an editor to a panel.</summary>
            <param name="container">The container onto which the panel is added.</param>
            <returns>A reference to the addeed editor.</returns>
            <remarks>Please note that this method was abstract before version 1.3.1. It's now recommended to add the editor through the <see cref="M:N2.Details.AbstractEditableAttribute.AddEditor(System.Web.UI.Control)"/> method.</remarks>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.GetLocalizedText(System.String)">
            <summary>Gets a localized resource string from the global resource with the name denoted by <see cref="P:N2.Details.AbstractEditableAttribute.LocalizationClassKey"/>. The resource key follows the pattern <see cref="P:N2.Details.AbstractEditableAttribute.Name"/>.key where the name is the name of the detail and the key is the supplied parameter.</summary>
            <param name="key">A part of the resource key used for finding the localized resource.</param>
            <returns>A localized string if found, or null.</returns>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.IsAuthorized(System.Security.Principal.IPrincipal)">
            <summary>Find out whether a user has permission to edit this detail.</summary>
            <param name="user">The user to check.</param>
            <returns>True if the user has the required permissions.</returns>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.CompareTo(N2.Definitions.IEditable)">
            <summary>Compares the sort order of editable attributes.</summary>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.Equals(System.Object)">
            <summary>Checks another object for equality.</summary>
            <param name="obj">The other object to check.</param>
            <returns>True if the items are of the same type and have the same name.</returns>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.GetHashCode">
            <summary>Gets a hash code based on the attribute's name.</summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.AddPanel(System.Web.UI.Control)">
            <summary>Adds the panel to the container. Creating this panel and adding labels and editors to it will help to avoid web controls from interfere with each other.</summary>
            <param name="container">The container onto which add the panel.</param>
            <returns>A panel that can be used to add editor and label.</returns>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.AddLabel(System.Web.UI.Control)">
            <summary>Adds a label with the text set to the current Title to the container.</summary>
            <param name="container">The container control for the label.</param>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.AreEqual(System.Object,System.Object)">
            <summary>Compares two values regarding null values as equal.</summary>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.AddRegularExpressionValidator(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>Adds a regular expression validator.</summary>
            <param name="container">The container control for this validator.</param>
            <param name="editor">The editor control to validate.</param>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.AddRequiredFieldValidator(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>Adds a required field validator.</summary>
            <param name="container">The container control for this validator.</param>
            <param name="editor">The editor control to validate.</param>
        </member>
        <member name="M:N2.Details.AbstractEditableAttribute.AddEditor(System.Web.UI.Control)">
            <summary>Adds the editor control to the edit panel. This method is invoked by <see cref="M:N2.Details.AbstractEditableAttribute.AddTo(System.Web.UI.Control)"/> and the editor is prepended a label and wrapped in a panel. To remove these controls also override the <see cref="M:N2.Details.AbstractEditableAttribute.AddTo(System.Web.UI.Control)"/> method.</summary>
            <param name="container">The container onto which to add the editor.</param>
            <returns>A reference to the addeed editor.</returns>
            <remarks>Please note that this is a breaking change. This method was added after version 1.3.1 to reduce duplicated code induced by having <see cref="M:N2.Details.AbstractEditableAttribute.AddTo(System.Web.UI.Control)"/> abstract.</remarks>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.Required">
            <summary>Gets or sets whether a required field validator should be appended.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.ValidationExpression">
            <summary>Gets or sets the validation expression for a regular expression validator.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.Validate">
            <summary>Gets or sets whether a regular expression validator should be added.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.ValidationMessage">
            <summary>Gets or sets the message for the regular expression validator.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.RequiredMessage">
            <summary>Gets or sets the message for the required field validator.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.RequiredText">
            <summary>Gets or sets the text for the required field validator.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.ValidationText">
            <summary>Gets or sets the text for the regular expression validator.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.Engine">
            <summary>Gets the current Content Engine.</summary>
            <remarks>Note that a setter is made available for testing purposes only and there shouldn't be any need to use it. It's also important not to call this property from the constructor.</remarks>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.Title">
            <summary>Gets or sets the label used for presentation.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.Name">
            <summary>Gets or sets the name of the detail (property) on the content item's object.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.ContainerName">
            <summary>Gets or sets the container name associated with this editor. The name must match a container attribute defined on the item class.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.SortOrder">
            <summary>Gets or sets the order of the associated control</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.AuthorizedRoles">
            <summary>Gets or sets roles allowed to edit this detail. This property can be set by the DetailAuthorizedRolesAttribute.</summary>
        </member>
        <member name="P:N2.Details.AbstractEditableAttribute.IsViewEditable">
            <summary>Determines whether this editable can be managed when viewing a page in drag'n'drop mode.</summary>
        </member>
        <member name="T:N2.Details.IDisplayable">
            <summary>
            Classes implementing this interface defines a control used to display 
            the value of a content detail.
            </summary>
        </member>
        <member name="M:N2.Details.IDisplayable.AddTo(N2.ContentItem,System.String,System.Web.UI.Control)">
            <summary>Creates, initializes adds and returns the displayer.</summary>
            <param name="item">The item from which to get it's value.</param>
            <param name="detailName"></param>
            <param name="container">The container onto which to add the displayer.</param>
            <returns>The displayer control that was added.</returns>
        </member>
        <member name="T:N2.Details.IRelativityTransformer">
            <summary>
            Used by the export/import system to transform to and from absolute paths 
            when the applications reside in a virtual directory. 
            </summary>
        </member>
        <member name="M:N2.Details.IRelativityTransformer.Rebase(System.String,System.String,System.String)">
            <summary>Rebases links within a string to a new application base.</summary>
            <param name="value">The content to rebase</param>
            <param name="fromAppPath">The current application path.</param>
            <param name="toAppPath">The target application path.</param>
            <returns>An absolute url.</returns>
        </member>
        <member name="P:N2.Details.IRelativityTransformer.RelativeWhen">
            <summary>Tells the system when to make the path relative or absolute.</summary>
        </member>
        <member name="T:N2.Details.IWritingDisplayable">
            <summary>
            Represents a displayable attribute that can write it's value directly 
            to a text writer without need of page context.
            </summary>
        </member>
        <member name="M:N2.Details.IWritingDisplayable.Write(N2.ContentItem,System.String,System.IO.TextWriter)">
            <summary>Writes a detail value.</summary>
            <param name="item">The item containing the value.</param>
            <param name="detailName">The name of the property or detail.</param>
            <param name="writer">The writer to write the value to, unless the value is null.</param>
        </member>
        <member name="P:N2.Details.EditableFolderSelectionAttribute.Alt">
            <summary>Image alt text.</summary>
        </member>
        <member name="P:N2.Details.EditableFolderSelectionAttribute.CssClass">
            <summary>CSS class on the image element.</summary>
        </member>
        <member name="P:N2.Details.EditableFolderSelectionAttribute.PreferredSize">
            <summary>The image size to display by default if available.</summary>
        </member>
        <member name="T:N2.Details.EditableMediaUploadAttribute">
            <summary>
            Allows to upload or select a media file to use.
            </summary>
        </member>
        <member name="T:N2.Details.EditableFileUploadAttribute">
            <summary>
            Allows to upload or select a file to use.
            </summary>
        </member>
        <member name="P:N2.Details.EditableFileUploadAttribute.Alt">
            <summary>Image alt text.</summary>
        </member>
        <member name="P:N2.Details.EditableFileUploadAttribute.CssClass">
            <summary>CSS class on the image element.</summary>
        </member>
        <member name="P:N2.Details.EditableFileUploadAttribute.UploadText">
            <summary>CSS class on the image element.</summary>
        </member>
        <member name="P:N2.Details.EditableFileUploadAttribute.PreferredSize">
            <summary>The image size to display by default if available.</summary>
        </member>
        <member name="P:N2.Details.EditableMediaUploadAttribute.Height">
            <summary>The height of the media element.</summary>
        </member>
        <member name="P:N2.Details.EditableMediaUploadAttribute.Width">
            <summary>The width of the media element.</summary>
        </member>
        <member name="P:N2.Details.EditableMediaUploadAttribute.BackgroundColor">
            <summary>The background color of a media element.</summary>
        </member>
        <member name="T:N2.Details.EditableDefinitionAttribute">
            <summary>
            Allows selection of a template
            </summary>
        </member>
        <member name="T:N2.Details.EditableListControlAttribute">
            <summary>
            An abstract base class that implements editable list functionality.
            Override and implement GetListItems to use.
            Implement a CreateEditor() method to instantiate a desired editor control.
            </summary>
        </member>
        <member name="M:N2.Details.EditableListControlAttribute.GetValue(System.Web.UI.WebControls.ListControl)">
            <summary>Gets the object to store as content from the drop down list editor.</summary>
            <param name="ddl">The editor.</param>
            <returns>The value to store.</returns>
        </member>
        <member name="M:N2.Details.EditableListControlAttribute.GetValue(N2.ContentItem)">
            <summary>Gets a string value from the drop down list editor from the content item.</summary>
            <param name="item">The item containing the value.</param>
            <returns>A string to use as selected value.</returns>
        </member>
        <member name="P:N2.Details.EditableDefinitionAttribute.TemplateSelection">
            <summary>
            Select templates rather than definitions.
            </summary>
        </member>
        <member name="P:N2.Details.EditableDefinitionAttribute.RemovedTypes">
            <summary>
            Types that are filtered.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:N2.Details.EditableTagsAttribute" -->
        <member name="T:N2.Details.EditableTextAttribute">
            <summary>
            Attribute used to mark properties as editable. This attribute is predefined to use 
            the <see cref="T:System.Web.UI.WebControls.TextBox"/> web control as editor.</summary>
            <example>
            [N2.Details.EditableText("Heading", 80)]
            public virtual string Heading { get; set; }
            
            [N2.Details.EditableText("Published", 80)]
            public virtual DateTime PublishedDate { get; set; }
            </example>
        </member>
        <member name="M:N2.Details.EditableTextAttribute.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the EditableTextBoxAttribute class.</summary>
            <param name="title">The label displayed to editors</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="M:N2.Details.EditableTextAttribute.AddEditor(System.Web.UI.Control)">
            <summary>Creates a text box editor.</summary>
            <param name="container">The container control the tetx box will be placed in.</param>
            <returns>A text box control.</returns>
        </member>
        <member name="M:N2.Details.EditableTextAttribute.CreateEditor">
            <summary>Instantiates the text box control.</summary>
            <returns>A text box.</returns>
        </member>
        <member name="P:N2.Details.EditableTextAttribute.Columns">
            <summary>Gets or sets columns on the text box.</summary>
        </member>
        <member name="P:N2.Details.EditableTextAttribute.Rows">
            <summary>Gets or sets rows on the text box.</summary>
        </member>
        <member name="P:N2.Details.EditableTextAttribute.TextMode">
            <summary>Gets or sets the text box mode.</summary>
        </member>
        <member name="P:N2.Details.EditableTextAttribute.MaxLength">
            <summary>Gets or sets the max length of the text box.</summary>
        </member>
        <member name="T:N2.Details.IMultipleValue">
            <summary>
            Represents the value type of a content details using multiple value types.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:N2.Definitions.AttributeTransformerAttribute" -->
        <member name="T:N2.Engine.ServiceAttribute">
            <summary>
            Markes a service that is registered in automatically registered in N2's inversion of control container.
            </summary>
        </member>
        <member name="P:N2.Engine.ServiceAttribute.ServiceType">
            <summary>The type of service the attributed class represents.</summary>
        </member>
        <member name="P:N2.Engine.ServiceAttribute.Key">
            <summary>Optional key to associate with the service.</summary>
        </member>
        <member name="P:N2.Engine.ServiceAttribute.Configuration">
            <summary>Configurations for which this service is registered.</summary>
        </member>
        <member name="P:N2.Engine.ServiceAttribute.StaticAccessor">
            <summary>A static accessor property used to retrieve the service instance instead of instiatating it.</summary>
        </member>
        <member name="P:N2.Engine.ServiceAttribute.Replaces">
            <summary>A service defined by a <see cref="T:N2.Engine.ServiceAttribute"/> to replace with the attributed implementation.</summary>
        </member>
        <member name="T:N2.Details.WithEditableTemplateSelectionAttribute">
            <summary>
            Allows the selection of themes.
            </summary>
        </member>
        <member name="M:N2.Details.AbstractDisplayableAttribute.Equals(System.Object)">
            <summary>Checks another object for equality.</summary>
            <param name="obj">The other object to check.</param>
            <returns>True if the items are of the same type and have the same name.</returns>
        </member>
        <member name="M:N2.Details.AbstractDisplayableAttribute.GetHashCode">
            <summary>Gets a hash code based on the attribute's name.</summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:N2.Details.AbstractDisplayableAttribute.Name">
            <summary>Gets or sets the name of the detail (property) on the content item's object.</summary>
        </member>
        <member name="F:N2.Details.DisplayableTokensAttribute.CollectionSuffix">
            <summary>String that suffixes the detail name when tokens are stored in the detail collection.</summary>
        </member>
        <member name="T:N2.Details.EditableNumberAttribute">
            <summary>
            Adds editing of a number.
            </summary>
        </member>
        <member name="M:N2.Details.EditableNumberAttribute.#ctor">
            <summary>Initializes a new instance of the EditableTextBoxAttribute class.</summary>
        </member>
        <member name="M:N2.Details.EditableNumberAttribute.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the EditableTextBoxAttribute class.</summary>
            <param name="title">The label displayed to editors</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="P:N2.Details.EditableNumberAttribute.InvalidRangeMessage">
            <summary>Gets or sets the message for the regular expression validator.</summary>
        </member>
        <member name="T:N2.Details.EditableSummaryAttribute">
            <summary>
            Extracts a summary text from another detail and stores
            </summary>
        </member>
        <member name="T:N2.Details.EditableTextBoxAttribute">
            <summary>
            Attribute used to mark properties as editable. This attribute is predefined to use 
            the <see cref="T:System.Web.UI.WebControls.TextBox"/> web control as editor.</summary>
            <example>
            [N2.Details.EditableText("Heading", 80)]
            public virtual string Heading { get; set; }
            
            [N2.Details.EditableText("Published", 80)]
            public override DateTime Published { get; set; }
            </example>
            <remarks>Prefer [EditableText] over this since [EditableTextBox] will be made obsolete in future releases.</remarks>
        </member>
        <member name="M:N2.Details.EditableTextBoxAttribute.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the EditableTextBoxAttribute class.</summary>
            <param name="title">The label displayed to editors</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="M:N2.Details.EditableTextBoxAttribute.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the EditableTextBoxAttribute class.</summary>
            <param name="title">The label displayed to editors</param>
            <param name="sortOrder">The order of this editor</param>
            <param name="maxLength">The max length of the text box.</param>
        </member>
        <member name="T:N2.Details.WithEditableVisibilityAttribute">
            <summary>Class applicable attribute used to add a title editor.</summary>
            <example>
            [N2.Details.WithEditableVisibility("Display in navigation", 11)]
            public abstract class AbstractBaseItem : N2.ContentItem 
            {
            }
            </example>
        </member>
        <member name="T:N2.Details.EditableCheckBoxAttribute">
            <summary>An editable checkbox attribute. Besides creating a checkbox it also uses the checkbox's text property to display text.</summary>
        </member>
        <member name="T:N2.Details.EditableAttribute">
            <summary>Attribute used to mark properties as editable. This is used to associate the control used for the editing with the property/detail on the content item whose value we are editing.</summary>
        </member>
        <member name="M:N2.Details.EditableAttribute.#ctor">
            <summary>Default/empty constructor.</summary>
        </member>
        <member name="M:N2.Details.EditableAttribute.#ctor(System.String,System.Type,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the EditableAttribute class set to use a server control.
            </summary>
            <param name="title">The label displayed to editors</param>
            <param name="editorType">The type of webcontrol used for editing the unit's property</param>
            <param name="editorPropertyName">The property on the edit control that will update the unit's property</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="M:N2.Details.EditableAttribute.AddEditor(System.Web.UI.Control)">
            <summary>Is invoked when adding the editor control.</summary>
            <param name="container">The container control in which to add the editor.</param>
            <returns>The editor control.</returns>
        </member>
        <member name="M:N2.Details.EditableAttribute.CreateEditor(System.Web.UI.Control)">
            <summary>Creates an editor of the type defined by the ControlType property.</summary>
            <param name="container">The container in which the editor will be added.</param>
            <returns>The created control.</returns>
        </member>
        <member name="M:N2.Details.EditableAttribute.UpdateItem(N2.ContentItem,System.Web.UI.Control)">
            <summary>Updates the item with the values from the editor.</summary>
            <param name="item">The item to update.</param>
            <param name="editor">The editor contorl whose values to update the item with.</param>
        </member>
        <member name="M:N2.Details.EditableAttribute.GetEditorValue(System.Web.UI.Control)">
            <summary>Gets the value from the editor control. The ControlPropertyName property on the attribute defines which property's value is retrieved.</summary>
            <param name="editor">The control whose value to get.</param>
            <returns>The value of the editor property with the name defined by ControlPropertyName.</returns>
        </member>
        <member name="M:N2.Details.EditableAttribute.UpdateEditor(N2.ContentItem,System.Web.UI.Control)">
            <summary>Updates the editor with the values from the item.</summary>
            <param name="item">The item that contains values to assign to the editor.</param>
            <param name="editor">The editor to load with a value.</param>
        </member>
        <member name="M:N2.Details.EditableAttribute.SetEditorValue(System.Web.UI.Control,System.Object)">
            <summary>Loads an editor with a value.</summary>
            <param name="editor">The editor to load with a value.</param>
            <param name="value">The value to load the editor with.</param>
        </member>
        <member name="M:N2.Details.EditableAttribute.Modify(System.Web.UI.Control)">
            <summary>Applies editor modifications after creating the control.</summary>
            <param name="editor">The editor to modify.</param>
        </member>
        <member name="P:N2.Details.EditableAttribute.DataBind">
            <summary>Gets or sets whether the control should be databound when it's added to a page.</summary>
        </member>
        <member name="P:N2.Details.EditableAttribute.Focus">
            <summary>Gets or sets whether the control should be focused when it's added to a page.</summary>
        </member>
        <member name="P:N2.Details.EditableAttribute.ControlType">
            <summary>Gets or sets the type of the control that is used in combination with an item's property/detail.</summary>
        </member>
        <member name="P:N2.Details.EditableAttribute.ControlPropertyName">
            <summary>Gets or sets the property on the control that is used to get or set content data.</summary>
        </member>
        <member name="M:N2.Details.EditableCheckBoxAttribute.#ctor(System.String,System.Int32)">
            <summary>Creates a new instance of the checkbox editable attribute.</summary>
            <param name="checkBoxText">The text on the checkbox.</param>
            <param name="sortOrder">The order of this editable checkbox.</param>
        </member>
        <member name="M:N2.Details.EditableCheckBoxAttribute.CreateEditor(System.Web.UI.Control)">
            <summary>Creates a checkbox.</summary>
            <param name="container">The container the checkbox will be added to.</param>
            <returns>A checkbox.</returns>
        </member>
        <member name="P:N2.Details.EditableCheckBoxAttribute.CheckBoxText">
            <summary>Gets or sets the text on the checkbox. This differs from the title property since the text is after the checkbox.</summary>
        </member>
        <member name="M:N2.Details.WithEditableVisibilityAttribute.#ctor">
            <summary>
            Creates a new instance of the WithEditableAttribute class with default values.
            </summary>
        </member>
        <member name="M:N2.Details.WithEditableVisibilityAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the WithEditableAttribute class with default values.
            </summary>
            <param name="title">The label displayed to editors</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="T:N2.Definitions.ICommentable">
            <summary>
            Marks an item that can be commented.
            </summary>
        </member>
        <member name="P:N2.Definitions.ICommentable.Title">
            <summary>The title of the commented item.</summary>
        </member>
        <member name="T:N2.Definitions.IContentPage">
            <summary>
            Marks a page containing text content.
            </summary>
        </member>
        <member name="T:N2.Definitions.IPage">
            <summary>
            Marker interface used to denote pages. This interface allows collaboration
            between modules that doesn't know about each other.
            </summary>
        </member>
        <member name="P:N2.Definitions.IContentPage.Title">
            <summary>The title of the page.</summary>
        </member>
        <member name="P:N2.Definitions.IContentPage.Text">
            <summary>The text content of the page.</summary>
        </member>
        <member name="T:N2.Definitions.IDefinitionManager">
            <summary>Classes implementing this interface are responsible for item definitions used throughout the application to query the properties of a certain item.</summary>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetDefinition(System.Type)">
            <summary>Gets the definition for a certain item type.</summary>
            <param name="itemType">The type of item whose definition we want.</param>
            <returns>The definition matching a certain item type.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetDefinition(System.String)">
            <summary>Gets item definition for a certain discriminator.</summary>
            <param name="discriminator">The discriminator/name that uniquely identifies a certain type.</param>
            <returns>The definition matching the string.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetDefinition(N2.ContentItem)">
            <summary>Gets the definition for a certain item.</summary>
            <param name="item">The item whose definition we want.</param>
            <returns>The definition matching a certain item.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetDefinitions">
            <summary>Gets all item definitions.</summary>
            <returns>A collection of item definitoins.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.CreateInstance``1(N2.ContentItem)">
            <summary>Creates an instance of a certain type of item. It's good practice to create new items through this method so the item's dependencies can be injected by the engine.</summary>
            <returns>A new instance of an item.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.CreateInstance(System.Type,N2.ContentItem)">
            <summary>Creates an instance of a certain type of item. It's good practice to create new items through this method so the item's dependencies can be injected by the engine.</summary>
            <returns>A new instance of an item.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetAllowedChildren(N2.ContentItem,System.String)">
            <summary>Gets child types allowed below a certain item and zone.</summary>
            <param name="parentItem">The parent item whose allowed children to get.</param>
            <param name="zoneName">The zone name.</param>
            <returns>A list of definitions allowed by the given criterias.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetAllowedChildren(N2.ContentItem)">
            <summary>Gets child types allowed below a certain item and zone.</summary>
            <param name="parentItem">The parent item whose allowed children to get.</param>
            <returns>A list of definitions allowed by the given criterias.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetAllowedChildren(N2.ContentItem,System.String,System.Security.Principal.IPrincipal)">
            <summary>Gets a list of children allowed below a certain type of item and zone by a user.</summary>
            <param name="parentItem">The parent item whose allowed children to get.</param>
            <param name="zoneName">The zone name.</param>
            <param name="user">The user to use for filtering by access rights.</param>
            <returns>A list of definitions allowed by the given criterias.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetAllowedChildren(N2.Definitions.ItemDefinition,System.String,System.Security.Principal.IPrincipal)">
            <summary>Gets a list of children allowed below a certain type of item and zone by a user.</summary>
            <param name="definition">The parent definition whose allowed children to get.</param>
            <param name="zoneName">The zone name.</param>
            <param name="user">The user to use for filtering by access rights.</param>
            <returns>A list of definitions allowed by the given criterias.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetTemplates(System.Type)">
            <summary>Gets all templates for a certain content type.</summary>
            <param name="contentType">The type of a content item.</param>
            <returns>An enumeration of templates.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetTemplate(System.Type,System.String)">
            <summary>Gets a tmeplate by name and content type.</summary>
            <param name="contentType">The type of content item.</param>
            <param name="templateKey">The name of the template.</param>
            <returns>A matching template or null if no template is available.</returns>
        </member>
        <member name="M:N2.Definitions.IDefinitionManager.GetTemplate(N2.ContentItem)">
            <summary>Gets the template of a content item.</summary>
            <param name="item">The item whose template to get.</param>
            <returns>The item's template.</returns>
        </member>
        <member name="E:N2.Definitions.IDefinitionManager.ItemCreated">
            <summary>Notifies subscriber that an item was created through a <see cref="M:N2.Definitions.IDefinitionManager.CreateInstance(System.Type,N2.ContentItem)"/> method.</summary>
        </member>
        <member name="T:N2.Definitions.IFeed">
            <summary>
            Items implementing this interface provide feed meta data and syndicated 
            items.
            </summary>
        </member>
        <member name="T:N2.Definitions.ISimpleDefinitionRefiner">
            <summary>
            Refines a single definition.
            </summary>
        </member>
        <member name="M:N2.Definitions.ISimpleDefinitionRefiner.Refine(N2.Definitions.ItemDefinition)">
            <summary>Alters the item definition.</summary>
            <param name="currentDefinition">The definition to alter.</param>
        </member>
        <member name="T:N2.Definitions.ISyndicatable">
            <summary>
            Marks an item that is available for syndication.
            </summary>
        </member>
        <member name="P:N2.Definitions.ISyndicatable.Title">
            <summary>The title of the syndicated item.</summary>
        </member>
        <member name="P:N2.Definitions.ISyndicatable.Published">
            <summary>When the item was published.</summary>
        </member>
        <member name="P:N2.Definitions.ISyndicatable.Url">
            <summary>The address to the item.</summary>
        </member>
        <member name="P:N2.Definitions.ISyndicatable.Summary">
            <summary>A content summary.</summary>
        </member>
        <member name="P:N2.Definitions.ISyndicatable.Syndicate">
            <summary>Whether this particular item is to be syndicated.</summary>
        </member>
        <member name="T:N2.Definitions.IThemeable">
            <summary>
            An item that defines themes for itself any any descendants.
            </summary>
        </member>
        <member name="P:N2.Definitions.IThemeable.Theme">
            <summary>The name of the theme the view should apply when displaying this item or any descendant.</summary>
        </member>
        <member name="M:N2.Edit.EditExtensions.TryAppendCreatorNode(System.Collections.Generic.IEnumerable{N2.ContentItem},N2.Engine.IEngine,N2.ContentItem)">
            <summary>Checks access and the drag'n'drop state before adding the creator node to the given collection.</summary>
            <param name="items"></param>
            <param name="engine"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Edit.EditExtensions.AppendCreatorNode(System.Collections.Generic.IEnumerable{N2.ContentItem},N2.Engine.IEngine,N2.ContentItem)">
            <summary>Appends the creator node to the given collection.</summary>
            <param name="items"></param>
            <param name="engine"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="T:N2.Plugin.IAutoStart">
            <summary>
            Informs the IServiceContainer that a component should be started 
            through the start method and stopped through the stop method.
            </summary>
        </member>
        <member name="M:N2.Plugin.IAutoStart.Start">
            <summary>The method invoked on startup of this component.</summary>
        </member>
        <member name="M:N2.Plugin.IAutoStart.Stop">
            <summary>The method invoked on shutdown of this component.</summary>
        </member>
        <member name="T:N2.Engine.IProvider`1">
            <summary>
            Provides something. What this is depends on the circumstance.
            </summary>
            <typeparam name="T">The type of instance that is provided.</typeparam>
        </member>
        <member name="M:N2.Engine.IProvider`1.Get">
            <summary>Gets the default provided object.</summary>
            <returns>An object or null if no object can be provided.</returns>
        </member>
        <member name="M:N2.Engine.IProvider`1.GetAll">
            <summary>Gets all instances of the object.</summary>
            <returns>All provided objects of this type.</returns>
        </member>
        <member name="T:N2.Integrity.RestrictCardinalityAttribute">
            <summary>
            Restricts the number of siblings an item may have.
            </summary>
        </member>
        <member name="T:N2.Definitions.AbstractDefinitionRefiner">
            <summary>
            Base class providing sorting capabilities to refiner attributes.
            </summary>
        </member>
        <member name="T:N2.Definitions.ISortableRefiner">
            <summary>
            Base interface for refiners.
            </summary>
        </member>
        <member name="M:N2.Definitions.ISortableRefiner.Refine(N2.Definitions.ItemDefinition,System.Collections.Generic.IList{N2.Definitions.ItemDefinition})">
            <summary>Alters the item definition.</summary>
            <param name="currentDefinition">The definition to alter.</param>
            <param name="allDefinitions">All definitions.</param>
        </member>
        <member name="P:N2.Definitions.ISortableRefiner.RefinementOrder">
            <summary>Can be used by the comparer to help with sorting.</summary>
        </member>
        <member name="T:N2.Definitions.IInheritableDefinitionRefiner">
            <summary>
            Attributes implementing this interface can alter item definitions while
            they are beeing initiated. All classes in the inheritance chain are 
            queried for this interface when refining the definition.
            </summary>
        </member>
        <member name="P:N2.Integrity.RestrictCardinalityAttribute.MaximumCount">
            <summary>The maximum number of items of the attributed type allowed. Default is 1.</summary>
        </member>
        <member name="P:N2.Integrity.RestrictCardinalityAttribute.ComparableType">
            <summary>The type of element that are considered for maximum cardinality. Default is the type decorated by this attribute.</summary>
        </member>
        <member name="T:N2.Details.BooleanDetail">
            <summary>
            A boolean content detail. A number of content details can be associated 
            with one content item.
            </summary>
        </member>
        <member name="T:N2.Details.ContentDetail">
            <summary>
            A content detail. A number of content details can be associated with one content item.
            </summary>
            <remarks>Usually content details are created below the hood when working with primitive .NET types against a contnet item.</remarks>
        </member>
        <member name="M:N2.Details.ContentDetail.#ctor">
            <summary>Creates a new (empty) instance of the content detail.</summary>
        </member>
        <member name="M:N2.Details.ContentDetail.New(N2.ContentItem,System.String,System.Object)">
            <summary>Creates a new content detail of the appropriated type based on the given value.</summary>
            <param name="item">The item that will enclose the new detail.</param>
            <param name="name">The name of the detail.</param>
            <param name="value">The value of the detail. This will determine what type of content detail will be returned.</param>
            <returns>A new content detail whose type depends on the type of value.</returns>
        </member>
        <member name="M:N2.Details.ContentDetail.New(System.String,System.Object)">
            <summary>Creates a new content detail of the appropriated type based on the given value.</summary>
            <param name="name">The name of the detail.</param>
            <param name="value">The value of the detail. This will determine what type of content detail will be returned.</param>
            <returns>A new content detail whose type depends on the type of value.</returns>
        </member>
        <member name="M:N2.Details.ContentDetail.Multi(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,N2.ContentItem,System.Object)">
            <summary>Creates a new content detail with multiple values.</summary>
            <param name="enclosingItem">The item that will enclose the new detail.</param>
            <param name="name">The name of the detail.</param>
            <param name="booleanValue">Boolean value.</param>
            <param name="dateTimeValue">Date time value.</param>
            <param name="doubleValue">Double value.</param>
            <param name="integerValue">Integer value.</param>
            <param name="linkedValue">Linked item.</param>
            <param name="objectValue">Object value.</param>
            <param name="stringValue">String value.</param>
            <returns>A new content detail whose type depends on the type of value.</returns>
        </member>
        <member name="M:N2.Details.ContentDetail.GetAssociatedPropertyName(System.Object)">
            <summary>Gets the name of the property on the detail class that can encapsulate the given value.</summary>
            <param name="value">The value for which the to retrieve the associated property.</param>
            <returns>The name of the property on the detail class that can encapsulate the given value.</returns>
        </member>
        <member name="M:N2.Details.ContentDetail.GetAssociatedPropertyName``1">
            <summary>Gets the name of the property on the detail class that can encapsulate the given value type.</summary>
            <typeparam name="T">The value type for which the to retrieve the associated property.</typeparam>
            <returns>The name of the property on the detail class that can encapsulate the given value.</returns>
        </member>
        <member name="M:N2.Details.ContentDetail.GetAssociatedPropertyName(System.Type)">
            <summary>Gets the name of the property on the detail class that can encapsulate the given value type.</summary>
            <param name="valueType">The value type for which the to retrieve the associated property.</param>
            <returns>The name of the property on the detail class that can encapsulate the given value.</returns>
        </member>
        <member name="M:N2.Details.ContentDetail.Equals(System.Object)">
            <summary>Checks details for equality.</summary>
            <returns>True if details have the same ID.</returns>
        </member>
        <member name="M:N2.Details.ContentDetail.GetHashCode">
            <summary>Gets a hash code based on the ID.</summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:N2.Details.ContentDetail.ToString">
            <summary>Returns this details value's ToString result.</summary>
            <returns>The value to string.</returns>
        </member>
        <member name="M:N2.Details.ContentDetail.Clone">
            <summary>Creates a cloned object with the id set to 0.</summary>
            <returns>A new ContentDetail with the same Name and Value.</returns>
        </member>
        <member name="P:N2.Details.ContentDetail.ID">
            <summary>Gets or sets the detil's primary key.</summary>
        </member>
        <member name="P:N2.Details.ContentDetail.Name">
            <summary>Gets or sets the name of the detail.</summary>
        </member>
        <member name="P:N2.Details.ContentDetail.Value">
            <summary>Gets or sets this details' value.</summary>
        </member>
        <member name="P:N2.Details.ContentDetail.ValueType">
            <summary>Gets the type of value associated with this item.</summary>
        </member>
        <member name="P:N2.Details.ContentDetail.IsInCollection">
            <summary>Gets whether this items belongs to an <see cref="T:N2.Details.DetailCollection"/>.</summary>
        </member>
        <member name="P:N2.Details.ContentDetail.EnclosingItem">
            <summary>Gets or sets the content item that this detail belong to.</summary>
            <remarks>Usually this is assigned by a content item which encapsulates the usage of details</remarks>
        </member>
        <member name="P:N2.Details.ContentDetail.EnclosingCollection">
            <summary>Gets or sets the <see cref="T:N2.Details.DetailCollection"/> associated with this detail. This value can be null which means it's a named detail directly on the item.</summary>
        </member>
        <member name="T:N2.Details.ControlAssociationAttribute">
            <summary>Base class used to associate a content item's detail/property with a control that will handle editing or displaying.</summary>
        </member>
        <member name="M:N2.Details.ControlAssociationAttribute.Equals(System.Object)">
            <summary>Checks another object for equality.</summary>
            <param name="obj">The other object to check.</param>
            <returns>True if the items are of the same type and have the same name.</returns>
        </member>
        <member name="M:N2.Details.ControlAssociationAttribute.GetHashCode">
            <summary>Gets a hash code based on the attribute's name.</summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:N2.Details.ControlAssociationAttribute.DataBind">
            <summary>Gets or sets whether the control should be databound when it's added to a page.</summary>
        </member>
        <member name="P:N2.Details.ControlAssociationAttribute.Focus">
            <summary>Gets or sets whether the control should be focused when it's added to a page.</summary>
        </member>
        <member name="P:N2.Details.ControlAssociationAttribute.Name">
            <summary>Gets or sets the name of the detail (property) on the content item's object.</summary>
        </member>
        <member name="P:N2.Details.ControlAssociationAttribute.Title">
            <summary>Gets or sets the label used for presentation.</summary>
        </member>
        <member name="P:N2.Details.ControlAssociationAttribute.ControlType">
            <summary>Gets or sets the type of the control that is used in combination with an item's property/detail.</summary>
        </member>
        <member name="P:N2.Details.ControlAssociationAttribute.ControlPropertyName">
            <summary>Gets or sets the property on the control that is used to get or set content data.</summary>
        </member>
        <member name="P:N2.Details.ControlAssociationAttribute.SortOrder">
            <summary>Gets or sets the order of the associated control</summary>
        </member>
        <member name="T:N2.Details.DisplayableHeadingAttribute">
            <summary>Associate a property/detail with a literal used for presentation.</summary>
        </member>
        <member name="T:N2.Details.DisplayableAttribute">
            <summary>Associate a property/detail with a control used for presentation.</summary>
        </member>
        <member name="P:N2.Details.DisplayableAttribute.DataBind">
            <summary>Gets or sets whether the control should be databound when it's added to a page.</summary>
        </member>
        <member name="P:N2.Details.DisplayableAttribute.Focus">
            <summary>Gets or sets whether the control should be focused when it's added to a page.</summary>
        </member>
        <member name="P:N2.Details.DisplayableAttribute.Title">
            <summary>Gets or sets the label used for presentation.</summary>
        </member>
        <member name="P:N2.Details.DisplayableAttribute.ControlType">
            <summary>Gets or sets the type of the control that is used in combination with an item's property/detail.</summary>
        </member>
        <member name="P:N2.Details.DisplayableAttribute.ControlPropertyName">
            <summary>Gets or sets the property on the control that is used to get or set content data.</summary>
        </member>
        <member name="P:N2.Details.DisplayableAttribute.SortOrder">
            <summary>Gets or sets the order of the associated control</summary>
        </member>
        <member name="P:N2.Details.DisplayableHeadingAttribute.HeadingLevel">
            <summary>The heading level for the display (1-6)</summary>
        </member>
        <member name="T:N2.Details.DisplayableLiteralAttribute">
            <summary>Associate a property/detail with a literal used for presentation.</summary>
        </member>
        <member name="T:N2.Details.EditableUrlAttribute">
            <summary>Attribute used to mark properties as editable. This attribute is predefined to use the <see cref="T:N2.Web.UI.WebControls.UrlSelector"/> web control as editor/url selector.</summary>
            <example>
            [N2.Details.EditableUrl("Url to page or document", 50)]
            public virtual string PageOrDocumentUrl { get; set; }
            </example>
        </member>
        <member name="M:N2.Details.EditableUrlAttribute.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the EditableUrlAttribute class.</summary>
            <param name="title">The label displayed to editors</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="P:N2.Details.EditableUrlAttribute.AvailableModes">
            <summary>Defines whether files or content items are available to be picked</summary>
        </member>
        <member name="P:N2.Details.EditableUrlAttribute.OpeningMode">
            <summary>Defines whether files or content items are first shown when picking an url.</summary>
        </member>
        <member name="P:N2.Details.EditableUrlAttribute.RelativeTo">
            <summary>Defines whether the managementUrls should be stored as app- or server relative.</summary>
        </member>
        <member name="T:N2.Details.WithEditableAttribute">
            <summary>Class applicable attribute used to mark properties/details on a content item as editable. This attribute is used in situations were base class properties or details that havn't been blessed with a property are editable. This is used to associate the web control used for the editing with the property on the content item.</summary>
            <example>
            [N2.Details.WithEditable("A certain detail", typeof(TextBox), "Text", 10, "ACertainDetail")]
            public abstract class AbstractBaseItem : N2.ContentItem 
            {
            }
            </example>
        </member>
        <member name="M:N2.Details.WithEditableAttribute.#ctor(System.String,System.Type,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the WithEditableAttribute class set to use a server control.
            </summary>
            <param name="title">The label displayed to editors</param>
            <param name="editorType">The type of webcontrol used for editing the unit's property</param>
            <param name="editorPropertyName">The property on the edit control that will update the unit's property</param>
            <param name="sortOrder">The order of this editor</param>
            <param name="name">The name of property or detail on the content item to edit.</param>
        </member>
        <member name="T:N2.Details.DoubleDetail">
            <summary>
            An double content detail. A number of content details can be associated 
            with one content item.
            </summary>
        </member>
        <member name="T:N2.Details.IntegerDetail">
            <summary>
            An integer content detail. A number of content details can be 
            associated with one content item.
            </summary>
        </member>
        <member name="T:N2.Details.FreeTextAreaSettingsSet">
            <summary>
            Rich text editor settings set (toolbars, features).
            </summary>
        </member>
        <member name="F:N2.Details.FreeTextAreaSettingsSet.Undefined">
            <summary>Setting set is defined by configuration, DEFAULT by default.</summary>
        </member>
        <member name="F:N2.Details.FreeTextAreaSettingsSet.Fixed">
            <summary>Fixed rich text editor toolbar, basic features, no additional toolbars.</summary>
        </member>
        <member name="F:N2.Details.FreeTextAreaSettingsSet.Minimal">
            <summary>Single line toolbar, no additional toolbars.</summary>
        </member>
        <member name="F:N2.Details.FreeTextAreaSettingsSet.Simple">
            <summary>Single line tooolbar, all other toolbars shown by toogle icon.</summary>
        </member>
        <member name="F:N2.Details.FreeTextAreaSettingsSet.Extended">
            <summary>Extended toolbar with all features, less frequently used toolbars shown by toogle icon.</summary>
        </member>
        <member name="T:N2.Details.EditableFreeTextAreaAttribute">
            <summary>Attribute used to mark properties as editable. This attribute is predefined to use the <see cref="T:N2.Web.UI.WebControls.FreeTextArea"/> web control as editor.</summary>
            <example>
            [N2.Details.EditableFreeTextArea("Text", 110)] 
            public virtual string Text { get; set; }
            
            Setting set with full features:
            [N2.Details.EditableFreeTextArea("Text", 110, FreeTextAreaSettingsSet.Extended)]
            
            Default toolbar mode can be set in Web.config, e.g.
            <![CDATA[ 
             <n2>
              <edit>
                <tinyMCE cssUrl="/Content/myrichtext.css">
                  <settings>
                    <add key="settings_set" value="Extended" />
                  </settings>
              </edit>
             </n2>
            ]]>
            
            Notes: 
            settings_set property is nonstantard.
            See also standard TinyMCE settings at http://tinymce.moxiecode.com/wiki.php/Configuration
            Toogle toolbars: see PWD plugin at http://www.neele.name/pdw_toggle_toolbars/
            </example>
        </member>
        <member name="M:N2.Details.EditableFreeTextAreaAttribute.GetSettingsSetString(N2.Details.FreeTextAreaSettingsSet)">
            <summary>Stringify current settingset mode.</summary>
            <remarks>Extended class might implement extended logics, 
              e.g. check current site StartPage properties when UNDEFINED. 
              When defined will override default config. value.
            </remarks>
        </member>
        <member name="M:N2.Details.EditableFreeTextAreaAttribute.GetCssFiles(System.String)">
            <summary> Comma separated list of CSS file Urls to be used by TinyMCE, defined by application, default empty (unset) </summary>
            <remarks> Extended class might implement extended logics, e.g. to check current site StartPage properties to set site specific styling. 
              When defined will override default config. value.
            </remarks>
        </member>
        <member name="P:N2.Details.EditableFreeTextAreaAttribute.Toolbars">
            <summary> Current rich text editor setting set (e.g. basic features with simple toolbar, extended etc) </summary>
        </member>
        <member name="T:N2.Details.StringDetail">
            <summary>
            A string content detail. A number of content details can be associated 
            with one content item.
            </summary>
        </member>
        <member name="T:N2.Details.DateTimeDetail">
            <summary>A DateTime content detail. A number of content details can be associated with one content item.</summary>
        </member>
        <member name="T:N2.Details.ObjectDetail">
            <summary>A content detail. A number of content details can be associated with one content item.</summary>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetNavigationUrl(N2.INode)">
            <summary>Gets the url for the navigation frame.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <returns>An url.</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetPreviewUrl(N2.INode)">
            <summary>Gets the url for the preview frame.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <returns>An url.</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetEditNewPageUrl(N2.ContentItem,N2.Definitions.ItemDefinition,System.String,N2.Edit.CreationPosition)">
            <summary>Gets the url to edit page creating new items.</summary>
            <param name="selected">The selected item.</param>
            <param name="definition">The type of item to edit.</param>
            <param name="zoneName">The zone to add the item to.</param>
            <param name="position">The position relative to the selected item to add the item.</param>
            <returns>The url to the edit page.</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetEditExistingItemUrl(N2.ContentItem)">
            <summary>Gets the url to the edit page where to edit an existing item.</summary>
            <param name="item">The item to edit.</param>
            <returns>The url to the edit page</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetEditInterfaceUrl(N2.ContentItem)">
            <summary>Gets the url to the edit interface with a certain item selected.</summary>
            <param name="selectedItem">The item to select in edit mode.</param>
            <returns>The url to the edit interface.</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetEditInterfaceUrl">
            <summary>Gets the url to the edit interface.</summary>
            <returns>The url to the edit interface.</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetManagementInterfaceUrl">
            <summary>Gets the url to the management interface.</summary>
            <returns>The url to the edit interface.</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.ResolveResourceUrl(System.String)">
            <summary>Gets the url to the given resource underneath the management interface.</summary>
            <returns>The url to the edit interface.</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetSelectNewItemUrl(N2.ContentItem)">
            <summary>Gets the url to the select type of item to create.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <returns>The url to the select new item to create page.</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetSelectNewItemUrl(N2.ContentItem,System.String)">
            <summary>Gets the url to the select type of item to create.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <param name="zoneName">The zone to select.</param>
            <returns>The url to the select new item to create page.</returns>
        </member>
        <member name="M:N2.Edit.IEditUrlManager.GetDeleteUrl(N2.ContentItem)">
            <summary>Gets the url to the delete item page.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <returns>The url to the delete page.</returns>
        </member>
        <member name="P:N2.Edit.IEditUrlManager.EditTreeUrl">
            <summary>Gets the url for the navigation frame.</summary>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetNavigationUrl(N2.INode)">
            <summary>Gets the url for the navigation frame.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <returns>An url.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetPreviewUrl(N2.INode)">
            <summary>Gets the url for the preview frame.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <returns>An url.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetEditInterfaceUrl">
            <summary>Gets the url to the edit interface.</summary>
            <returns>The url to the edit interface.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetManagementInterfaceUrl">
            <summary>Gets the url to the edit interface.</summary>
            <returns>The url to the edit interface.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.ResolveResourceUrl(System.String)">
            <summary>Gets the url to the given resource underneath the management interface.</summary>
            <returns>The url to the given resource rebased to the management path when not aboslute.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetEditInterfaceUrl(N2.ContentItem)">
            <summary>Gets the url to the edit interface.</summary>
            <param name="selectedItem">The item to select in edit mode.</param>
            <returns>The url to the edit interface.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetSelectNewItemUrl(N2.ContentItem)">
            <summary>Gets the url to the select type of item to create.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <returns>The url to the select new item to create page.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetSelectNewItemUrl(N2.ContentItem,System.String)">
            <summary>Gets the url to the select type of item to create.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <param name="zoneName">The zone in which to create the item (typically parts)</param>
            <returns>The url to the select new item to create page.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetDeleteUrl(N2.ContentItem)">
            <summary>Gets the url to the delete item page.</summary>
            <param name="selectedItem">The currently selected item.</param>
            <returns>The url to the delete page.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetEditNewPageUrl(N2.ContentItem,N2.Definitions.ItemDefinition,System.String,N2.Edit.CreationPosition)">
            <summary>Gets the url to edit page creating new items.</summary>
            <param name="selected">The selected item.</param>
            <param name="definition">The type of item to edit.</param>
            <param name="zoneName">The zone to add the item to.</param>
            <param name="position">The position relative to the selected item to add the item.</param>
            <returns>The url to the edit page.</returns>
        </member>
        <member name="M:N2.Edit.EditUrlManager.GetEditExistingItemUrl(N2.ContentItem)">
            <summary>Gets the url to the edit page where to edit an existing item.</summary>
            <param name="item">The item to edit.</param>
            <returns>The url to the edit page</returns>
        </member>
        <member name="T:N2.Edit.Installation.AppPathRebaser">
            <summary>
            Rebases links in properties.
            </summary>
        </member>
        <member name="M:N2.Edit.Installation.AppPathRebaser.Rebase(System.String,System.String)">
            <summary>
            Rebases all items.
            </summary>
            <param name="fromUrl"></param>
            <param name="toUrl"></param>
            <returns></returns>
            <remarks>The return enumeration must be enumerated in order for the changes to take effect.</remarks>
        </member>
        <member name="M:N2.Edit.Installation.AppPathRebaser.Rebase(N2.ContentItem,System.String,System.String)">
            <summary>
            Rebases a single item.
            </summary>
            <param name="item"></param>
            <param name="fromUrl"></param>
            <param name="toUrl"></param>
            <returns></returns>
        </member>
        <member name="T:N2.Edit.Installation.RebaseInfo">
            <summary>
            Information of a rebased detail.
            </summary>
        </member>
        <member name="T:N2.Edit.ToolbarArea">
            <summary>An area in which to place edit mode plugins.</summary>
        </member>
        <member name="F:N2.Edit.ToolbarArea.Navigation">
            <summary>The far left area above the navigation area.</summary>
        </member>
        <member name="F:N2.Edit.ToolbarArea.Preview">
            <summary>The far right area above the preview area.</summary>
        </member>
        <member name="F:N2.Edit.ToolbarArea.Both">
            <summary>Both panes. Used when referencing multiple panes in user interfaces.</summary>
        </member>
        <member name="F:N2.Edit.ToolbarArea.Operations">
            <summary>The central area above the preview area.</summary>
        </member>
        <member name="F:N2.Edit.ToolbarArea.Options">
            <summary>Before the search box, above the tool bar.</summary>
        </member>
        <member name="F:N2.Edit.ToolbarArea.Management">
            <summary>Displayed across all management interfaces.</summary>
        </member>
        <member name="F:N2.Edit.ToolbarArea.Files">
            <summary>Displayed on files.</summary>
        </member>
        <member name="T:N2.Edit.ToolbarPluginAttribute">
            <summary>
            An attribute defining a toolbar item in edit mode.
            </summary>
        </member>
        <member name="T:N2.Edit.LinkPluginAttribute">
            <summary>
            Base class for plugins in the navigation screen and toolbar.
            </summary>
        </member>
        <member name="T:N2.Edit.AdministrativePluginAttribute">
            <summary>
            Classes extending this abstract class are collected and may be 
            retrieved by user interfaces in the editing interface.
            </summary>
        </member>
        <member name="T:N2.Plugin.IPlugin">
            <summary>
            Interface denoting plug-in attributes that are displayed throughout 
            the editing interface.
            </summary>
        </member>
        <member name="M:N2.Edit.AdministrativePluginAttribute.IsAuthorized(System.Security.Principal.IPrincipal,N2.Security.ISecurityManager)">
            <summary>Find out whether a user has permission to view this plugin in the toolbar.</summary>
            <param name="user">The user to check.</param>
            <returns>True if the user is null or no permissions are required or the user has permissions.</returns>
        </member>
        <member name="P:N2.Edit.AdministrativePluginAttribute.AuthorizedRoles">
            <summary>Specific roles required to use this plugin.</summary>
        </member>
        <member name="P:N2.Edit.AdministrativePluginAttribute.RequiredPermission">
            <summary>The minimum permission to require to allow this plugin.</summary>
        </member>
        <member name="P:N2.Edit.AdministrativePluginAttribute.IconUrl">
            <summary>Url to the anchor's image icon.</summary>
        </member>
        <member name="P:N2.Edit.AdministrativePluginAttribute.Engine">
            <summary>The current N2 context.</summary>
        </member>
        <member name="P:N2.Edit.LinkPluginAttribute.Target">
            <summary>The target frame for the plugn link.</summary>
        </member>
        <member name="P:N2.Edit.LinkPluginAttribute.Title">
            <summary>The plugin's text.</summary>
        </member>
        <member name="P:N2.Edit.LinkPluginAttribute.UrlFormat">
            <summary>
            The plugin's url format. These magic strings are interpreted by the 
            client and inserted in the url before the frame is loaded: 
            {selected}, {memory}, {action}
            </summary>
        </member>
        <member name="P:N2.Edit.LinkPluginAttribute.ToolTip">
            <summary>The plugin's tool tip.</summary>
        </member>
        <member name="P:N2.Edit.LinkPluginAttribute.AlternativeText">
            <summary>Alternative text for the icon.</summary>
        </member>
        <member name="P:N2.Edit.LinkPluginAttribute.GlobalResourceClassName">
            <summary>Used for translating the plugin's texts from a global resource.</summary>
        </member>
        <member name="P:N2.Edit.LinkPluginAttribute.ArrayVariableName">
            <summary>This string is used by the client to find plugins.</summary>
        </member>
        <member name="M:N2.Edit.ToolbarPluginAttribute.#ctor">
            <summary>Defines a toolbar link.</summary>
        </member>
        <member name="M:N2.Edit.ToolbarPluginAttribute.#ctor(System.String,System.String,System.String,N2.Edit.ToolbarArea)">
            <summary>Defines a toolbar link.</summary>
            <param name="title">The text displayed in the toolbar.</param>
            <param name="name">The name of this plugin (must be unique).</param>
            <param name="urlFormat">The url format for the url for this plugin where {selected} is the rewritten url of the currently selected item, {memory} is a cut or copied page url {action} is either move or copy.</param>
            <param name="area">The area to put the link.</param>		
        </member>
        <member name="M:N2.Edit.ToolbarPluginAttribute.#ctor(System.String,System.String,System.String,N2.Edit.ToolbarArea,System.String,System.String,System.Int32)">
            <summary>Defines a toolbar link.</summary>
            <param name="title">The text displayed in the toolbar.</param>
            <param name="name">The name of this plugin (must be unique).</param>
            <param name="urlFormat">The url format for the url for this plugin where {selected} is the rewritten url of the currently selected item, {memory} is a cut or copied page url {action} is either move or copy.</param>
            <param name="area">The area to put the link.</param>		
            <param name="target">The target of the link.</param>	
            <param name="iconUrl">An url to an icon.</param>
            <param name="sortOrder">The order of this link</param>
        </member>
        <member name="P:N2.Edit.ToolbarPluginAttribute.OptionProvider">
            <summary>
            A type implementing N2.Engine.IProvider(Of ToolbarOption)
            </summary>
        </member>
        <member name="T:N2.Content">
            <summary>
            Provides access to common functions.
            </summary>
        </member>
        <member name="P:N2.Content.Is">
            <summary>
            Provides access to filters applyable to content items.
            </summary>
        </member>
        <member name="P:N2.Content.Traverse">
            <summary>
            Simplifies traversing items in the content hierarchy.
            </summary>
        </member>
        <member name="P:N2.Content.Search">
            <summary>
            Simplifies access to APIs related to search and querying.
            </summary>
        </member>
        <member name="P:N2.Content.Current">
            <summary>
            Simplifies access to the current page
            </summary>
        </member>
        <member name="T:N2.Linq.QueryTransformer">
            <summary>
            Translates queries against properties on an object to detail sub-select queries
            </summary>
        </member>
        <member name="M:N2.Linq.EngineExtensions.Query``1(N2.Engine.IEngine)">
            <summary>Creates a query for elements in the N2 database.</summary>
            <typeparam name="T">The type of item to query.</typeparam>
            <param name="engine">The engine onto which the extension method is attached.</param>
            <returns>A query that can be extended.</returns>
        </member>
        <member name="M:N2.Linq.EngineExtensions.QueryItems``1(N2.Engine.IEngine)">
            <summary>Creates a query for published content items.</summary>
            <typeparam name="T">The type of content item to query for.</typeparam>
            <param name="engine">The engine onto which the extension method is attached.</param>
            <returns>A query that can be extended.</returns>
        </member>
        <member name="M:N2.Linq.EngineExtensions.QueryItems``1(N2.Engine.IEngine,N2.Persistence.Finder.VersionOption)">
            <summary>Create a query for content items with the option of including versions.</summary>
            <typeparam name="T">The type of content item to query for.</typeparam>
            <param name="engine">The engine onto which the extension method is attached.</param>
            <param name="versions">Wheter to include or exclude versions.</param>
            <returns>A query that can be extended.</returns>
        </member>
        <member name="M:N2.Linq.EngineExtensions.QueryItems(N2.Engine.IEngine)">
            <summary>Creates a query for published content items.</summary>
            <param name="engine">The engine onto which the extension method is attached.</param>
            <returns>A query that can be extended.</returns>
        </member>
        <member name="M:N2.Linq.EngineExtensions.QueryItems(N2.Engine.IEngine,N2.Persistence.Finder.VersionOption)">
            <summary>Creates a query for content items with the option of including versions.</summary>
            <param name="versions">Wheter to include or exclude versions.</param>
            <param name="engine">The engine onto which the extension method is attached.</param>
            <returns>A query that can be extended.</returns>
        </member>
        <member name="M:N2.Linq.EngineExtensions.QueryDetails(N2.Engine.IEngine)">
            <summary>Creates a query for details in the N2 database.</summary>
            <param name="engine">The engine onto which the extension method is attached.</param>
            <returns>A query that can be extended.</returns>
        </member>
        <member name="M:N2.Linq.EngineExtensions.QueryDetailCollections(N2.Engine.IEngine)">
            <summary>Creates a query for detail collections.</summary>
            <param name="engine">The engine onto which the extension method is attached.</param>
            <returns>A query that can be extended.</returns>
        </member>
        <member name="T:N2.Integrity.AllowedParentsAttribute">
            <summary>
            A class decoration used to restrict which items may be placed under 
            which. When this attribute intersects with 
            <see cref="T:N2.Integrity.AllowedChildrenAttribute"/>, the union of these two are 
            considered to be allowed.</summary>
        </member>
        <member name="T:N2.Integrity.RestrictParentsAttribute">
            <summary>
            A class decoration used to restrict which items may be placed under 
            which. When this attribute intersects with 
            <see cref="T:N2.Integrity.AllowedChildrenAttribute"/>, the union of these two are 
            considered to be allowed.</summary>
        </member>
        <member name="T:N2.Integrity.TypeIntegrityAttribute">
            <summary>
            Base class for attributes used to restrict which types can be created below which.
            </summary>
        </member>
        <member name="M:N2.Integrity.TypeIntegrityAttribute.IsAssignable(System.Type)">
            <summary>Tells wether any of the types defined by the <see cref="P:N2.Integrity.TypeIntegrityAttribute.Types"/> property are assignable by the supplied type.</summary>
            <param name="type">The type to check.</param>
            <returns>True of any of the types was assignable from the supplied type.</returns>
        </member>
        <member name="P:N2.Integrity.TypeIntegrityAttribute.Types">
            <summary>Gets or sets the types needed by this attribute.</summary>
        </member>
        <member name="M:N2.Integrity.RestrictParentsAttribute.#ctor">
            <summary>Initializes a new instance of the RestrictParentsAttribute which is used to restrict which types of items may be added below which.</summary>
        </member>
        <member name="M:N2.Integrity.RestrictParentsAttribute.#ctor(N2.Integrity.AllowedTypes)">
            <summary>Initializes a new instance of the RestrictParentsAttribute which is used to restrict which types of items may be added below which.</summary>
            <param name="allowedTypes">Defines wether all types of items are allowed as parent items.</param>
        </member>
        <member name="M:N2.Integrity.RestrictParentsAttribute.#ctor(System.Type[])">
            <summary>Initializes a new instance of the RestrictParentsAttribute which is used to restrict which types of items may be added below which.</summary>
            <param name="allowedParentTypes">A list of allowed types. Null is interpreted as all types are allowed.</param>
        </member>
        <member name="M:N2.Integrity.RestrictParentsAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the RestrictParentsAttribute which is used to restrict which types of items may be added below which.</summary>
            <param name="allowedParentType">A list of allowed types. Null is interpreted as all types are allowed.</param>
        </member>
        <member name="M:N2.Integrity.RestrictParentsAttribute.Refine(N2.Definitions.ItemDefinition,System.Collections.Generic.IList{N2.Definitions.ItemDefinition})">
            <summary>Changes allowed parents on the item definition.</summary>
            <param name="currentDefinition">The definition to alter.</param>
            <param name="allDefinitions">All definitions.</param>
        </member>
        <member name="P:N2.Integrity.RestrictParentsAttribute.TemplateKeys">
            <summary>
            Restrict children by template name, allow only children with these template name.
            </summary>
        </member>
        <member name="M:N2.Integrity.AllowedParentsAttribute.#ctor">
            <summary>Initializes a new instance of the RestrictParentsAttribute which is used to restrict which types of items may be added below which.</summary>
        </member>
        <member name="M:N2.Integrity.AllowedParentsAttribute.#ctor(N2.Integrity.AllowedTypes)">
            <summary>Initializes a new instance of the RestrictParentsAttribute which is used to restrict which types of items may be added below which.</summary>
            <param name="allowedTypes">Defines wether all types of items are allowed as parent items.</param>
        </member>
        <member name="M:N2.Integrity.AllowedParentsAttribute.#ctor(System.Type[])">
            <summary>Initializes a new instance of the RestrictParentsAttribute which is used to restrict which types of items may be added below which.</summary>
            <param name="allowedParentTypes">A list of allowed types. Null is interpreted as all types are allowed.</param>
        </member>
        <member name="T:N2.Integrity.AllowedZonesAttribute">
            <summary>
            Class decoration that lets N2 which zones a data item can be added to. 
            This is mostly a hint for the user interface. Placing an item in a zone
            merly means assigning the child item's ZoneName property a meaningful 
            string.
            </summary>
        </member>
        <member name="M:N2.Integrity.AllowedZonesAttribute.#ctor(N2.Integrity.AllowedZones)">
            <summary>Initializes a new instance of the AllowedZonesAttribute which is used to restrict which zones item may have.</summary>
        </member>
        <member name="M:N2.Integrity.AllowedZonesAttribute.#ctor(System.String[])">
            <summary>Initializes a new instance of the AllowedZonesAttribute which is used to restrict which zones item may have.</summary>
            <param name="zoneNames">A list of allowed zone names. Null is interpreted as any/all zone.</param>
        </member>
        <member name="P:N2.Integrity.AllowedZonesAttribute.ZoneNames">
            <summary>Gets or sets zones the item can be added to.</summary>
        </member>
        <member name="T:N2.Definitions.ItemDefinition">
            <summary>
            Represents the definition of a content item. Expose reflected 
            information a types attributes.
            </summary>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.#ctor(System.Type,N2.Definitions.AttributeExplorer)">
            <summary>Creates a new a instance of the ItemDefinition class loading the supplied type.</summary>
            <param name="itemType">The item type to define.</param>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.#ctor(System.Type)">
            <summary>Creates a new a instance of the ItemDefinition class loading the supplied type.</summary>
            <param name="itemType">The item type to define.</param>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.GetAllowedChildren(N2.Definitions.IDefinitionManager,N2.ContentItem)">
            <summary>Gets or sets additional child types allowed below this item.</summary>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.IsAllowedInZone(System.String)">
            <summary>Find out if this item is allowed in a zone.</summary>
            <param name="zoneName">The zone name to check.</param>
            <returns>True if the item is allowed in the zone.</returns>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.GetModifiers(System.String)">
            <summary>Gets the editor modifications for the specified detail name.</summary>
            <param name="detailName"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.CreateInstance(N2.ContentItem)">
            <summary>Instantiates a new object of the defined content item class.</summary>
            <returns>A new instance of the defined content item type.</returns>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.AddAllowedZone(System.String)">
            <summary>Adds an allowed zone to the definition's list of allwed zones.</summary>
            <param name="zone">The zone name to add.</param>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.Add(N2.Definitions.IUniquelyNamed)">
            <summary>Adds an containable editor or container to existing editors and to a container.</summary>
            <param name="containable">The editable to add.</param>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.AddRange(System.Collections.Generic.IEnumerable{N2.Definitions.IUniquelyNamed})">
            <summary>Adds an enumeration of containable editor or container to existing editors and to a container.</summary>
            <param name="containables">The editables to add.</param>
        </member>
        <member name="M:N2.Definitions.ItemDefinition.CompareTo(N2.Definitions.ItemDefinition)">
            <summary>Compares the sort order of this item definition to another.</summary>
            <param name="other">The other item definition to compare.</param>
            <returns>This items sort order compared to other definition's.</returns>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.TemplateKey">
            <summary>Variant of an item with the same discriminator.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.RelatedTo">
            <summary>Discriminator of an item this item is related to.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.NumberOfItems">
            <summary>Numbers of items of this type in the database.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.Installer">
            <summary>Gets or sets how to treat this definition during installation.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.IsPage">
            <summary>Whether the defined type is a page or a part.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.AuthorizedRoles">
            <summary>Gets roles or users allowed to create/edit/delete items defined by this definition.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.RequiredPermission">
            <summary>Permission required to create/edit/delete items defined by this definition.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.Title">
            <summary>Gets the name used when presenting this item class to editors.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.Discriminator">
            <summary>Gets discriminator value used to to map class when retrieving from persistence. When this is null the type's full name is used.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.Enabled">
            <summary>Definitions which are not enabled are not available when creating new items.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.IsDefined">
            <summary>Gets or sets wheter this definition has been defined. Weirdly enough a definition may exist without beeing defined. To define a definition the class must implement the <see cref="T:N2.PageDefinitionAttribute"/> or <see cref="T:N2.PartDefinitionAttribute"/>.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.SortOrder">
            <summary>Gets the order of this item type when selecting new item in edit mode.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.ToolTip">
            <summary>Gets the tooltip used when presenting this item class to editors.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.Description">
            <summary>Gets the description used when presenting this item class to editors.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.ItemType">
            <summary>Gets or sets the type of this item.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.AvailableZones">
            <summary>Gets zones available in this items of this class.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.AllowedZoneNames">
            <summary>Gets zones this class of items can be placed in.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.IconUrl">
            <summary>Gets the IconUrl returned by a new instance of the item.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.Editables">
            <summary>Gets or sets editables defined for the item.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.Containers">
            <summary>Gets or sets containers defined for the item.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.EditableModifiers">
            <summary>Gets or sets all editor modifier attributes for this item.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.DefaultContainerName">
            <summary>The container name of editors that have no other container.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.Modifiers">
            <summary>Gets or sets all editor modifier attributes for this item.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.ContentTransformers">
            <summary>Default modifiers for the content item before it transitions to a state.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.Displayables">
            <summary>Gets or sets displayable attributes defined for the item.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.NamedOperators">
            <summary>Named items associated to a property.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.AllowedChildFilters">
            <summary>Filters allowed definitions below this definition.</summary>
        </member>
        <member name="P:N2.Definitions.ItemDefinition.AllowedParentFilters">
            <summary>Filters allowed definitions above this definition.</summary>
        </member>
        <member name="T:N2.Integrity.IIntegrityManager">
            <summary>
            Classes implementing this interface are responsible of the integrity 
            between content items in a N2 cms systems. This probably involves 
            checking which items may be placed below which and ensuring that no 
            items are placed below themselves.
            </summary>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.CanCopy(N2.ContentItem,N2.ContentItem)">
            <summary>Check wether a copy operation is allowed.</summary>
            <param name="source">The item to copy.</param>
            <param name="destination">The destination for the copied item.</param>
            <returns>True if the item can becopied.</returns>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.CanDelete(N2.ContentItem)">
            <summary>Checks wether an item can be deleted</summary>
            <param name="item">The item to delete.</param>
            <returns>True if the item can be deleted.</returns>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.CanMove(N2.ContentItem,N2.ContentItem)">
            <summary>Check wether a move operation is allowed.</summary>
            <param name="source">The item to move.</param>
            <param name="destination">The parent item where the item will be moved to.</param>
            <returns>True if the item can be moved.</returns>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.CanSave(N2.ContentItem)">
            <summary>Checks wether an item can be saved.</summary>
            <param name="item">The item to save.</param>
            <returns>True if the item can be saved.</returns>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.IsLocallyUnique(System.String,N2.ContentItem)">
            <summary>Checks wether an item's name is locally unique, i.e. no other sibling has the same name.</summary>
            <param name="name">The name we're proposing for the item.</param>
            <param name="item">The item whose siblings to check.</param>
            <returns>True if the item would get a unique name.</returns>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.GetMoveException(N2.ContentItem,N2.ContentItem)">
            <summary>Checks if an item can be moved to a destination.</summary>
            <param name="source">The item that is to be moved.</param>
            <param name="destination">The destination onto which the item is to be moved.</param>
            <returns>Null if the item can be moved or an exception if the item can't be moved.</returns>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.GetCopyException(N2.ContentItem,N2.ContentItem)">
            <summary>Check if an item can be copied.</summary>
            <exception cref="T:N2.Integrity.NameOccupiedException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.GetDeleteException(N2.ContentItem)">
            <summary>Check if an item can be deleted.</summary>
            <param name="item"></param>
            <returns>The exception that would be thrown if the item was created.</returns>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.GetSaveException(N2.ContentItem)">
            <summary>Check if an item can be saved.</summary>
            <param name="item"></param>
            <returns>The exception that would be thrown if the item was created.</returns>
        </member>
        <member name="M:N2.Integrity.IIntegrityManager.GetCreateException(N2.ContentItem,N2.ContentItem)">
            <summary>Check if an item can be created.</summary>
            <param name="item"></param>
            <param name="parent"></param>
            <returns>The exception that would be thrown if the item was created.</returns>
        </member>
        <member name="T:N2.N2Exception">
            <summary>The base class for the N2 application exceptions.</summary>
        </member>
        <member name="M:N2.N2Exception.#ctor(System.String)">
            <summary>Creates a new instance of the N2Exception, the base class for known N2 exceptions.</summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:N2.N2Exception.#ctor(System.String,System.Object[])">
            <summary>Creates a new instance of the N2Exception, the base class for known N2 exceptions.</summary>
            <param name="messageFormat">The exception message format.</param>
            <param name="args">The exception message arguments.</param>
        </member>
        <member name="M:N2.N2Exception.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of the N2Exception that encapsulates an underlying exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The underlying exception.</param>
        </member>
        <member name="T:N2.Collections.ItemComparer">
            <summary>
            Compares two content items based on a detail. This class can compare 
            classes given a expression.
            </summary>
        </member>
        <member name="M:N2.Collections.ItemComparer.#ctor">
            <summary>Creates a new instance of the ItemComparer that sorts on the item's sort order.</summary>
        </member>
        <member name="M:N2.Collections.ItemComparer.#ctor(System.String)">
            <summary>Creates a new instance of the ItemComparer that sorts using a custom sort expression.</summary>
            <param name="sortExpression">The name of the property to sort on. DESC can be appended to the string to reverse the sort order.</param>
        </member>
        <member name="M:N2.Collections.ItemComparer.#ctor(System.String,System.Boolean)">
            <summary>Creates a new instance of the ItemComparer that sorts using sort property and direction.</summary>
            <param name="detailToCompare">The name of the property to sort on.</param>
            <param name="inverse">Wether the comparison should be "inverse", i.e. make Z less than A.</param>
        </member>
        <member name="T:N2.CancellableDestinationEventArgs">
            <summary>
            Event argument containing item and destination item.
            </summary>
        </member>
        <member name="T:N2.DestinationEventArgs">
            <summary>
            Event argument containing item and destination item.
            </summary>
        </member>
        <member name="T:N2.ItemEventArgs">
            <summary>
            Event argument containing item data.
            </summary>
        </member>
        <member name="M:N2.ItemEventArgs.#ctor(N2.ContentItem)">
            <summary>Creates a new instance of the ItemEventArgs.</summary>
            <param name="item">The item the associated with these event arguments.</param>
        </member>
        <member name="P:N2.ItemEventArgs.AffectedItem">
            <summary>Gets or sets the item associated with these arguments.</summary>
        </member>
        <member name="M:N2.DestinationEventArgs.#ctor(N2.ContentItem,N2.ContentItem)">
            <summary>Creates a new instance of the DestinationEventArgs.</summary>
            <param name="affectedItem">The item associated with these arguments.</param>
            <param name="destination">The destination for the event with these arguments.</param>
        </member>
        <member name="P:N2.DestinationEventArgs.Destination">
            <summary>Gets the destination for the event with these arguments.</summary>
        </member>
        <member name="P:N2.CancellableDestinationEventArgs.Cancel">
            <summary>Gets or sets whether the event with this argument should be cancelled.</summary>
        </member>
        <member name="P:N2.CancellableDestinationEventArgs.FinalAction">
            <summary>The action to execute unless the event is cancelled. This action can be exchanged by observers to alter the default behaviour.</summary>
        </member>
        <member name="T:N2.CancellableItemEventArgs">
            <summary>
            Event argument containing item data.
            </summary>
        </member>
        <member name="M:N2.CancellableItemEventArgs.#ctor(N2.ContentItem,System.Action{N2.ContentItem})">
            <summary>Creates a new instance of the CancellableItemEventArgs.</summary>
            <param name="item">The content item to reference with these arguements.</param>
            <param name="finalAction">The action to perform unless the Cancel is set to true.</param>
        </member>
        <member name="M:N2.CancellableItemEventArgs.#ctor(N2.ContentItem)">
            <summary>Creates a new instance of the CancellableItemEventArgs.</summary>
            <param name="item">The content item to reference with these arguements.</param>
        </member>
        <member name="P:N2.CancellableItemEventArgs.Cancel">
            <summary>Gets or sets whether the event with this argument should be cancelled.</summary>
        </member>
        <member name="P:N2.CancellableItemEventArgs.FinalAction">
            <summary>The action to execute unless the event is cancelled. This action can be exchanged by observers to alter the default behaviour.</summary>
        </member>
        <member name="M:N2.Persistence.ContentActivator.CreateInstance``1(N2.ContentItem)">
            <summary>Creates an instance of a certain type of item. It's good practice to create new items through this method so the item's dependencies can be injected by the engine.</summary>
            <returns>A new instance of an item.</returns>
        </member>
        <member name="M:N2.Persistence.ContentActivator.CreateInstance(System.Type,N2.ContentItem)">
            <summary>Creates an instance of a certain type of item. It's good practice to create new items through this method so the item's dependencies can be injected by the engine.</summary>
            <param name="itemType">Type of item to create</param>
            <param name="parentItem">Parent of the item to create.</param>
            <returns>A new instance of an item.</returns>
        </member>
        <member name="M:N2.Persistence.ContentActivator.CreateInstance(System.Type,N2.ContentItem,System.String)">
            <summary>Creates an instance of a certain type of item. It's good practice to create new items through this method so the item's dependencies can be injected by the engine.</summary>
            <param name="itemType">Type of item to create</param>
            <param name="parentItem">Parent of the item to create.</param>
            <param name="templateKey">The type of template the item is associated with.</param>
            <returns>A new instance of an item.</returns>
        </member>
        <member name="E:N2.Persistence.ContentActivator.ItemCreated">
            <summary>Notifies subscriber that an item was created through a <see cref="M:N2.Persistence.ContentActivator.CreateInstance(System.Type,N2.ContentItem)"/> method.</summary>
        </member>
        <member name="T:N2.Edit.IExternalContentRepository">
            <summary>
            Service providing content items based on an external family and key.
            </summary>
        </member>
        <member name="M:N2.Edit.IExternalContentRepository.GetOrCreate(System.String,System.String,System.String)">
            <summary>Gets an external content item or creates if it doesn't already exist.</summary>
            <param name="familyKey">The group of external items in which to look for the key.</param>
            <param name="key">The key of the content item to look for.</param>
            <param name="url">The url on which the content item is displayed.</param>
            <returns>A dynamically created content item that is used to associate information.</returns>
        </member>
        <member name="T:N2.Persistence.Finder.ICriteria`1">
            <summary>
            Classes implementing this interface provides functionality to add 
            criteras for equality.
            </summary>
        </member>
        <member name="M:N2.Persistence.Finder.ICriteria`1.Eq(`0)">
            <summary>Equal to.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.ICriteria`1.NotEq(`0)">
            <summary>Not equal to.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.ICriteria`1.IsNull(System.Boolean)">
            <summary>The parameter is or isn't null.</summary>
            <param name="isNull">True if the parameter should be null.</param>
            <returns></returns>
        </member>
        <member name="T:N2.Persistence.Finder.IUntypedCriteria">
            <summary>
            Classes implementing this interface provides options to add criteras 
            for various comparisons on item persistable properties and details.
            </summary>
        </member>
        <member name="M:N2.Persistence.Finder.IUntypedCriteria.Eq``1(``0)">
            <summary>Equal to.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IUntypedCriteria.NotEq``1(``0)">
            <summary>Not equal to.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IUntypedCriteria.Gt``1(``0)">
            <summary>Greater than.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IUntypedCriteria.Ge``1(``0)">
            <summary>Greater or equal than.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IUntypedCriteria.Lt``1(``0)">
            <summary>Less than.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IUntypedCriteria.Le``1(``0)">
            <summary>Less or equal than.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IUntypedCriteria.Between``1(``0,``0)">
            <summary>Between lowerBound and upperBound.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IUntypedCriteria.Like(System.String)">
            <summary>SQL "Like" expression</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IUntypedCriteria.NotLike(System.String)">
            <summary>SQL "Not Like" expression</summary>
        </member>
        <member name="T:N2.Persistence.Search.FindingTextSearcher">
            <summary>
            Searches for text using the finder API which results in LIKE database queries.
            </summary>
        </member>
        <member name="T:N2.Persistence.Search.ITextSearcher">
            <summary>
            Searches for text stored in the system.
            </summary>
        </member>
        <member name="M:N2.Persistence.Search.ITextSearcher.Search(N2.Persistence.Search.Query)">
            <summary>Searches for items below an ancestor that matches the given query. The results are not checked for permissions.</summary>
            <param name="query">An object containing the text to search for.</param>
            <returns>A result object containing an enumeration of items matching the search query.</returns>
        </member>
        <member name="M:N2.Persistence.Search.FindingTextSearcher.Search(N2.ContentItem,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>Searches for items below an ancestor that matches the given query.</summary>
            <param name="ancestor">The ancestor below which the results should be found.</param>
            <param name="query">The query text.</param>
            <param name="skip">A number of items to skip.</param>
            <param name="take">A number of items to take.</param>
            <returns>An enumeration of items matching the search query.</returns>
        </member>
        <member name="T:N2.Persistence.IPersister">
            <summary>
            Represents a class responsible for (database) persistence of content 
            items and details therof.
            </summary>
        </member>
        <member name="M:N2.Persistence.IPersister.Get(System.Int32)">
            <summary>Loads the content item with the supplied id or returns null if no items matches that identifier.</summary>
            <param name="id">The identifier of the item to retrieve.</param>
            <returns>The matching item or null if no item was found.</returns>
        </member>
        <member name="M:N2.Persistence.IPersister.Get``1(System.Int32)">
            <summary>Loads the content item with the supplied id or returns null if no items matches that identifier.</summary>
            <typeparam name="T">The type of item to load.</typeparam>
            <param name="id">The identifier of the item to retrieve.</param>
            <returns>The matching item or null if no item was found.</returns>
        </member>
        <member name="M:N2.Persistence.IPersister.Save(N2.ContentItem)">
            <summary>Saves an item to persistence medium.</summary>
            <param name="unsavedItem">The item to save.</param>
            <remarks>When using <see cref="T:N2.Persistence.NH.ContentPersister"/> changes on existing items are tracked and automatically persisted.</remarks>
        </member>
        <member name="M:N2.Persistence.IPersister.Delete(N2.ContentItem)">
            <summary>Deletes an item including child items, any associations towards it (<see cref="T:N2.Details.LinkDetail"/>) and previous versions.</summary>
            <param name="itemNoMore">The item to delete.</param>
        </member>
        <member name="M:N2.Persistence.IPersister.Copy(N2.ContentItem,N2.ContentItem)">
            <summary>Copies an item and it's child items to a place below the new destination.</summary>
            <param name="source">The item to copy.</param>
            <param name="destination">The item below which the copied item will be placed.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:N2.Persistence.IPersister.Copy(N2.ContentItem,N2.ContentItem,System.Boolean)">
            <summary>Copies an item and it's child items to a place below the new destination.</summary>
            <param name="source">The item to copy.</param>
            <param name="destination">The item below which the copied item will be placed.</param>
            <param name="includeChildren">Whether child items should be copied as well.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:N2.Persistence.IPersister.Move(N2.ContentItem,N2.ContentItem)">
            <summary>Moves an item and it's chlid items to a place below the new destination.</summary>
            <param name="source">The item to move.</param>
            <param name="destination">The below which the moved item will be placed.</param>
        </member>
        <member name="M:N2.Persistence.IPersister.Flush">
            <summary>Persist changes.</summary>
        </member>
        <member name="P:N2.Persistence.IPersister.Repository">
            <summary>Gets the repository implementation used by this persister. Please note that using the using the repository circumvent events exposed by the persister and is not run in a transaction. Do net expect the behaviour to be exactly the same.</summary>
        </member>
        <member name="E:N2.Persistence.IPersister.ItemSaving">
            <summary>Occurs before an item is saved</summary>
        </member>
        <member name="E:N2.Persistence.IPersister.ItemSaved">
            <summary>Occurs when an item has been saved</summary>
        </member>
        <member name="E:N2.Persistence.IPersister.ItemDeleting">
            <summary>Occurs before an item is deleted</summary>
        </member>
        <member name="E:N2.Persistence.IPersister.ItemDeleted">
            <summary>Occurs when an item has been deleted</summary>
        </member>
        <member name="E:N2.Persistence.IPersister.ItemMoving">
            <summary>Occurs before an item is moved</summary>
        </member>
        <member name="E:N2.Persistence.IPersister.ItemMoved">
            <summary>Occurs when an item has been moved</summary>
        </member>
        <member name="E:N2.Persistence.IPersister.ItemCopying">
            <summary>Occurs before an item is copied</summary>
        </member>
        <member name="E:N2.Persistence.IPersister.ItemCopied">
            <summary>Occurs when an item has been copied</summary>
        </member>
        <member name="E:N2.Persistence.IPersister.ItemLoaded">
            <summary>Occurs when an item is loaded</summary>
        </member>
        <member name="T:N2.Persistence.SearchHelper">
            <summary>
            Simplifies access to APIs related to search and querying.
            </summary>
        </member>
        <member name="M:N2.Persistence.SearchHelper.PublishedPagesBelow(N2.ContentItem)">
            <summary>Query for published content pages below a certain root using LINQ.</summary>
        </member>
        <member name="M:N2.Persistence.SearchHelper.Query``1">
            <summary>Queries a persisted entity using LINQ.</summary>
            <typeparam name="T">The type of entity to query. Only types mapped via NHibernate are queryable.</typeparam>
            <returns>A queryable expression.</returns>
        </member>
        <member name="P:N2.Persistence.SearchHelper.Items">
            <summary>Query for content items using LINQ.</summary>
            <remarks>Pending or expired pages may be included in the result.</remarks>
        </member>
        <member name="P:N2.Persistence.SearchHelper.Pages">
            <summary>Query for content pages using LINQ.</summary>
            <remarks>Pending or expired pages may be included in the result.</remarks>
        </member>
        <member name="P:N2.Persistence.SearchHelper.PublishedPages">
            <summary>Query for published content pages using LINQ.</summary>
        </member>
        <member name="P:N2.Persistence.SearchHelper.Find">
            <summary>Find items using the finder API.</summary>
            <remarks>This API is comparable to using LINQ but not as comperhensive.</remarks>
        </member>
        <member name="P:N2.Persistence.SearchHelper.Text">
            <summary>Performs text search for content items.</summary>
        </member>
        <member name="T:N2.Persistence.Search.IIndexer">
            <summary>
            Indexes content items to be searched.
            </summary>
        </member>
        <member name="M:N2.Persistence.Search.IIndexer.Clear">
            <summary>Clears the index.</summary>
        </member>
        <member name="M:N2.Persistence.Search.IIndexer.Optimize">
            <summary>Optimizes the index.</summary>
        </member>
        <member name="M:N2.Persistence.Search.IIndexer.Delete(System.Int32)">
            <summary>Delets an item from the index and any descendants.</summary>
            <param name="itemID">The id of the item to delete.</param>
        </member>
        <member name="M:N2.Persistence.Search.IIndexer.Update(N2.ContentItem)">
            <summary>Updates the index with the given item.</summary>
            <param name="item">The item containing content to be indexed.</param>
        </member>
        <member name="M:N2.Persistence.Search.IIndexer.Unlock">
            <summary>Unlocks the index.</summary>
        </member>
        <member name="T:N2.Persistence.Search.IndexableAttribute">
            <summary>
            A property that should be indexed by the search service.
            </summary>
        </member>
        <member name="T:N2.Persistence.Search.IndexableContent">
            <summary>
            Text that can be indexed.
            </summary>
        </member>
        <member name="T:N2.Persistence.Search.IndexableDefinitionExtractor">
            <summary>
            Extracts content from a <see cref="T:N2.ContentItem"/> by looking for indexable properties via the item's definition.
            </summary>
        </member>
        <member name="T:N2.Persistence.Search.ITextExtractor">
            <summary>
            Extracts text from content that can be indexed.
            </summary>
        </member>
        <member name="T:N2.Persistence.Search.SearchableTypeAttribute">
            <summary>
            Marks a class or interface as being searchable by type name. Names of interfaces marked with 
            this attribute will be stored in the index.
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.ConfigurationBuilderParticipator">
            <summary>
            Modifies the NHibernate configuration object before the session factory is built.
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.Finder.AbstractHqlProvider`1">
            <summary>
            Abstract base class for hql providers.
            </summary>
            <typeparam name="T">The type of value to compare against.</typeparam>
        </member>
        <member name="T:N2.Persistence.NH.Finder.IHqlProvider">
            <summary>
            Classes implementing this interface provide hql need to build the 
            query.
            </summary>
        </member>
        <member name="T:N2.Persistence.PropertyPersistenceLocation">
            <summary>
            Instructs the system on where to store a property.
            </summary>
        </member>
        <member name="F:N2.Persistence.PropertyPersistenceLocation.Detail">
            <summary>Auto-implemented virtual properties will be intercepted and stored as details. Other properties are ignored.</summary>
        </member>
        <member name="F:N2.Persistence.PropertyPersistenceLocation.DetailCollection">
            <summary>Auto-implemented virtual properties will be intercepted and stored as detail collection values. Other properties are ignored.</summary>
        </member>
        <member name="F:N2.Persistence.PropertyPersistenceLocation.Column">
            <summary>The property is stored in the item table. This option requires the database schema to be updated.</summary>
        </member>
        <member name="F:N2.Persistence.PropertyPersistenceLocation.Ignore">
            <summary>The property is untouched. The getter and setter implementations can choose to store as details.</summary>
        </member>
        <member name="T:N2.Persistence.Search.Hit">
            <summary>
            A single search result.
            </summary>
        </member>
        <member name="P:N2.Persistence.Search.Hit.Content">
            <summary>
            The content item found.
            </summary>
        </member>
        <member name="P:N2.Persistence.Search.Hit.Score">
            <summary>
            The search hit score between 0 and 1.
            </summary>
        </member>
        <member name="T:N2.Persistence.Search.Query">
            <summary>
            Conveys search settings to the text search feature.
            </summary>
        </member>
        <member name="M:N2.Persistence.Search.Query.For(System.String)">
            <summary>Gets a search query for the given search expression.</summary>
            <param name="textQuery">The text to search for.</param>
            <returns>A <see cref="T:N2.Persistence.Search.Query"/> object.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.For(System.Type[])">
            <summary>Gets a search query for the given search expression.</summary>
            <param name="textQuery">The text to search for.</param>
            <returns>A <see cref="T:N2.Persistence.Search.Query"/> object.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.Below(N2.ContentItem)">
            <summary>Restricts the search query to items below the given item.</summary>
            <param name="ancestor">The ancestor below which to find items.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.ReadableBy(System.String[])">
            <summary>Restricts the results to items readable by any one of the given roles.</summary>
            <param name="roles">The roles that should be allowed to read an item being returned.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.ReadableBy(System.Security.Principal.IPrincipal,System.Func{System.String,System.String[]})">
            <summary>Restricts the results to items readable to roles returned by the get roles delegate.</summary>
            <param name="user">The user whose roles to restrict search results by.</param>
            <param name="gerRolesForUser">A method that will return an array of roles given a user name.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.Range(System.Int32,System.Int32)">
            <summary>Skip and take results.</summary>
            <param name="skip">The number of results to skip.</param>
            <param name="take">The number of results to take (default 10).</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.Skip(System.Int32)">
            <summary>Skip results.</summary>
            <param name="skipHits">The number of results to skip.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.Take(System.Int32)">
            <summary>Take results.</summary>
            <param name="takeHits">The number of results to take.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.Pages(System.Boolean)">
            <summary>Restrict the search results to pages or part. When searching for pages also text on the parts yields results.</summary>
            <param name="onlySearchForPages">True only return pages, false only return parts.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.OfType(System.Type[])">
            <summary>Restrict the search results to certain types.</summary>
            <param name="types">The types the search result should belong to.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:N2.Persistence.Search.Query.op_Implicit(System.String)~N2.Persistence.Search.Query">
            <summary>Converts a string to a search query.</summary>
            <param name="searchText">The search expression.</param>
            <returns>A <see cref="T:N2.Persistence.Search.Query"/> object.</returns>
        </member>
        <member name="P:N2.Persistence.Search.Query.Ancestor">
            <summary>The ancestor below which the results should be found.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.Text">
            <summary>The query text.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.SkipHits">
            <summary>A number of hits to skip.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.TakeHits">
            <summary>A number of hits to take. Defaults to 10.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.Roles">
            <summary>Specific roles to filter the search by.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.OnlyPages">
            <summary>Only search for pages.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.Types">
            <summary>Types the matches should belong to (either one of them).</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.LanguageCode">
            <summary>Search for pages belonging to the given language code.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.Exclution">
            <summary>Query whose hits excludes hits from this query.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.Intersection">
            <summary>Query whose hits this query results must also match.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Query.Union">
            <summary>Query whose hits are added to this query results.</summary>
        </member>
        <member name="T:N2.Persistence.Search.Result">
            <summary>
            The results of a search query.
            </summary>
        </member>
        <member name="P:N2.Persistence.Search.Result.Hits">
            <summary>Search hits.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Result.Count">
            <summary>Number of items in the result set.</summary>
        </member>
        <member name="P:N2.Persistence.Search.Result.Total">
            <summary>Total number of items given the search expression.</summary>
        </member>
        <member name="T:N2.Persistence.Search.TextExtractor">
            <summary>
            Extracts text from content.
            </summary>
        </member>
        <member name="T:N2.Persistence.Serialization.IXmlWriter">
            <summary>
            Classes implementing this interface are respoinsible of writing various 
            elements of a content item to the output stream.
            </summary>
        </member>
        <member name="T:N2.Persistence.TagsRepository">
            <summary>
            Supports saving and retrieving tags from content items.
            </summary>
        </member>
        <member name="M:N2.Persistence.TagsRepository.FindTags(N2.ContentItem,System.String)">
            <summary>Finds all stored tags.</summary>
            <param name="ancestor"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Persistence.TagsRepository.FindTagSizes(N2.ContentItem,System.String)">
            <summary>Finds all stored tags.</summary>
            <param name="ancestor"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Persistence.TagsRepository.FindTagged(N2.ContentItem,System.String,System.String)">
            <summary>Finds items with a certain tag.</summary>
            <param name="ancestor"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Persistence.TagsRepository.GetTags(N2.ContentItem,System.String)">
            <summary>Gets tags on a given item.</summary>
            <param name="item"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Persistence.TagsRepository.SetTags(N2.ContentItem,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sets tags on a given item without saving it.</summary>
            <param name="item"></param>
            <param name="tagGroup"></param>
            <param name="rows"></param>
        </member>
        <member name="M:N2.Persistence.TagsRepository.SaveTags(N2.ContentItem,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Sets tags on a given item and saves it.</summary>
            <param name="item"></param>
            <param name="tagGroup"></param>
            <param name="rows"></param>
        </member>
        <member name="T:N2.Plugin.ConnectionMonitor">
            <summary>
            Using events on this class allows for executing actions when the database connection is up.
            </summary>
        </member>
        <member name="E:N2.Plugin.ConnectionMonitor.Online">
            <summary>Occurs the fist time a connection to the database is made.</summary>
        </member>
        <member name="E:N2.Plugin.ConnectionMonitor.Offline">
            <summary>Occurs when the web site is shutting down.</summary>
        </member>
        <member name="E:N2.Plugin.ConnectionMonitor.Interrupted">
            <summary>Occurs when the connection to the database is broken.</summary>
        </member>
        <member name="E:N2.Plugin.ConnectionMonitor.Resumed">
            <summary>Occurs when the connection to the database is resumed.</summary>
        </member>
        <member name="M:N2.Security.SecurableExtensions.IsAuthorized(N2.Security.ISecurityManager,N2.Security.ISecurableBase,System.Security.Principal.IPrincipal,N2.ContentItem)">
            <summary>Checks whether the user is authorized to use a editable and has sufficient permissions.</summary>
            <param name="security">The security manager to query permissions on.</param>
            <param name="permittableOrSecurable">The object containing security information.</param>
            <param name="user">The user to check permissions for.</param>
            <param name="item">The item to check permissions for.</param>
            <returns>True if the user is authorized for the given editable.</returns>
        </member>
        <member name="T:N2.Security.AuthorizedRole">
            <summary>
            This class defines roles or users authorized to access a certain item.
            </summary>
        </member>
        <member name="T:N2.Security.Authorization">
            <summary>
            In future versions this class may have additional implementations.
            </summary>
        </member>
        <member name="F:N2.Security.AuthorizedRole.Everyone">
            <summary>The role considered as everyone.</summary>
        </member>
        <member name="M:N2.Security.AuthorizedRole.#ctor">
            <summary>Creates a new (empty) instance of the AuthorizedRole class.</summary>
        </member>
        <member name="M:N2.Security.AuthorizedRole.#ctor(N2.ContentItem,System.String)">
            <summary>Creates a new instance of the AuthorizedRole class associating it with a content item and defining the role name.</summary>
            <param name="item">The item this role is associated with.</param>
            <param name="role">The role name.</param>
        </member>
        <member name="M:N2.Security.AuthorizedRole.IsAuthorized(System.Security.Principal.IPrincipal)">
            <summary>Determines wether a user is permitted according to this role.</summary>
            <param name="user">The user to check.</param>
            <returns>True if the user is permitted.</returns>
        </member>
        <member name="M:N2.Security.AuthorizedRole.ToString">
            <summary>Returns the role name associated with this class.</summary>
            <returns>The role name.</returns>
        </member>
        <member name="M:N2.Security.AuthorizedRole.Equals(System.Object)">
            <summary>Comapres this role with another.</summary>
            <returns>True if the roles are the equal.</returns>
        </member>
        <member name="M:N2.Security.AuthorizedRole.GetHashCode">
            <summary>Gets the hash code of the role name specified by this class.</summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:N2.Security.AuthorizedRole.Clone">
            <summary>Copies this AuthorizedRole clearing id and enclosing item.</summary>
            <returns>A copy of this AuthorizedRole.</returns>
        </member>
        <member name="P:N2.Security.AuthorizedRole.AnonymousUser">
            <summary>Access to an anonymous user principal.</summary>
        </member>
        <member name="P:N2.Security.AuthorizedRole.ID">
            <summary>Gets or sets the database identifier of this class.</summary>
        </member>
        <member name="P:N2.Security.AuthorizedRole.EnclosingItem">
            <summary>Gets or sets the item this AuthorizedRole referrs to.</summary>
        </member>
        <member name="P:N2.Security.AuthorizedRole.Role">
            <summary>Gets the role name this class referrs to.</summary>
        </member>
        <member name="P:N2.Security.AuthorizedRole.IsEveryone">
            <summary>Gets wether this role referrs to everyone, i.e. the unauthenticated user.</summary>
        </member>
        <member name="T:N2.Security.ISecurityManager">
            <summary>
            Classes implementing this interface are responsible of maintaining 
            security by monitoring things like page access and permissions to save.
            </summary>
        </member>
        <member name="M:N2.Security.ISecurityManager.IsEditor(System.Security.Principal.IPrincipal)">
            <summary>Checks wether a user is an editor.</summary>
            <param name="principal">The user to check.</param>
            <returns>True if the user is an editor.</returns>
        </member>
        <member name="M:N2.Security.ISecurityManager.IsAdmin(System.Security.Principal.IPrincipal)">
            <summary>Checks wether a user is an administrator.</summary>
            <param name="principal">The user to check.</param>
            <returns>True if the user is an administrator.</returns>
        </member>
        <member name="M:N2.Security.ISecurityManager.IsAuthorized(N2.ContentItem,System.Security.Principal.IPrincipal)">
            <summary>Checks wether a user is authorized to access a certain item.</summary>
            <param name="item">The item to check for access.</param>
            <param name="user">The user whose permissions to check.</param>
            <returns>True if the user is authorized.</returns>
        </member>
        <member name="M:N2.Security.ISecurityManager.IsPublished(N2.ContentItem)">
            <summary>Check whether an item is published, i.e. it's published and isn't expired.</summary>
            <param name="item">The item to check.</param>
            <returns>A boolean indicating whether the item is published.</returns>
        </member>
        <member name="M:N2.Security.ISecurityManager.IsAuthorized(System.Security.Principal.IPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Finds out wether a user has one of the given accesses.</summary>
        </member>
        <member name="M:N2.Security.ISecurityManager.IsAuthorized(System.Security.Principal.IPrincipal,N2.Security.Permission)">
            <summary>Find out if a principal has a certain permission by default.</summary>
            <param name="user">The principal to check for allowance.</param>
            <param name="permission">The type of permission to map against.</param>
            <returns>True if the system is configured to allow the user to the given permission.</returns>
        </member>
        <member name="M:N2.Security.ISecurityManager.IsAuthorized(System.Security.Principal.IPrincipal,N2.ContentItem,N2.Security.Permission)">
            <summary>Find out if a principal has a certain permission for an item.</summary>
            <param name="item">The item to check against.</param>
            <param name="user">The principal to check for allowance.</param>
            <param name="permission">The type of permission to map against.</param>
            <returns>True if the item has public access or the principal is allowed to access it.</returns>
        </member>
        <member name="M:N2.Security.ISecurityManager.CopyPermissions(N2.ContentItem,N2.ContentItem)">
            <summary>Copies permissions from the source to the destination.</summary>
            <param name="source">The item whose permissions to carry over.</param>
            <param name="destination">The item whose permissions will be modified.</param>
        </member>
        <member name="M:N2.Security.ISecurityManager.GetPermissions(System.Security.Principal.IPrincipal,N2.ContentItem)">
            <summary>Gets the permissions for a certain user towards an item.</summary>
            <param name="user">The user whose permissoins to get.</param>
            <param name="item">The item for which permissions should be retrieved.</param>
            <returns>A permission flag.</returns>
        </member>
        <member name="P:N2.Security.ISecurityManager.Enabled">
            <summary>Gets or sets wether this security manager is enabled.</summary>
        </member>
        <member name="P:N2.Security.ISecurityManager.ScopeEnabled">
            <summary>Gets or sets wether this security manager is enabled in the current scope. In a web application this is equivalent to a request.</summary>
        </member>
        <member name="T:N2.Security.PermissionDeniedException">
            <summary>
            An exeption thrown when a user tries to access an unauthorized item.
            </summary>
        </member>
        <member name="P:N2.Security.PermissionDeniedException.User">
            <summary>Gets the user which caused the exception.</summary>
        </member>
        <member name="P:N2.Security.PermissionDeniedException.Item">
            <summary>Gets the item that caused the exception.</summary>
        </member>
        <member name="T:N2.Utility">
            <summary>
            Mixed utility functions used by N2.
            </summary>
        </member>
        <member name="M:N2.Utility.Convert(System.Object,System.Type)">
            <summary>Converts a value to a destination type.</summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to convert the value to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:N2.Utility.Convert``1(System.Object)">
            <summary>Converts a value to a destination type.</summary>
            <param name="value">The value to convert.</param>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <returns>The converted value.</returns>
        </member>
        <member name="M:N2.Utility.Evaluate(System.Object,System.String)">
            <summary>Tries to find a property matching the supplied expression, returns null if no property is found with the first part of the expression.</summary>
            <param name="item">The object to query.</param>
            <param name="expression">The expression to evaluate.</param>
        </member>
        <member name="M:N2.Utility.Evaluate(System.Object,System.String,System.String)">
            <summary>Evaluates an expression and applies a format string.</summary>
            <param name="item">The object to query.</param>
            <param name="expression">The expression to evaluate.</param>
            <param name="format">The format string to apply.</param>
            <returns>The formatted result ov the evaluation.</returns>
        </member>
        <member name="M:N2.Utility.TypeFromName(System.String)">
            <summary>Gets the type from a string.</summary>
            <param name="name">The type name string.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:N2.Utility.SetProperty(System.Object,System.String,System.Object)">
            <summary>Sets a property on an object to a valuae.</summary>
            <param name="instance">The object whose property to set.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:N2.Utility.TrySetProperty(System.Object,System.String,System.Object)">
            <summary>Sets a property on an object to a valuae.</summary>
            <param name="instance">The object whose property to set.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:N2.Utility.GetProperty(System.Object,System.String)">
            <summary>Gets a value from a property.</summary>
            <param name="instance">The object whose property to get.</param>
            <param name="propertyName">The name of the property to get.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:N2.Utility.UpdateSortOrder(System.Collections.Generic.IEnumerable{N2.ContentItem})">
            <summary>Iterates items and ensures that the item's sort order is ascending.</summary>
            <param name="siblings">The items to iterate.</param>
            <returns>A list of items whose sort order was changed.</returns>
        </member>
        <member name="M:N2.Utility.MoveToIndex(System.Collections.Generic.IList{N2.ContentItem},N2.ContentItem,System.Int32)">
            <summary>Moves an item in a list to a new index.</summary>
            <param name="siblings">A list of items where the item to move is listed.</param>
            <param name="itemToMove">The item that should be moved (must be in the list)</param>
            <param name="newIndex">The new index onto which to place the item.</param>
            <remarks>To persist the new ordering one should call <see cref="M:N2.Utility.UpdateSortOrder(System.Collections.Generic.IEnumerable{N2.ContentItem})"/> and save the returned items. If the items returned from the <see cref="M:N2.ContentItem.GetChildren"/> are moved with this method the changes will not be persisted since this is a new list instance.</remarks>
        </member>
        <member name="M:N2.Utility.Insert(N2.ContentItem,N2.ContentItem,System.String)">
            <summary>Inserts an item among a parent item's children using a comparer to determine the location.</summary>
            <param name="item">The item to insert.</param>
            <param name="newParent">The parent item.</param>
            <param name="sortExpression">The sort expression to use.</param>
            <returns>The index of the item among it's siblings.</returns>
        </member>
        <member name="M:N2.Utility.Insert(N2.ContentItem,N2.ContentItem,System.Collections.Generic.IComparer{N2.ContentItem})">
            <summary>Inserts an item among a parent item's children using a comparer to determine the location.</summary>
            <param name="item">The item to insert.</param>
            <param name="newParent">The parent item.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>The index of the item among it's siblings.</returns>
        </member>
        <member name="M:N2.Utility.Insert(N2.ContentItem,N2.ContentItem,System.Int32)">
            <summary>Inserts an item among a parent item's children using a comparer to determine the location.</summary>
            <param name="item">The item to insert.</param>
            <param name="newParent">The parent item.</param>
            <param name="index">The index where to insert the item.</param>
            <returns>The index of the item among it's siblings.</returns>
        </member>
        <member name="M:N2.Utility.IsDestinationBelowSource(N2.ContentItem,N2.ContentItem)">
            <summary>Checks that the destination isn't below the source.</summary>
        </member>
        <member name="M:N2.Utility.GetGlobalResourceString(System.String,System.String)">
            <summary>Gets a global resource string.</summary>
            <param name="classKey">The name of the global resource file.</param>
            <param name="resourceKey">The key in the resource file.</param>
            <returns>The string if possible, otherwise null.</returns>
        </member>
        <member name="M:N2.Utility.GetLocalResourceString(System.String)">
            <summary>Gets a local resource string.</summary>
            <param name="resourceKey">The key in the resource file.</param>
            <returns>The string if possible, otherwise null.</returns>
        </member>
        <member name="M:N2.Utility.GetResourceString(System.String,System.String)">
            <summary>Tries to get a global or local resource string.</summary>
            <param name="classKey">The name of the global resource file.</param>
            <param name="resourceKey">The key in the resource file.</param>
            <returns>The string if possible, otherwise null.</returns>
        </member>
        <member name="M:N2.Utility.InvokeEvent(System.EventHandler{N2.CancellableItemEventArgs},N2.ContentItem,System.Object,System.Action{N2.ContentItem})">
            <summary>Invokes an event and and executes an action unless the event is cancelled.</summary>
            <param name="handler">The event handler to signal.</param>
            <param name="item">The item affected by this operation.</param>
            <param name="sender">The source of the event.</param>
            <param name="finalAction">The default action to execute if the event didn't signal cancel.</param>
        </member>
        <member name="M:N2.Utility.InvokeEvent(System.EventHandler{N2.CancellableDestinationEventArgs},System.Object,N2.ContentItem,N2.ContentItem,System.Func{N2.ContentItem,N2.ContentItem,N2.ContentItem})">
            <summary>Invokes an event and and executes an action unless the event is cancelled.</summary>
            <param name="handler">The event handler to signal.</param>
            <param name="source">The item affected by this operation.</param>
            <param name="destination">The destination of this operation.</param>
            <param name="sender">The source of the event.</param>
            <param name="finalAction">The default action to execute if the event didn't signal cancel.</param>
            <returns>The result of the action (if any).</returns>
        </member>
        <member name="M:N2.Utility.GetTrail(N2.ContentItem)">
            <summary>Gets the trail to a certain item. A trail is a slash-separated sequence of IDs, e.g. "/1/6/12/".</summary>
            <param name="item">The item whose trail to get.</param>
            <returns>The trail leading to the item.</returns>
        </member>
        <member name="M:N2.Utility.GetBaseTypes(System.Type)">
            <summary>Gets the base types of a given item.</summary>
            <param name="type">The type whose base types to get.</param>
            <returns>The base types of the type.</returns>
        </member>
        <member name="M:N2.Utility.GetBaseTypesAndSelf(System.Type)">
            <summary>Gets the base types of a given item.</summary>
            <param name="type">The type whose base types to get.</param>
            <returns>The base types of the type.</returns>
        </member>
        <member name="M:N2.Utility.GetTrustLevel">
            <summary>
            Finds the trust level of the running application (http://blogs.msdn.com/dmitryr/archive/2007/01/23/finding-out-the-current-trust-level-in-asp-net.aspx)
            </summary>
            <returns>The current trust level.</returns>
        </member>
        <member name="M:N2.Utility.ExtractFirstSentences(System.String,System.Int32)">
            <summary>Strips tags and extracts sentences uptil the given max string length.</summary>
            <param name="html">The html to strip and substring.</param>
            <param name="maxLength">The maximum length of the returned string.</param>
            <returns>A string with complete sentences uptil the supplied max length.</returns>
        </member>
        <member name="M:N2.Utility.GetContentAdapter``1(N2.Engine.IEngine,N2.ContentItem)">
            <summary>Shorthand for resolving an adapter.</summary>
            <typeparam name="T">The type of adapter to get.</typeparam>
            <param name="engine">Used to resolve the provider.</param>
            <param name="item">The item whose adapter to get.</param>
            <returns>The most relevant adapter.</returns>
        </member>
        <member name="M:N2.Utility.GetProviderInstance``1(N2.Engine.IEngine)">
            <summary>Shorthand for resolving an object via an IProvider.</summary>
            <typeparam name="T">The type of object to retrieve.</typeparam>
            <param name="engine">Used to resolve the provider.</param>
            <returns>The the provided value.</returns>
        </member>
        <member name="M:N2.Utility.Engine(System.Web.UI.Page)">
            <summary>Tries to retrieve the engine provided by an accessor on the page, or falls back to the global singleton.</summary>
            <param name="page">The accessor from which to retrieve the engine.</param>
            <returns>The content engine.</returns>
        </member>
        <member name="M:N2.Utility.Format(System.String,System.Object)">
            <summary>Formats a string using properties from the value object.</summary>
            <param name="format">A format string, e.g. Hello {Title}.</param>
            <param name="values">A value object, e.g. new { Title = "Hello" }</param>
            <returns>The format string with any format placeholders replaced by value properties.</returns>
        </member>
        <member name="P:N2.Utility.VersionsTriggersEvents">
            <summary>A global settings indicating whether persistence events should be triggered for versions of items.</summary>
        </member>
        <member name="T:N2.Utility.ResourceKey">
            <summary>
            Somewhat convoluted code to avoid a few exceptions.
            </summary>
        </member>
        <member name="T:N2.Web.Compilation.CodeExpressionBuilder">
            <summary>A quick way to set web control properties at runtime. The specified expression is evaluated at compile time.</summary>
            <example>
            &lt;asp:Label text="&lt;%$ Code: CurrentItem.Title %&gt;" runat="server" /&gt;
            </example>
        </member>
        <member name="M:N2.Web.Compilation.CodeExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>Creates code based on the given expression.</summary>
        </member>
        <member name="T:N2.Web.Compilation.CurrentPageExpressionBuilder">
            <summary>Expression builder used for initializing web controls with the current page's detils or properties with the expression syntax. This is a convenient to bind content data to controls on a template. The expression is evaluated at compile time.</summary>
            <example>
            &lt;asp:Label text="&lt;%$ CurrentPage: Title %&gt;" runat="server" /&gt;
            </example>
        </member>
        <member name="T:N2.Web.Compilation.N2ExpressionBuilder">
            <summary>The base class for N2 expression builders. Defines methods to compile time create code expressions.</summary>
        </member>
        <member name="M:N2.Web.Compilation.N2ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>Gets the code expresion evaluated at page compile time.</summary>
        </member>
        <member name="P:N2.Web.Compilation.N2ExpressionBuilder.ExpressionFormat">
            <summary>The expression format base classes can override.</summary>
        </member>
        <member name="T:N2.Web.ContentHelperBase">
            <summary>
            Provides quick acccess to often used APIs.
            </summary>
        </member>
        <member name="M:N2.Web.ContentHelperBase.At(N2.ContentItem)">
            <summary>Get a content helper for an alternative scope.</summary>
            <param name="otherContentItem">The current item of the alternative scope.</param>
            <returns>Another content helper with a different scope.</returns>
        </member>
        <member name="M:N2.Web.ContentHelperBase.BeginScope(N2.ContentItem)">
            <summary>Begins a new scope using the current content helper.</summary>
            <param name="newCurrentItem">The current item to use in the new scope.</param>
            <returns>An object that restores the scope upon disposal.</returns>
        </member>
        <member name="M:N2.Web.ContentHelperBase.BeginScope(System.String)">
            <summary>Begins a new scope using the current content helper.</summary>
            <param name="newCurrentItemUrlOrId">A string that is parsed as an item id or item url.</param>
            <returns>An object that restores the scope upon disposal.</returns>
        </member>
        <member name="M:N2.Web.ContentHelperBase.Parse(System.String)">
            <summary>Tries to parse the given string as an item id, or an item url.</summary>
            <param name="itemUrlOrId">An id, or the url to an item.</param>
            <returns>An item or, null if no match was found.</returns>
            <remarks>If the logged on user isn't authoriezd towards the item null is returned.</remarks>
        </member>
        <member name="M:N2.Web.ContentHelperBase.BeginScope(System.String,System.Boolean)">
            <summary>Begins a new scope using the current content helper.</summary>
            <param name="newCurrentItemUrlOrId">A string that is parsed as an item id or item url.</param>
            <param name="reallyBeginScope">Option to keep the current scope when the paramter is false.</param>
            <returns>An object that restores the scope upon disposal.</returns>
        </member>
        <member name="P:N2.Web.ContentHelperBase.Traverse">
            <summary>Traverse the content hieararchy.</summary>
        </member>
        <member name="P:N2.Web.ContentHelperBase.Is">
            <summary>Filter collections of items.</summary>
        </member>
        <member name="P:N2.Web.ContentHelperBase.Search">
            <summary>Search for content stored in the system.</summary>
        </member>
        <member name="P:N2.Web.ContentHelperBase.Current">
            <summary>Access items in the current context.</summary>
        </member>
        <member name="T:N2.Web.CurrentPageProvider">
            <summary>
            Provides the current page routed through an url.
            </summary>
        </member>
        <member name="T:N2.Web.Mvc.ActionResolver">
            <summary>
            Helps the N2's MVC route handler to deal with actions in url.
            </summary>
        </member>
        <member name="T:N2.Web.IPathFinder">
            <summary>
            When implemented by an attribute placed on a content item this 
            interface can resolve the path to a template.
            </summary>
        </member>
        <member name="T:N2.Web.Mvc.ContentController">
            <summary>
            Base class for content controllers that provides easy access to the content item in scope.
            </summary>
        </member>
        <member name="T:N2.Web.Mvc.ContentController`1">
            <summary>
            Base class for content controllers that provides easy access to the content item in scope.
            </summary>
            <typeparam name="T">The type of content item the controller handles.</typeparam>
        </member>
        <member name="M:N2.Web.Mvc.ContentController`1.Index">
            <summary>Defaults to the current item's TemplateUrl and pass the item itself as view data.</summary>
            <returns>A reference to the item's template.</returns>
        </member>
        <member name="M:N2.Web.Mvc.ContentController`1.ValidateAuthorization(System.Web.Mvc.ActionExecutingContext)">
            <summary>Validates that the user is allowed to read the rendered item.</summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:N2.Web.Mvc.ContentController`1.ProcessOutputCache(System.Web.Mvc.ResultExecutingContext)">
            <summary>Applies output cache as configured in the n2/host/outputCache config section.</summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:N2.Web.Mvc.ContentController`1.ViewParentPage">
            <summary>
            Returns a <see cref="T:N2.Web.Mvc.ViewPageResult"/> which calls the default action for the controller that handles the current page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:N2.Web.Mvc.ContentController`1.ViewPage(N2.ContentItem)">
            <summary>
            Returns a <see cref="T:N2.Web.Mvc.ViewPageResult"/> which calls the default action for the controller that handles the current page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:N2.Web.Mvc.ContentController`1.View(System.String)">
            <summary>
            Overrides/hides the most common method of rendering a View and calls View or PartialView depending on the type of the model
            </summary>
            <param name="viewName"></param>
            <returns></returns>
        </member>
        <member name="P:N2.Web.Mvc.ContentController`1.Engine">
            <summary>
            Used to resolve services.
            </summary>
        </member>
        <member name="P:N2.Web.Mvc.ContentController`1.CurrentItem">
            <summary>The content item associated with the requested path.</summary>
        </member>
        <member name="P:N2.Web.Mvc.ContentController`1.CurrentPage">
            <summary>The page beeing served by this request, or the page a part has been added to.</summary>
        </member>
        <member name="P:N2.Web.Mvc.ContentController`1.CurrentPart">
            <summary>The currently displayed part or null if a page is beeing executed.</summary>
        </member>
        <member name="P:N2.Web.Mvc.ContentController`1.Content">
            <summary>Access to commonly used APIs.</summary>
        </member>
        <member name="T:N2.Web.Mvc.ControllerContentHelper">
            <summary>
            Provides quick acccess to often used APIs.
            </summary>
        </member>
        <member name="M:N2.Web.Mvc.Html.HtmlExtensions.Tree(System.Web.Mvc.HtmlHelper,N2.ContentItem,N2.ContentItem,System.Int32,System.Boolean,System.Boolean,N2.Collections.ItemFilter,System.Object)">
            <summary>Creates a navigation using unordered list elements.</summary>
        </member>
        <member name="M:N2.Web.Mvc.Html.HtmlExtensions.UniqueID(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>Generates an id that is unique within a content item.</summary>
            <param name="html"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Web.Mvc.Html.HtmlExtensions.BeginEditableWrapper(System.Web.Mvc.HtmlHelper,N2.ContentItem,System.String)">
            <summary>Begins an editable wrapper that can be used to edit a single property in a view.</summary>
            <param name="html"></param>
            <param name="item"></param>
            <param name="displayableName"></param>
            <returns>A disposable object that must be called to close the editable wrapper element.</returns>
        </member>
        <member name="T:N2.Web.Mvc.RouteCollectionExtensions">
            <summary>
            Route registratoin extensions.
            </summary>
        </member>
        <member name="M:N2.Web.Mvc.RouteCollectionExtensions.MapContentRoute(System.Web.Routing.RouteCollection,System.String,N2.Engine.IEngine)">
            <summary>Maps a content route to the route collection.</summary>
            <param name="routes">The route collection to extend.</param>
            <param name="name">The name of this route.</param>
            <param name="engine">The N2 Engine instance used by the content route.</param>
            <returns>The added content route instance.</returns>
        </member>
        <member name="M:N2.Web.Mvc.RouteCollectionExtensions.MapContentRoute``1(System.Web.Routing.RouteCollection,System.String,N2.Engine.IEngine)">
            <summary>Maps a content route to the route collection.</summary>
            <param name="routes">The route collection to extend.</param>
            <param name="name">The name of this route.</param>
            <param name="engine">The N2 Engine instance used by the content route.</param>
            <typeparam name="T">The type of content items to route.</typeparam>
            <returns>The added content route instance.</returns>
        </member>
        <member name="T:N2.Web.Mvc.ViewContentHelper">
            <summary>
            Provides quick acccess to often used APIs.
            </summary>
        </member>
        <member name="T:N2.Web.Mvc.ContentOutputCacheAttribute">
            <summary>
            Enables output cache as configured in the n2/host/outputCache configuration 
            esction with cache dependency. This functionality is enabled by default when
            inheriting from <see cref="T:N2.Web.Mvc.ContentController"/>.
            </summary>
        </member>
        <member name="T:N2.Web.Mvc.ContentRoute">
            <summary>
            An ASP.NET MVC route that gets route data for content item paths.
            </summary>
        </member>
        <member name="F:N2.Web.Mvc.ContentRoute.ContentEngineKey">
            <summary>Used to reference the N2 content engine.</summary>
        </member>
        <member name="F:N2.Web.Mvc.ContentRoute.ControllerKey">
            <summary>Convenience reference to the MVC controller.</summary>
        </member>
        <member name="F:N2.Web.Mvc.ContentRoute.AreaKey">
            <summary>Convenience reference to the MVC area.</summary>
        </member>
        <member name="F:N2.Web.Mvc.ContentRoute.ActionKey">
            <summary>Convenience reference to the MVC action.</summary>
        </member>
        <member name="M:N2.Web.Mvc.ContentRoute.GetRouteValues(N2.ContentItem,System.Web.Routing.RouteValueDictionary)">
            <summary>Gets route data for for items this route handles.</summary>
            <param name="item">The item whose route to get.</param>
            <param name="routeValues">The route values to apply to the route data.</param>
            <returns>A route data object or null.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:N2.Web.Mvc.ContentRoute.CheckForContentController(System.Web.HttpContextBase)" -->
        <member name="P:N2.Web.Mvc.ContentRoute.ContentItemKey">
            <summary>Used to reference the currently executing content item in the route value dictionary.</summary>
        </member>
        <member name="P:N2.Web.Mvc.ContentRoute.ContentPageKey">
            <summary>Used to reference the content page in the route value dictionary.</summary>
        </member>
        <member name="P:N2.Web.Mvc.ContentRoute.ContentPartKey">
            <summary>Used to reference the content part in the route value dictionary.</summary>
        </member>
        <member name="T:N2.Web.Mvc.ContentRoute`1">
            <summary>
            An ASP.NET MVC route that gets route data for content items of the specified generic type.
            </summary>
            <typeparam name="T">The type of content item to route.</typeparam>
        </member>
        <member name="M:N2.Web.Mvc.DisplayRenderer`1.Editable(System.Boolean)">
            <summary>Control whether this property can be edited via the the UI when navigating using the drag-drop mode.</summary>
            <param name="isEditable"></param>
            <returns>The same object.</returns>
        </member>
        <member name="M:N2.Web.Mvc.DisplayRenderer`1.SwallowExceptions(System.Boolean)">
            <summary>Control whether this property can be edited via the the UI when navigating using the drag-drop mode.</summary>
            <param name="isEditable"></param>
            <returns>The same object.</returns>
        </member>
        <member name="M:N2.Web.Mvc.DisplayRenderer`1.Optional(System.Boolean)">
            <summary>Control whether the displayable will throw exceptions when no displayable with a matching name is found.</summary>
            <param name="isOptional">Optional is true by default.</param>
            <returns>The same object.</returns>
        </member>
        <member name="T:N2.Web.Mvc.ExternalContentAttribute">
             <summary>
             Automatically associates a controller external to N2 and not routed through a content 
             controller with an item on which details can be written and parts associated.
             </summary>
             <example>
            		// route registration
            		context.MapRoute("hello",
            			"Tests/{controller}/{action}/{id}",
            			new { action = "Index", id = UrlParameter.Optional },
            			new { area = new NonContentConstraint() }
            		);
            
            		// controller
            		[ExternalContent("id")]
            		public class StaticController : Controller
            		{
            			// This action and the view will have an external item associated to the "id" route value
            			public ActionResult Index(string id)
            			{
            			}
            		}
             </example>
        </member>
        <member name="M:N2.Web.Mvc.ExternalContentAttribute.#ctor">
            <summary>Creates external content defining the controller name as key for the external item.</summary>
            <param name="keyParameter"></param>
        </member>
        <member name="M:N2.Web.Mvc.ExternalContentAttribute.#ctor(System.String)">
            <summary>Creates external content defining which route parameter should be used to determine they key for the external item.</summary>
            <param name="keyParameter"></param>
        </member>
        <member name="M:N2.Web.Mvc.ExternalContentAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>Applies the external content item to the route data.</summary>
            <param name="filterContext">The context which is modified.</param>
        </member>
        <member name="P:N2.Web.Mvc.ExternalContentAttribute.Family">
            <summary>Optional external content family to use, the controller name is used by default.</summary>
        </member>
        <member name="M:N2.Web.Mvc.ViewEnginesExtensions.RegisterThemeViewEngine``1(System.Web.Mvc.ViewEngineCollection,System.String,System.String[],System.String[])">
            <summary>Register the <see cref="!:ThemeViewEngine"/> which redirects view renderings to a themed counterpart if available.</summary>
            <typeparam name="T">The type of view engine to use as base.</typeparam>
            <param name="viewEngines">Placeholder.</param>
            <returns>The theme view engine that was inserted.</returns>
        </member>
        <member name="M:N2.Web.Mvc.ViewEnginesExtensions.RegisterThemeViewEngine``1(System.Web.Mvc.ViewEngineCollection,System.String)">
            <summary>Register the <see cref="!:ThemeViewEngine"/> which redirects view renderings to a themed counterpart if available.</summary>
            <typeparam name="T">The type of view engine to use as base.</typeparam>
            <param name="viewEngines">Placeholder.</param>
            <returns>The theme view engine that was inserted.</returns>
        </member>
        <member name="M:N2.Web.Mvc.ViewEnginesExtensions.DecorateViewTemplateRegistration(System.Web.Mvc.ViewEngineCollection)">
            <summary>Wraps all currently registered view engines enabling the template first developerment paradigm.</summary>
            <param name="viewEngines">Placeholder.</param>
            <remarks>To enable template first you must also explictly add controllers using the <see cref="T:N2.Definitions.Runtime.ViewTemplateRegistrator"/>.</remarks>
        </member>
        <member name="T:N2.Web.Mvc.ThemeViewEngine`1">
            <summary>
            A view engine that tries to retrieve resources from a theme folder before fallback to the default location.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:N2.Web.Mvc.ThemeViewEngine`1.#ctor(System.String,System.String[],System.String[])">
            <summary>
            File extensions are only assigned when using ASP.NET MVC 3.0 or greater.
            </summary>
            <param name="fileExtensions"></param>
        </member>
        <member name="T:N2.Collections.TraverseHelper">
            <summary>
            Simplifies traversing items in the content hierarchy.
            </summary>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Translations">
            <summary>Translations of the current item.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Translations(N2.ContentItem)">
            <summary>Translations of the current item.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Ancestors(N2.ContentItem,N2.Collections.ItemFilter)">
            <summary>Ancestors of a given item.</summary>
            <param name="item"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.AncestorsBetween(System.Int32,System.Int32)">
            <summary>Ancestors between a start level and a descendant level.</summary>
            <param name="startLevel"></param>
            <param name="stopLevel"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Children">
            <summary>Children of the current item.</summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Children(N2.Collections.ItemFilter)">
            <summary>Children of the current item.</summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Children(N2.ContentItem,N2.Collections.ItemFilter)">
            <summary>Children of a given item.</summary>
            <param name="parent"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.ChildPages">
            <summary>Pages below the current item.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.ChildPages(N2.ContentItem)">
            <summary>Pages below a given item.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.NavigatableChildPages">
            <summary>Pages below the current item suitable for display in a navigation (visible, published, accessible).</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.NavigatableChildPages(N2.ContentItem)">
            <summary>Pages below the given item suitable for display in a navigation (visible, published, accessible).</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.ChildParts">
            <summary>Parts below the current item.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.ChildParts(System.String)">
            <summary>Parts in a given zone below the current item.</summary>
            <param name="zoneName"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.ChildParts(N2.ContentItem,System.String)">
            <summary>Parts in a given zone below the current item.</summary>
            <param name="zoneName"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Descendants">
            <summary>Descendants of the current item.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Descendants(N2.ContentItem,N2.Collections.ItemFilter)">
            <summary>Descendants of a given item.</summary>
            <param name="ancestor"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.DescendantPages(N2.ContentItem,N2.Collections.ItemFilter)">
            <summary>Descendant pages of a given item.</summary>
            <param name="ancestor"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Siblings">
            <summary>Siblings of the current item.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Siblings(N2.ContentItem)">
            <summary>Siblings of a given item.</summary>
            <param name="item"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Siblings(N2.Collections.ItemFilter)">
            <summary>Siblings of the current item.</summary>
            <param name="item"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Siblings(N2.ContentItem,N2.Collections.ItemFilter)">
            <summary>Siblings of a given item.</summary>
            <param name="item"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.PreviousSibling(N2.ContentItem)">
            <summary>The previous sibling among a given item's parent's children.</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.NextSibling(N2.ContentItem)">
            <summary>The next sibling among a given item's parent's children.</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.LevelOf(N2.ContentItem)">
            <summary>The level index of a given item.</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.AncestorAtLevel(System.Int32)">
            <summary>The item at a given level from the start page.</summary>
            <param name="levelIndex"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Parent">
            <summary>The parent of the current item (page or part).</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Parent(N2.ContentItem)">
            <summary>The parent of a given item.</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.PageParent">
            <summary>The parent of the current page.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.ClosestOf``1(N2.ContentItem)">
            <summary>Gets the item at of the specified type.</summary>
            <returns>An ancestor at the specified level.</returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.Closest``1(N2.ContentItem)">
            <summary>Gets the item at of the specified type.</summary>
            <returns>An ancestor at the specified level.</returns>
        </member>
        <member name="M:N2.Collections.TraverseHelper.ClosestStartPage(N2.ContentItem)">
            <summary>Gets the closest start page ancestor of the given item.</summary>
            <param name="item">The item whose start page to get.</param>
            <returns>The closest start page node.</returns>
        </member>
        <member name="P:N2.Collections.TraverseHelper.DefaultFilter">
            <summary>The default filter to apply to all results from this object.</summary>
        </member>
        <member name="T:N2.Web.UI.IRecursiveContainerInterface">
            <summary>
            Marker interface for pages that displays <see cref="T:N2.Web.UI.RecursiveContainerAttribute"/>.
            </summary>
        </member>
        <member name="T:N2.Web.UI.RecursiveContainerAttribute">
            <summary>
            Places contained controls in the site editor interface instead of the regular editor 
            interface. Any recursive containers in the selected page and it's ancestors are displayed.
            </summary>
            <remarks>These editors are accessed via the site toolbar button.</remarks>
        </member>
        <member name="T:N2.Definitions.EditorContainerAttribute">
            <summary>Attribute classes assignable from the EditorContainerAttribute are responsible for defining and creating container controls on which editors can be added.</summary>
        </member>
        <member name="T:N2.Definitions.IEditableContainer">
            <summary>
            Attributes implementing this interface can serve as containers for 
            editors in edit mode.
            </summary>
        </member>
        <member name="M:N2.Definitions.EditorContainerAttribute.#ctor(System.String,System.Int32)">
            <summary>Creates a new instance of the editor container attribute.</summary>
            <param name="name">The name of this editor container.</param>
            <param name="sortOrder">The order of this container compared to other containers and editors. Editors within the container are sorted according to their sort order.</param>
        </member>
        <member name="M:N2.Definitions.EditorContainerAttribute.GetLocalizedText(System.String)">
            <summary>Gets a localized resource string from the global resource with the name denoted by <see cref="P:N2.Definitions.EditorContainerAttribute.LocalizationClassKey"/>. The resource key follows the pattern <see cref="P:N2.Definitions.EditorContainerAttribute.Name"/>.key where the name is the name of the detail and the key is the supplied parameter.</summary>
            <param name="key">A part of the resource key used for finding the localized resource.</param>
            <returns>A localized string if found, or null.</returns>
        </member>
        <member name="M:N2.Definitions.EditorContainerAttribute.AddTo(System.Web.UI.Control)">
            <summary>Adds the container to a parent container and returns it.</summary>
            <param name="container">The parent container onto which to add the container defined by this interface.</param>
            <returns>The newly added container.</returns>
        </member>
        <member name="P:N2.Definitions.EditorContainerAttribute.Name">
            <summary>The name of this editor container. This is used to associate editable attributes to an editor container.</summary>
        </member>
        <member name="P:N2.Definitions.EditorContainerAttribute.ContainedEditors">
            <summary>Gets editors or sub-containers contained by this container.</summary>
        </member>
        <member name="P:N2.Definitions.EditorContainerAttribute.SortOrder">
            <summary>The order of this container compared to other containers and editors. Editors within the container are sorted according to their sort order.</summary>
        </member>
        <member name="P:N2.Definitions.EditorContainerAttribute.ContainerName">
            <summary>Gets or sets the name of a container containing this container.</summary>
        </member>
        <member name="P:N2.Definitions.EditorContainerAttribute.AuthorizedUsers">
            <summary>Gets or sets users allowed to access this container.</summary>
        </member>
        <member name="P:N2.Definitions.EditorContainerAttribute.AuthorizedRoles">
            <summary>Gets or sets roles allowed to access this container.</summary>
        </member>
        <member name="M:N2.Web.WebExtensions.ToUrl(System.String)">
            <summary>Converts a string to an <see cref="T:N2.Web.Url"/></summary>
            <param name="url">The url string.</param>
            <returns>The string parsed into an Url.</returns>
        </member>
        <member name="M:N2.Web.Mvc.Html.ControlPanelExtensions.GetControlPanelState(System.Web.Mvc.HtmlHelper)">
            <summary>Gets the curent state of the control panel.</summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Web.Mvc.Html.ControlPanelExtensions.RenderControlPanel(System.Web.Mvc.HtmlHelper)">
            <summary>Renders the openable control panel displayed in the upper left corner on N2 sites.</summary>
            <param name="html"></param>
        </member>
        <member name="T:N2.Details.EditableDropDownAttribute">
            <summary>
            An abstract base class that implements editable drop down functionality.
            Override and implement GetListItems to use.
            </summary>
        </member>
        <member name="T:N2.Web.Mvc.Html.ResourcesExtensions">
            <summary>
            Renders resources on a view.
            </summary>
        </member>
        <member name="M:N2.Web.Mvc.RouteExtensions.ApplyExternalContent(System.Web.Routing.RouteData,System.String,System.String,System.String)">
            <summary>Applies existing or creates external content on the route data.</summary>
            <param name="data">The data that will receive external content.</param>
            <param name="family">The group to associate external content to.</param>
            <param name="key">The key of this particular external content.</param>
            <param name="url">The url on which this external content item is displayed.</param>
            <returns>The external content item itself.</returns>
        </member>
        <member name="M:N2.Web.Mvc.RouteExtensions.ApplyCurrentItem(System.Web.Routing.RouteData,N2.ContentItem,N2.ContentItem)">
            <summary>Applies the current content item to the route data.</summary>
        </member>
        <member name="M:N2.Web.Mvc.RouteExtensions.ApplyCurrentItem(System.Web.Routing.RouteData,System.String,System.String,N2.ContentItem,N2.ContentItem)">
            <summary>Applies the current content item and controller to the route data.</summary>
        </member>
        <member name="M:N2.Web.Mvc.Traversal.ClosestPage(N2.ContentItem)">
            <summary>Retrieves the closest ancestor that is a page.</summary>
            <param name="item">The item whose closest page to get.</param>
            <returns>The closest page, either the item itself or the closest ancestor that is a page.</returns>
        </member>
        <member name="T:N2.Web.Mvc.ViewPageResult">
            <summary>
            A custom <see cref="T:System.Web.Mvc.ActionResult"/> that invokes the MVC pipeline again for the given page.
            </summary>
        </member>
        <member name="M:N2.Web.Mvc.ViewPageResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from <see cref="T:System.Web.Mvc.ActionResult"/>.
            </summary>
            <param name="context"/>
        </member>
        <member name="T:N2.Web.RssWriter">
            <summary>
            Writes an RSS feed to an output stream.
            </summary>
        </member>
        <member name="T:N2.Web.UI.ContentPageConcern">
            <summary>Base class for UI concerns. Implementors are given a template instance bore it's executed by ASP.NET.</summary>
        </member>
        <member name="M:N2.Web.UI.ContentPageConcern.OnPreInit(System.Web.UI.Page,N2.ContentItem)">
            <summary>Applies the concern to the given template.</summary>
            <param name="page">The template to apply the concern to.</param>
            <param name="item">The current item.</param>
        </member>
        <member name="T:N2.Web.UI.ItemDataSourceView">
            <summary>An abstract base class for item data source views.</summary>
        </member>
        <member name="T:N2.Web.UI.QueryDataSourceView">
            <summary>A DataSourceView that can perform queries against the N2 persistence manager.</summary>
        </member>
        <member name="T:N2.Web.UI.ChildrenDataSourceView">
            <summary>A data source view that provides the child items of a parent item.</summary>
        </member>
        <member name="T:N2.Web.UI.ControlEventArgs">
            <summary>
            Provides data about a control. These event arguments can be used to 
            expose child controls while they are added.
            </summary>
        </member>
        <member name="M:N2.Web.UI.ControlEventArgs.#ctor(System.Web.UI.Control)">
            <summary>Creates a new instance of the ControlEventArgs.</summary>
            <param name="control">The control to reference with these arguments.</param>
        </member>
        <member name="P:N2.Web.UI.ControlEventArgs.Control">
            <summary>The control associated with these arguments.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.CurrentItemParameter">
            <summary>A parameter used to retrieve content data for data sources.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.FileSelector">
            <summary>An input box that can be updated with the url to a file through a popup window.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.UrlSelector">
            <summary>An input box that can be updated with the url from the file selector popup in edit mode.</summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.UrlSelector.OnInit(System.EventArgs)">
            <summary>Initializes the UrlSelector control.</summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.UrlSelector.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>Renders and tag and the open popup window button.</summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.UrlSelector.RenderButton(System.Web.UI.HtmlTextWriter)">
            <summary>Renders the open popup button.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.UrlSelector.SelectableTypes">
            <summary>Content item types that may be selected using this selector.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.UrlSelector.SelectableExtensions">
            <summary>File extensions that may be selected using this selector.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.UrlSelector.ButtonText">
            <summary>Text on the button used to open the popup.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.UrlSelector.BrowserUrl">
            <summary>Url to the page responsible for selecting managementUrls.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.UrlSelector.Url">
            <summary>The selected url.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.UrlSelector.PopupOptions">
            <summary>Size and features of the popup window.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.UrlSelector.OpenPopupFormat">
            <summary>Format for the javascript invoked when the open popup button is clicked.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.Display">
            <summary>
            Control used to display content on a web forms page. The control will 
            look for an attribute implementing IDisplayable on the property 
            referenced by the PropertyName on the display control.
            </summary>
            <example>
            <!-- Displays the page title using the default displayable. -->
            &lt;n2:Display PropertyName="Title" runat="server" /&gt;
            </example>
        </member>
        <member name="T:N2.Web.UI.IItemContainer">
            <summary>Defines an interface that controls can use when traversing the control hierarchy to find the current most relevant item.</summary>
        </member>
        <member name="P:N2.Web.UI.IItemContainer.CurrentItem">
            <summary>Gets the item associated with the item container.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.Displayable">
            <summary>Gets the displayable attribute</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.Displayer">
            <summary>Gets the control responsible of displaying the detail.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.Path">
            <summary>Use the displayer and the values from this path.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.PropertyName">
            <summary>The name of the property on the content item whose value is displayed with the Display control.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.Format">
            <summary>A format to use for the html output of this displayable. E.g. &lt;span class='something'&gt;{0}&lt;/span&gt;.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.Optional">
            <summary>Prevent this control from throwing exceptions when no displayable with the given name on the page.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.Editable">
            <summary>Controls whether this property can be edited via the the UI when navigating using the drag-drop mode.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.SwallowExceptions">
            <summary>Prevent this control from throwing exceptions when any irregularities occurs, e.g. there is no property with the given name on the page.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.HeaderTemplate">
            <summary>Inserted before the display control if a control was added.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Display.FooterTemplate">
            <summary>Added after the display control if a control was added.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.ItemDataSource">
            <summary>Provides content items to data bound control. It also serves as a hierarchical data source.</summary>
            <remarks>This data source has two distinct views. The children view that lists children of a page and the query view that allows database-like queries.</remarks>
            <example>
            <![CDATA[
            List child items of the current item:
            <n2:ItemDataSource id="itemSource1" runat="server" />
            <asp:Repeater DataSourceID="itemSource1" runat="server">
            	<ItemTemplate><p><%# Eval("Title") %></p></ItemTemplate>
            </asp:Repeater>
            
            List items on the same level as the current item:
            <n2:ItemDataSource id="itemSource2" runat="server" Path=".." />
            <asp:Repeater DataSourceID="itemSource2" runat="server">
            	<ItemTemplate><p><%# Eval("Title") %></p></ItemTemplate>
            </asp:Repeater>
            
            List items below a child item with the name test (if it exists):
            <n2:ItemDataSource id="itemSource3" runat="server" Path="test" ThrowOnInvalidPath="false"/>
            <asp:Repeater DataSourceID="itemSource3" runat="server">
            	<ItemTemplate><p><%# Eval("Title") %></p></ItemTemplate>
            </asp:Repeater>
            
            List items with a query:
            <n2:ItemDataSource id="itemSource4" runat="server" Query="FROM ContentItem WHERE VersionOfID IS NULL AND Title like ?" QueryParameters='<%$ Code: new object[] {"test%"} %>'/>
            <asp:Repeater DataSourceID="itemSource4" DataMember="Query" runat="server">
            	<ItemTemplate><p><%# Eval("Title") %></p></ItemTemplate>
            </asp:Repeater>
            ]]>
            </example>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemDataSource.Path">
            <summary>A relative path to the item whose children should be listed by this datasource.</summary>
            <example>
            ItemDataSource1.Path = ".."; // Display other items on the same level.
            ItemDataSource1.Path = "lorem"; // Display children of the item with the name 'lorem' below the current item.
            ItemDataSource1.Path = "/ipsum"; // Display children of the item with the name 'ipsum' directly below the start page.
            ItemDataSource1.Path = "//dolor"; // Display children of the item with the name 'dolor' directly below the root item (this is the same as the start page unless multiple hosts are configured).
            ItemDataSource1.Path = "~/"; // Display children of the start page.
            </example>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemDataSource.ThrowOnInvalidPath">
            <summary>Gets or sets whether an exception should be thrown if the given path is invalid or does not match any item.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.ItemSelector">
            <summary>
            An input box that can be updated with a page selected through a popup 
            window.
            </summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.ItemSelector.Validate">
            <summary>Validates the selected item.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemSelector.SelectedItem">
            <summary>Gets the selected item or null if none is selected.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemSelector.SelectedItemID">
            <summary>Gets the ID of the selected item or 0 if no item is selected.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemSelector.RequiredType">
            <summary>The type the select item should conform to.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemSelector.ErrorMessage">
            <summary>The message to display.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemSelector.IsValid">
            <summary>True if the item is valid.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.UrlSelectorMode">
            <summary>
            Defines what kinds of managementUrls can be selected.
            </summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.UrlSelectorMode.Files">
            <summary>Only files.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.UrlSelectorMode.Items">
            <summary>Only content items.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.UrlSelectorMode.All">
            <summary>Both files and content items.</summary>
        </member>
        <member name="T:N2.Web.PublicSiteMapNode">
            <summary>
            A site map node of a N2 site map.
            </summary>
        </member>
        <member name="M:N2.Web.PublicSiteMapNode.#ctor(System.Web.SiteMapProvider,N2.ContentItem)">
            <summary>Creates a new instance of the PublicSiteMapNode.</summary>
            <param name="provider">The site map provider creating this node.</param>
            <param name="item">The content item referenced by this node.</param>
        </member>
        <member name="P:N2.Web.PublicSiteMapNode.ContentItem">
            <summary>Gets the content item referenced by this node.</summary>
        </member>
        <member name="T:N2.Web.UI.EditorModifierAttribute">
            <summary>Attribute used to modify a detail's editor.</summary>
        </member>
        <member name="M:N2.Web.UI.EditorModifierAttribute.Modify(System.Web.UI.Control)">
            <summary>Applies the modifications specified by this attribute. Updates the property specified by <see cref="P:N2.Web.UI.EditorModifierAttribute.EditorPropertyName"/> with the value specified by <see cref="P:N2.Web.UI.EditorModifierAttribute.Value"/>.</summary>
            <param name="editor">The editor control to modify.</param>
        </member>
        <member name="P:N2.Web.UI.EditorModifierAttribute.Name">
            <summary>Gets or sets the name of the detail whose editor should have this modifier applied. When the attribute is specified on a property in the content item class that property is used.</summary>
        </member>
        <member name="P:N2.Web.UI.EditorModifierAttribute.EditorPropertyName">
            <summary>Gets or sets the name of the property on the editor to set.</summary>
        </member>
        <member name="P:N2.Web.UI.EditorModifierAttribute.Value">
            <summary>Gets or sets the value to apply to property with the name <see cref="P:N2.Web.UI.EditorModifierAttribute.EditorPropertyName"/> on the editor.</summary>
        </member>
        <member name="T:N2.Integrity.IntegrityManager">
            <summary>
            A class that encapsulates integrity checks performed when content 
            items are manipulated through <see cref="T:N2.Context"/>. This class' 
            responsibilities include maintaining system integrity integrity by 
            not allowing recusive parent-child relationships, siblings with the 
            same name and un-allowed parent-child combinations.
            </summary>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.#ctor(N2.Definitions.IDefinitionManager,N2.Persistence.Finder.IItemFinder,N2.Web.IUrlParser)">
            <summary>Creates a new instance of the <see cref="T:N2.Integrity.IntegrityManager"/>.</summary>
            <param name="definitions">The definition manager.</param>
            <param name="urlParser"></param>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.CanMove(N2.ContentItem,N2.ContentItem)">
            <summary>Check if an item can be moved to a destination.</summary>
            <param name="source">The item to move.</param>
            <param name="destination">The destination below which the item should be moved to.</param>
            <returns>True if the item can be moved.</returns>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.CanCopy(N2.ContentItem,N2.ContentItem)">
            <summary>Check if an item can be copied to a destination.</summary>
            <param name="source">The item to copy.</param>
            <param name="destination">The destination below which the item should be copied to.</param>
            <returns>True if the item can be copied.</returns>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.CanDelete(N2.ContentItem)">
            <summary>Check the current state of an item to see if it ca be deleted.</summary>
            <param name="item">The item that should be deleted.</param>
            <returns>True if the item can be deleted.</returns>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.CanSave(N2.ContentItem)">
            <summary>Check the current state of an item to see if it ca be saved.</summary>
            <param name="item">The item that should be saved.</param>
            <returns>True if the item can be saved.</returns>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.GetMoveException(N2.ContentItem,N2.ContentItem)">
            <summary>Checks if an item can be moved to a destination.</summary>
            <param name="source">The item that is to be moved.</param>
            <param name="destination">The destination onto which the item is to be moved.</param>
            <returns>Null if the item can be moved or an exception if the item can't be moved.</returns>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.GetCopyException(N2.ContentItem,N2.ContentItem)">
            <summary>Check if an item can be copied.</summary>
            <exception cref="T:N2.Integrity.NameOccupiedException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.GetDeleteException(N2.ContentItem)">
            <summary>Check if an item can be deleted.</summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.GetSaveException(N2.ContentItem)">
            <summary>Check if an item can be saved.</summary>
            <exception cref="T:N2.Integrity.NameOccupiedException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.GetCreateException(N2.ContentItem,N2.ContentItem)">
            <summary>Check if an item can be created.</summary>
            <param name="item"></param>
            <param name="parent"></param>
            <returns>The exception that would be thrown if the item was created.</returns>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.IsNameOccupiedOnDestination(N2.ContentItem,N2.ContentItem)">
            <summary>Checks that destination have no child item with the same name.</summary>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.IsDestinationBelowSource(N2.ContentItem,N2.ContentItem)">
            <summary>Checks that the destination isn't below the source.</summary>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.IsLocallyUnique(System.String,N2.ContentItem)">
            <summary>Find out if an item name is occupied.</summary>
            <param name="name">The name to check.</param>
            <param name="item">The item whose siblings (other items with the same parent) might be have a clashing name.</param>
            <returns>True if the name is unique.</returns>
        </member>
        <member name="M:N2.Integrity.IntegrityManager.IsTypeAllowedBelowDestination(N2.ContentItem,N2.ContentItem)">
            <summary>Check that the source item type is allowed below the destination. Throws an exception if the item isn't allowed.</summary>
            <param name="source">The child item</param>
            <param name="destination">The parent item</param>
        </member>
        <member name="T:N2.Context">
            <summary>
            Provides access to the singleton instance of the N2 CMS engine.
            </summary>
        </member>
        <member name="M:N2.Context.Initialize(System.Boolean)">
            <summary>Initializes a static instance of the N2 factory.</summary>
            <param name="forceRecreate">Creates a new factory instance even though the factory has been previously initialized.</param>
        </member>
        <member name="M:N2.Context.Replace(N2.Engine.IEngine)">
            <summary>Sets the static engine instance to the supplied engine. Use this method to supply your own engine implementation.</summary>
            <param name="engine">The engine to use.</param>
            <remarks>Only use this method if you know what you're doing.</remarks>
        </member>
        <member name="M:N2.Context.CreateEngineInstance">
            <summary>Creates a factory instance and adds a http application injecting facility.</summary>
            <returns>A new factory.</returns>
        </member>
        <member name="P:N2.Context.Current">
            <summary>Gets the singleton N2 engine used to access N2 services.</summary>
        </member>
        <member name="P:N2.Context.Persister">
            <summary>Gets N2 persistence manager used for database persistence of content.</summary>
        </member>
        <member name="P:N2.Context.Definitions">
            <summary>Gets N2 definition manager</summary>
        </member>
        <member name="P:N2.Context.IntegrityManager">
            <summary>Gets N2 integrity manager </summary>
        </member>
        <member name="P:N2.Context.SecurityManager">
            <summary>Gets N2 security manager responsible of item access checks.</summary>
        </member>
        <member name="P:N2.Context.UrlParser">
            <summary>Gets the url parser responsible of mapping managementUrls to items and back again.</summary>
        </member>
        <member name="P:N2.Context.CurrentPage">
            <summary>Gets the current page. This is retrieved by the page querystring.</summary>
        </member>
        <member name="T:N2.DefinitionAttribute">
            <summary>
            Decoration for N2 content items. Provides information needed in edit 
            mode and for data integrity.
            </summary>
            <remarks>This attribute may be deprecated in the future. Use <see cref="T:N2.PageDefinitionAttribute"/> or <see cref="T:N2.PartDefinitionAttribute"/> instead.</remarks>
        </member>
        <member name="T:N2.Definitions.AbstractDefinition">
            <summary>
            Generalizes features shared by <see cref="T:N2.PartDefinitionAttribute"/> and <see cref="T:N2.PageDefinitionAttribute"/>.
            </summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.Title">
            <summary>The title used to present the item type when adding it.</summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.TemplateUrl">
            <summary>Path to the ASPX template used to present this page to visitors. Similar behaviour can be accomplished using <see cref="T:N2.Web.TemplateAttribute"/> or <see cref="T:N2.Web.ConventionTemplateAttribute"/></summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.SortOrder">
            <summary>The order of this definition when creating items.</summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.Name">
            <summary>The name/discriminator used when storing and loading the item to the database. By default the name/discriminator is the class name.</summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.ToolTip">
            <summary>Gets or sets the tooltip used when presenting this item type to editors.</summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.Description">
            <summary>Gets or sets the description of this item.</summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.IconUrl">
            <summary>The icon url is presented to editors and is used distinguish item types when creating and managing content nodes.</summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.IsPage">
            <summary>Whether the defined item is a page or not. This affects whether the item is displayed in the edit tree and how it's url is calculated.</summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.AuthorizedRoles">
            <summary>Roles allowed to create/edit/delete items of this type.</summary>
        </member>
        <member name="P:N2.Definitions.AbstractDefinition.RequiredPermission">
            <summary>Permission required to create/edit/delete items of this type.</summary>
        </member>
        <member name="M:N2.DefinitionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of ItemAttribute class.</summary>
            <param name="title">The title used when presenting this item type to editors.</param>
        </member>
        <member name="M:N2.DefinitionAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of ItemAttribute class.</summary>
            <param name="title">The title used when presenting this item type to editors.</param>
            <param name="name">The name/discriminator needed to map the appropriate type with content data when retrieving from persistence. When this is null the type's full name is used.</param>
        </member>
        <member name="M:N2.DefinitionAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Initializes a new instance of ItemAttribute class.</summary>
            <param name="title">The title used when presenting this item type to editors.</param>
            <param name="name">The name/discriminator needed to map the appropriate type with content data when retrieving from persistence. When this is null the type's name is used.</param>
            <param name="description">The description of this item.</param>
            <param name="toolTip">The tool tip displayed when hovering over this item type.</param>
            <param name="sortOrder">The order of this type compared to other items types.</param>
        </member>
        <member name="M:N2.DefinitionAttribute.Refine(N2.Definitions.ItemDefinition)">
            <summary>Updates the item definition with the attribute.</summary>
        </member>
        <member name="P:N2.DefinitionAttribute.Installer">
            <summary>
            Gets or sets how to treat this definition during installation.
            </summary>
        </member>
        <member name="T:N2.Integrity.NameOccupiedException">
            <summary>
            An exception that is thrown when an item is saved and another sibling 
            (item with same parent) page already has the same name.
            </summary>
        </member>
        <member name="M:N2.Integrity.NameOccupiedException.#ctor(N2.ContentItem,N2.ContentItem)">
            <summary>
            Initializes a new instance of the NameOccupiedException.
            </summary>
            <param name="source">The source item that is causing the conflict.</param>
            <param name="destination">The parent item already containing an item with the same name.</param>
        </member>
        <member name="P:N2.Integrity.NameOccupiedException.SourceItem">
            <summary>Gets the source item that is causing the conflict.</summary>
        </member>
        <member name="P:N2.Integrity.NameOccupiedException.DestinationItem">
            <summary>Gets the parent item already containing an item with the same name.</summary>
        </member>
        <member name="T:N2.Web.Global">
            <summary>
            Enables N2 to interact with the ASP.NET application request to do url 
            rewriting, authorizing requests and closing NHibernate sessions.
            </summary>
        </member>
        <member name="M:N2.Web.Global.Init">
            <summary>Initializes the N2 factory.</summary>
        </member>
        <member name="T:N2.Web.Compilation.CurrentItemExpressionBuilder">
            <summary>Expression builder used for initializing web controls with the current item's detils or properties with the expression syntax. This is a convenient to bind content data to controls on a template. The expression is evaluated at compile time.</summary>
            <example>
            &lt;asp:Label text="&lt;%$ CurrentItem: Title %&gt;" runat="server" /&gt;
            </example>
        </member>
        <member name="M:N2.Web.Compilation.CurrentItemExpressionBuilder.GetCurrentItemValue(System.String)">
            <summary>Gets the value of an exression.</summary>
            <param name="expression">The expression whose value to get.</param>
            <returns>The value a given expression.</returns>
        </member>
        <member name="P:N2.Web.Compilation.CurrentItemExpressionBuilder.CurrentItemInContext">
            <summary>The item associated with the currently created control.</summary>
        </member>
        <member name="P:N2.Web.Compilation.CurrentItemExpressionBuilder.ExpressionFormat">
            <summary>Gets the expression format for this expression.</summary>
        </member>
        <member name="T:N2.Web.PublicSiteMapProvider">
            <summary>
            A site map provider implementation for N2 CMS content pages.
            </summary>
        </member>
        <member name="T:N2.Web.UI.MasterPage`1">
            <summary>MasterPage base class providing easy access to current page item.</summary>
            <typeparam name="TPage">The type of content item for this masterpage</typeparam>
        </member>
        <member name="P:N2.Web.UI.MasterPage`1.Engine">
            <summary>Gets the current CMS Engine.</summary>
        </member>
        <member name="T:N2.Web.UI.ContentUserControl`1">
            <summary>
            A user control base used to for quick access to content data.
            </summary>
            <typeparam name="TPage">The type of page item this user control will have to deal with.</typeparam>
        </member>
        <member name="P:N2.Web.UI.ContentUserControl`1.Engine">
            <summary>Gets the current CMS Engine.</summary>
        </member>
        <member name="P:N2.Web.UI.ContentUserControl`1.CurrentPage">
            <summary>Gets the current page item.</summary>
        </member>
        <member name="P:N2.Web.UI.ContentUserControl`1.CurrentItem">
            <summary>This is most likely the same as CurrentPage unles you're in a user control dynamically added as a part.</summary>
        </member>
        <member name="P:N2.Web.UI.ContentUserControl`1.Content">
            <summary>Access to commonly used APIs.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.Zone">
            <summary>
            Adds sub-items with a certain zone name to a page.
            </summary>
        </member>
        <member name="T:N2.Web.UI.ItemAwareControl">
            <summary>
            Base class for controls that looks upwards in the control hierarchy 
            to find the current item.
            </summary>
        </member>
        <member name="P:N2.Web.UI.ItemAwareControl.Path">
            <summary>Gets or sets a relative path to the item whose children should be listed by this datasource.</summary>
            <example>
            ctrl.Path = ".."; // Display other items on the same level.
            ctrl.Path = "lorem"; // Display children of the item with the name 'lorem' below the current item.
            ctrl.Path = "/ipsum"; // Display children of the item with the name 'ipsum' directly below the start page.
            ctrl.Path = "//dolor"; // Display children of the item with the name 'dolor' directly below the root item (this is the same as the start page unless multiple hosts are configured).
            ctrl.Path = "/"; // Display children of the start page.
            </example>
        </member>
        <member name="P:N2.Web.UI.WebControls.Zone.PartsAdapter">
            <summary>The content adapter related to the current page item.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Zone.ZoneName">
            <summary>Gets or sets the zone from which to featch items.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Zone.Filters">
            <summary>Gets or sets an enumeration of filters applied to the items.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Zone.DataSource">
            <summary>Gets or sets a list of items to display.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Zone.SeparatorTemplate">
            <summary>Inserted between added child items.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Zone.HeaderTemplate">
            <summary>Inserted before the zone control if a control was added.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.Zone.FooterTemplate">
            <summary>Added after the zone control if a control was added.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.ItemEditor">
            <summary>A form that generates an edit interface for content items.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.IItemEditor">
            <summary>
            Classes implementing this interface can serve as item editors.
            </summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.IItemEditor.VersioningMode">
            <summary>Gets or sets versioning mode when saving items.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.IItemEditor.ZoneName">
            <summary>Gets or sets the zone name to use for items saved through this editor.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.IItemEditor.AddedEditors">
            <summary>Map of editor names and controls added to this item editor.</summary>
        </member>
        <member name="T:N2.Edit.Workflow.IContentForm`1">
            <summary>
            Binds values between an object and it's interface.
            </summary>
            <typeparam name="T">The type of object to bind.</typeparam>
        </member>
        <member name="M:N2.Edit.Workflow.IContentForm`1.UpdateObject(`0)">
            <summary>Updates the object from the interface.</summary>
            <param name="value">The object to update.</param>
            <returns>True if the object was updated.</returns>
        </member>
        <member name="M:N2.Edit.Workflow.IContentForm`1.UpdateInterface(`0)">
            <summary>Updates the interface from the object.</summary>
            <param name="value">The value to use for updating the interface.</param>
        </member>
        <member name="M:N2.Web.UI.WebControls.ItemEditor.Save(N2.ContentItem,N2.Web.UI.WebControls.ItemEditorVersioningMode)">
            <summary>Saves <see cref="P:N2.Web.UI.WebControls.ItemEditor.CurrentItem"/> with the values entered in the form.</summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.ItemEditor.Save">
            <summary>Saves <see cref="P:N2.Web.UI.WebControls.ItemEditor.CurrentItem"/> with the values entered in the form.</summary>
            <returns>The saved item.</returns>
        </member>
        <member name="M:N2.Web.UI.WebControls.ItemEditor.Update">
            <summary>Updates the <see cref="P:N2.Web.UI.WebControls.ItemEditor.CurrentItem"/> with the values entered in the form without saving it.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditor.EditAdapter">
            <summary>The content adapter related to the current page item.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditor.AddedEditors">
            <summary>Gets a dictionary of editor controls added this control.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditor.Discriminator">
            <summary>The type of item to edit. ItemEditor will look at <see cref="T:N2.Details.AbstractEditableAttribute"/> attributes on this type to render input controls.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditor.Definition">
            <summary>The definition which is the source of editors.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditor.CurrentItemType">
            <summary>Gets the type of the edited item.</summary>
            <returns>The item's type.</returns>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditor.ParentPath">
            <summary>Gets the parent item id that the edited item will be set to.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditor.CurrentItem">
            <summary>Gets or sets the item to edit with this form.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditor.ZoneName">
            <summary>Gets or sets the zone name that the edited item will be set to.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditor.VersioningMode">
            <summary>Gets or sets wether a version should be saved before the item is updated.</summary>
        </member>
        <member name="T:N2.Web.UI.ItemUtility">
            <summary>
            Some helpful methods that havn't founda better place yet (use at your 
            own risk).
            </summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.NameEditor">
            <summary>A webcontrol that pulls out the page title and transforms it into a web-compatible name that can be used in url's</summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.NameEditor.#ctor">
            <summary>Constructs the name editor.</summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.NameEditor.OnPreRender(System.EventArgs)">
            <summary>Initializes the name editor attaching to the title control onchange event.</summary>
            <param name="e">ignored</param>
        </member>
        <member name="M:N2.Web.UI.WebControls.NameEditor.Validate">
            <summary>Validates the name editor's value checking uniqueness and lenght.</summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.NameEditor.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>Renders an additional asterix when validation didn't pass.</summary>
            <param name="writer">The writer to render the asterix to.</param>
        </member>
        <member name="P:N2.Web.UI.WebControls.NameEditor.TitleEditorName">
            <summary>Gets or sets the name of the editor containing the title to input in the name editor.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.NameEditor.ErrorMessage">
            <summary>Gets or sets the error message generated when the name editor contains invalid values.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.NameEditor.IsValid">
            <summary>Gets or sets wether the name editor's value passes validaton.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.FreeTextArea">
            <summary>
            A wrapper for the tinyMCE free text editor (http://tinymce.moxiecode.com).
            </summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.FreeTextArea.CustomOverrides">
            <summary> Custom TinyMCE config options </summary>  
            <remarks> Will override Web.config TinyMCE settings.
              See: http://tinymce.moxiecode.com/wiki.php/Configuration
            </remarks>
        </member>
        <member name="T:N2.Web.UI.WebControls.ZoneSelector">
            <summary>A drop down list that allows selection between available zones on the parent item.</summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.ZoneSelector.OnInit(System.EventArgs)">
            <summary>Initializes the zone selector control.</summary>
        </member>
        <member name="T:N2.Web.UI.ContentPage`1">
            <summary>
            Page base class that provides easy access to the current page item.
            </summary>
            <typeparam name="TPage">The type of content item served by the page inheriting this class.</typeparam>
        </member>
        <member name="T:N2.Web.UI.IContentTemplate">
            <summary>
            This interface is used for setting the content item associated with a 
            template (ascx or aspx).
            </summary>
        </member>
        <member name="M:N2.Web.UI.ContentPage`1.ApplyConcerns(N2.ContentItem)">
            <summary>Applies all <see cref="T:N2.Web.UI.ContentPageConcern"/> added to <see cref="T:N2.Engine.IServiceContainer"/>.</summary>
            <param name="item">The current item.</param>
        </member>
        <member name="M:N2.Web.UI.ContentPage`1.ApplyCaching">
            <summary>Applies configured cache parameters to this page.</summary>
        </member>
        <member name="P:N2.Web.UI.ContentPage`1.Engine">
            <summary>Gets the current CMS Engine.</summary>
        </member>
        <member name="P:N2.Web.UI.ContentPage`1.CurrentPage">
            <summary>Gets the content item associated with this page.</summary>
        </member>
        <member name="P:N2.Web.UI.ContentPage`1.CurrentItem">
            <summary>Gets the content item associated with this page. This is most likely the same as CurrentPage unles you're in a user control dynamically added as a part.</summary>
        </member>
        <member name="T:N2.Integrity.AvailableZoneAttribute">
            <summary>
            Class decoration that lets N2 know that a class has zones where to 
            which data items can be bound (ZoneName).
            </summary>
        </member>
        <member name="P:N2.Integrity.AvailableZoneAttribute.ZoneName">
            <summary>Gets or sets the name of the zone in question.</summary>
        </member>
        <member name="P:N2.Integrity.AvailableZoneAttribute.Title">
            <summary>Gets or sets the title displayed to editors.</summary>
        </member>
        <member name="T:N2.Collections.DuplicateFilter">
            <summary>
            A filter that removes duplicated by keeping track of already added 
            items and only matching new items.
            </summary>
        </member>
        <member name="M:N2.Collections.DuplicateFilter.FilterDuplicates(System.Collections.Generic.IList{N2.ContentItem})">
            <summary>Removes duplicate items.</summary>
            <param name="items">The items whose duplicate items should be deleted.</param>
        </member>
        <member name="T:N2.Engine.WebAppTypeFinder">
            <summary>
            Provides information about types in the current web application. 
            Optionally this class can look at all assemblies in the bin folder.
            </summary>
        </member>
        <member name="T:N2.Engine.AppDomainTypeFinder">
            <summary>
            A class that finds types needed by N2 by looping assemblies in the 
            currently executing AppDomain. Only assemblies whose names matches
            certain patterns are investigated and an optional list of assemblies
            referenced by <see cref="P:N2.Engine.AppDomainTypeFinder.AssemblyNames"/> are always investigated.
            </summary>
        </member>
        <member name="T:N2.Engine.ITypeFinder">
            <summary>
            Classes implementing this interface provide information about types 
            to various services in the N2 engine.
            </summary>
        </member>
        <member name="M:N2.Engine.ITypeFinder.Find(System.Type)">
            <summary>Finds types assignable from of a certain type in the app domain.</summary>
            <param name="requestedType">The type to find.</param>
            <returns>A list of types found in the app domain.</returns>
        </member>
        <member name="M:N2.Engine.ITypeFinder.GetAssemblies">
            <summary>Gets tne assemblies related to the current implementation.</summary>
            <returns>A list of assemblies that should be loaded by the N2 factory.</returns>
        </member>
        <member name="M:N2.Engine.AppDomainTypeFinder.#ctor">
            <summary>Creates a new instance of the AppDomainTypeFinder.</summary>
        </member>
        <member name="M:N2.Engine.AppDomainTypeFinder.Find(System.Type)">
            <summary>Finds types assignable from of a certain type in the app domain.</summary>
            <param name="requestedType">The type to find.</param>
            <returns>A list of types found in the app domain.</returns>
        </member>
        <member name="M:N2.Engine.AppDomainTypeFinder.GetAssemblies">
            <summary>Gets tne assemblies related to the current implementation.</summary>
            <returns>A list of assemblies that should be loaded by the N2 factory.</returns>
        </member>
        <member name="M:N2.Engine.AppDomainTypeFinder.AddAssembliesInAppDomain(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>Iterates all assemblies in the AppDomain and if it's name matches the configured patterns add it to our list.</summary>
            <param name="addedAssemblyNames"></param>
            <param name="assemblies"></param>
        </member>
        <member name="M:N2.Engine.AppDomainTypeFinder.AddConfiguredAssemblies(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>Adds specificly configured assemblies.</summary>
        </member>
        <member name="M:N2.Engine.AppDomainTypeFinder.Matches(System.String)">
            <summary>Check if a dll is one of the shipped dlls that we know don't need to be investigated.</summary>
            <param name="assemblyFullName">The name of the assembly to check.</param>
            <returns>True if the assembly should be loaded into N2.</returns>
        </member>
        <member name="M:N2.Engine.AppDomainTypeFinder.Matches(System.String,System.String)">
            <summary>Check if a dll is one of the shipped dlls that we know don't need to be investigated.</summary>
            <param name="assemblyFullName">The assembly name to match.</param>
            <param name="pattern">The regular expression pattern to match against the assembly name.</param>
            <returns>True if the pattern matches the assembly name.</returns>
        </member>
        <member name="M:N2.Engine.AppDomainTypeFinder.LoadMatchingAssemblies(System.String)">
            <summary>Makes sure matching assemblies in the supplied folder are loaded in the app domain.</summary>
            <param name="directoryPath">The physical path to a directory containing dlls to load in the app domain.</param>
        </member>
        <member name="P:N2.Engine.AppDomainTypeFinder.App">
            <summary>The app domain to look for types in.</summary>
        </member>
        <member name="P:N2.Engine.AppDomainTypeFinder.LoadAppDomainAssemblies">
            <summary>Gets or sets wether N2 should iterate assemblies in the app domain when loading N2 types. Loading patterns are applied when loading these assemblies.</summary>
        </member>
        <member name="P:N2.Engine.AppDomainTypeFinder.AssemblyNames">
            <summary>Gets or sets assemblies loaded a startup in addition to those loaded in the AppDomain.</summary>
        </member>
        <member name="P:N2.Engine.AppDomainTypeFinder.AssemblySkipLoadingPattern">
            <summary>Gets the pattern for dlls that we know don't need to be investigated for content items.</summary>
        </member>
        <member name="P:N2.Engine.AppDomainTypeFinder.AssemblyRestrictToLoadingPattern">
            <summary>Gets or sets the pattern for dll that will be investigated. For ease of use this defaults to match all but to increase performance you might want to configure a pattern that includes N2 assemblies and your own.</summary>
            <remarks>If you change this so that N2 assemblies arn't investigated (e.g. by not including something like "^N2|..." you may break core functionality.</remarks>
        </member>
        <member name="P:N2.Engine.WebAppTypeFinder.EnsureBinFolderAssembliesLoaded">
            <summary>Gets or sets wether assemblies in the bin folder of the web application should be specificly checked for beeing loaded on application load. This is need in situations where plugins need to be loaded in the AppDomain after the application been reloaded.</summary>
        </member>
        <member name="T:N2.Definitions.IDefinitionManagerDependency">
            <summary>An interface used by N2 to inject content item's dependency to the definition manager (needed by the definition property).</summary>
        </member>
        <member name="M:N2.Definitions.IDefinitionManagerDependency.SetDefinitions(N2.Definitions.IDefinitionManager)">
            <summary>Sets the definition on the object.</summary>
            <param name="definitions">The definition manager to inject.</param>
        </member>
        <member name="T:N2.Definitions.ItemAuthorizedRolesAttribute">
            <summary>
            This class is used to restrict access to item types in edit mode. Only 
            allowed roles can create new items decorated with this attribute.
            </summary>
        </member>
        <member name="M:N2.Definitions.ItemAuthorizedRolesAttribute.#ctor">
            <summary>Initializes a new ItemAuthorizedRolesAttribute used to restrict permission to create items in edit mode.</summary>
        </member>
        <member name="M:N2.Definitions.ItemAuthorizedRolesAttribute.#ctor(System.String[])">
            <summary>Initializes a new ItemAuthorizedRolesAttribute used to restrict permission to create items in edit mode.</summary>
            <param name="roles">The roles allowed to edit the decorated item.</param>
        </member>
        <member name="T:N2.Definitions.NoItemAllowedException">
            <summary>This exception is thrown when trying to adding an item to a parent that doesn't support any types of child items.</summary>
        </member>
        <member name="T:N2.Details.WithEditableNameAttribute">
            <summary>Class applicable attribute used to add a title editor.</summary>
            <example>
            [N2.Details.WithEditableName("Address name", 20)]
            public abstract class AbstractBaseItem : N2.ContentItem 
            {
            }
            </example>
        </member>
        <member name="M:N2.Details.WithEditableNameAttribute.#ctor">
            <summary>
            Creates a new instance of the WithEditableAttribute class with default values.
            </summary>
        </member>
        <member name="M:N2.Details.WithEditableNameAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the WithEditableAttribute class with default values.
            </summary>
            <param name="title">The label displayed to editors</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="P:N2.Details.WithEditableNameAttribute.WhitespaceReplacement">
            <summary>Gets or sets the character that replaces whitespace when updating the name (default is '-').</summary>
        </member>
        <member name="P:N2.Details.WithEditableNameAttribute.ToLower">
            <summary>Gets or sets whether names should be made lowercase.</summary>
        </member>
        <member name="P:N2.Details.WithEditableNameAttribute.Ascii">
            <summary>Gets or sets wether non-ascii characters will be removed from the name.</summary>
        </member>
        <member name="P:N2.Details.WithEditableNameAttribute.ShowKeepUpdated">
            <summary>Allow editor to choose wether to update name automatically.</summary>
        </member>
        <member name="P:N2.Details.WithEditableNameAttribute.KeepUpdatedText">
            <summary>The text on the keep updated check box.</summary>
        </member>
        <member name="P:N2.Details.WithEditableNameAttribute.KeepUpdatedToolTip">
            <summary>The tool tip on the keep updated check box.</summary>
        </member>
        <member name="P:N2.Details.WithEditableNameAttribute.Focus">
            <summary>Sets focus on the name editor.</summary>
        </member>
        <member name="T:N2.Details.WithEditableTitleAttribute">
            <summary>Class applicable attribute used to add a title editor.</summary>
            <example>
            [N2.Details.WithEditableTitle("Menu text", 10)]
            public abstract class AbstractBaseItem : N2.ContentItem 
            {
            }
            </example>
        </member>
        <member name="M:N2.Details.WithEditableTitleAttribute.#ctor">
            <summary>
            Creates a new instance of the WithEditableAttribute class with default values.
            </summary>
        </member>
        <member name="M:N2.Details.WithEditableTitleAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the WithEditableAttribute class with default values.
            </summary>
            <param name="title">The label displayed to editors</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="P:N2.Details.WithEditableTitleAttribute.Focus">
            <summary>Gets or sets whether the title editor should receive focus.</summary>
        </member>
        <member name="T:N2.Details.DetailAuthorizedRolesAttribute">
            <summary>This class is used to restrict access to certain details in edit mode. Only users in the specified roles can edit details decorated with this attribute.</summary>
        </member>
        <member name="M:N2.Details.DetailAuthorizedRolesAttribute.#ctor">
            <summary>Initializes a new instance of the DetailAuthorizedRolesAttribute used to restrict access to details in edit mode.</summary>
        </member>
        <member name="M:N2.Details.DetailAuthorizedRolesAttribute.#ctor(System.String[])">
            <summary>Initializes a new instance of the DetailAuthorizedRolesAttribute used to restrict access to details in edit mode.</summary>
            <param name="roles">The roles allowed to edit the decorated detail.</param>
        </member>
        <member name="T:N2.Details.EditableUserControlAttribute">
            <summary>Attribute used to mark properties as editable. This is used to associate the control used for the editing with the property/detail on the content item whose value we are editing.</summary>
        </member>
        <member name="M:N2.Details.EditableUserControlAttribute.#ctor">
            <summary>Don't forget to set the UserControlpath if you use this constructor.</summary>
        </member>
        <member name="M:N2.Details.EditableUserControlAttribute.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>Initializes a new instance of the EditableAttribute class set to use a user control.</summary>
            <param name="title">The label displayed to editors</param>
            <param name="userControlPath">The virtual path of a user control used for editing</param>
            <param name="editorPropertyName">The property on the edit control that will update the unit's property</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="M:N2.Details.EditableUserControlAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>Initializes a new instance of the EditableAttribute class set to use a user control.</summary>
            <param name="title">The label displayed to editors</param>
            <param name="userControlPath">The virtual path of a user control used for editing</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="M:N2.Details.EditableUserControlAttribute.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the EditableAttribute class set to use a user control.</summary>
            <param name="userControlPath">The virtual path of a user control used for editing</param>
            <param name="sortOrder">The order of this editor</param>
        </member>
        <member name="P:N2.Details.EditableUserControlAttribute.UserControlPath">
            <summary>Gets or sets the virtual path of a user control. This property is only considered when ControlType is <see cref="T:System.Web.UI.UserControl"/>.</summary>
        </member>
        <member name="P:N2.Details.EditableUserControlAttribute.UserControlPropertyName">
            <summary>The name of the property on the user control to get/set the value from/to.</summary>
        </member>
        <member name="T:N2.Details.DetailCollection">
            <summary>A named collection of details. This is used by content items to group related details together.</summary>
        </member>
        <member name="M:N2.Details.DetailCollection.#ctor">
            <summary>Creates a new (uninitialized) instance of the DetailCollection class.</summary>
        </member>
        <member name="M:N2.Details.DetailCollection.#ctor(N2.ContentItem,System.String,System.Object[])">
            <summary>Crates a new instance of the DetailCollection bound to a content item.</summary>
            <param name="item">The content item enclosing this collection.</param>
            <param name="name">The name of the collection.</param>
            <param name="values">The values of this collection.</param>
        </member>
        <member name="M:N2.Details.DetailCollection.AddRange(System.Collections.IEnumerable)">
            <summary>Adds the elements of the specified collection to the end of this collection.</summary>
            <param name="values">The values to add.</param>
        </member>
        <member name="M:N2.Details.DetailCollection.Replace(System.Collections.IEnumerable)">
            <summary>Replaces the values in this collection adding those not present in this collection and removing those not present in the supplied collection. This method will not add duplicate elements.</summary>
            <param name="values">The values to replace the this collection with.</param>
        </member>
        <member name="M:N2.Details.DetailCollection.IndexOf(System.Object)">
            <summary>Gets the index of an object in the collection..</summary>
            <param name="value">The value whose index to get.</param>
            <returns>The index or -1 if the item isn't in the collection.</returns>
        </member>
        <member name="M:N2.Details.DetailCollection.Insert(System.Int32,System.Object)">
            <summary>Inserts a value in the collection.</summary>
            <param name="index">The index to insert into.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:N2.Details.DetailCollection.RemoveAt(System.Int32)">
            <summary>Removes a value at the given index.</summary>
            <param name="index">The index of the value to remove.</param>
        </member>
        <member name="M:N2.Details.DetailCollection.Add(System.Object)">
            <summary>Adds a value to the collection.</summary>
            <param name="value">The value to add.</param>
            <returns>the index of the added value.</returns>
        </member>
        <member name="M:N2.Details.DetailCollection.Clear">
            <summary>Clears the collection.</summary>
        </member>
        <member name="M:N2.Details.DetailCollection.Contains(System.Object)">
            <summary>Check if the collection contains a value.</summary>
            <param name="value">The value to look for.</param>
            <returns>True if the collection contains the value.</returns>
        </member>
        <member name="M:N2.Details.DetailCollection.CopyTo(System.Array,System.Int32)">
            <summary>Copies the collection to an array.</summary>
            <param name="array">The array to copy values to.</param>
            <param name="index">The start index to copy from.</param>
        </member>
        <member name="M:N2.Details.DetailCollection.Remove(System.Object)">
            <summary>Removes a value from the collection.</summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:N2.Details.DetailCollection.Clone">
            <summary>Clones the collection and </summary>
            <returns></returns>
        </member>
        <member name="M:N2.Details.DetailCollection.GetHashCode">
            <summary>Gets a hash code based on the ID.</summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:N2.Details.DetailCollection.ID">
            <summary>Gets or sets the collection's primary key.</summary>
        </member>
        <member name="P:N2.Details.DetailCollection.Name">
            <summary>Gets or sets the name of the collection.</summary>
        </member>
        <member name="P:N2.Details.DetailCollection.Details">
            <summary>Gets or sets the details collection. To access the objects directly you can use e.g. collection[index].</summary>
        </member>
        <member name="P:N2.Details.DetailCollection.EnclosingItem">
            <summary>Gets or sets the the item containing this collection.</summary>
        </member>
        <member name="P:N2.Details.DetailCollection.Item(System.Int32)">
            <summary>Gets or sets a value at the specified index.</summary>
            <param name="index">The index of the value.</param>
            <returns>The value get or set from the specified index.</returns>
        </member>
        <member name="P:N2.Details.DetailCollection.IsFixedSize">
            <summary>Gets false.</summary>
        </member>
        <member name="P:N2.Details.DetailCollection.Count">
            <summary>Gets the number of values in the collection.</summary>
        </member>
        <member name="P:N2.Details.DetailCollection.IsReadOnly">
            <summary>Gets false.</summary>
        </member>
        <member name="P:N2.Details.DetailCollection.IsSynchronized">
            <summary>Gets true.</summary>
        </member>
        <member name="P:N2.Details.DetailCollection.SyncRoot">
            <summary>Gets null.</summary>
        </member>
        <member name="T:N2.Details.LinkDetail">
            <summary>
            A link detail used to relate items to each other.
            </summary>
        </member>
        <member name="T:N2.Definitions.NotAllowedParentException">
            <summary>This exceptions is thrown when trying to add an item to an unsupported parent item.</summary>
        </member>
        <member name="T:N2.Edit.IEditManager">
            <summary>
            Classes implementing this interface can be used to interact with the 
            edit mode functionality.
            </summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetPlugins``1(System.Security.Principal.IPrincipal)">
            <summary>Gets edit mode plugins found in the environment sorted and filtered by the given user.</summary>
            <typeparam name="T">The type of plugin to get.</typeparam>
            <param name="user">The user that should be authorized for the plugin.</param>
            <param name="item">The item to filter item-specific permissions for.</param>
            <returns>An enumeration of plugins.</returns>
        </member>
        <member name="M:N2.Edit.IEditManager.AddEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Web.UI.Control,System.Security.Principal.IPrincipal)">
            <summary>Adds defined editors and containers to a control.</summary>
            <param name="definition">The definition containing editor information.</param>
            <param name="item">The content item whose editors to add.</param>
            <param name="container">The container onto which add the editors.</param>
            <param name="user">The user whose permissions to use when adding editors.</param>
            <returns>A list of added editors.</returns>
        </member>
        <member name="M:N2.Edit.IEditManager.AddEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Web.UI.Control,System.Security.Principal.IPrincipal,System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds defined editors and containers to a control.</summary>
            <param name="definition">The definition containing editor information.</param>
            <param name="item">The content item whose editors to add.</param>
            <param name="container">The container onto which add the editors.</param>
            <param name="user">The user whose permissions to use when adding editors.</param>
            <param name="containerNameFilter">Only add editors with these names.</param>
            <param name="containerTypeFilter">Only add editors within this container type.</param>
            <returns>A list of added editors.</returns>
        </member>
        <member name="M:N2.Edit.IEditManager.UpdateEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control},System.Security.Principal.IPrincipal)">
            <summary>Sets initial editor values.</summary>
            <param name="addedEditors">Previously added editor controls.</param>
            <param name="item">The content item to use for update.</param>
            <param name="user">The current user.</param>
        </member>
        <member name="M:N2.Edit.IEditManager.UpdateItem(N2.Definitions.ItemDefinition,N2.ContentItem,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control},System.Security.Principal.IPrincipal)">
            <summary>Updates the item with the values from the editors.</summary>
            <param name="item">The item to update.</param>
            <param name="addedEditors">The previously added editors.</param>
            <param name="user">The user for filtering updatable editors.</param>
            <returns>Details that were updated.</returns>
        </member>
        <member name="M:N2.Edit.IEditManager.Save(N2.ContentItem,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control},N2.Web.UI.WebControls.ItemEditorVersioningMode,System.Security.Principal.IPrincipal)">
            <summary>Saves an item using values from the supplied item editor.</summary>
            <param name="item">The item to update.</param>
            <param name="addedEditors">The editors to update the item with.</param>
            <param name="versioningMode">How to treat the item beeing saved in respect to versioning.</param>
            <param name="user">The user that is performing the saving.</param>
        </member>
        <member name="M:N2.Edit.IEditManager.GetEditorFilter(System.Security.Principal.IPrincipal)">
            <summary>Gets the filter to be applied to items displayed in edit mode.</summary>
            <param name="user">The user for whom to apply the filter.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:N2.Edit.IEditManager.GetDeleteUrl(N2.ContentItem)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetEditExistingItemUrl(N2.ContentItem)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetEditInterfaceUrl">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetEditInterfaceUrl(N2.ContentItem)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetEditNewPageUrl(N2.ContentItem,N2.Definitions.ItemDefinition,System.String,N2.Edit.CreationPosition)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetManagementInterfaceUrl">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetNavigationUrl(N2.INode)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetPreviewUrl(N2.INode)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetSelectNewItemUrl(N2.ContentItem)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.IEditManager.GetSelectNewItemUrl(N2.ContentItem,System.String)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="P:N2.Edit.IEditManager.EnableVersioning">
            <summary>Gets or sets wether a version is saved when updating items.</summary>
        </member>
        <member name="P:N2.Edit.IEditManager.UploadFolders">
            <summary>Gets folders paths on the server where users are allowed to upload content through the interface.</summary>
        </member>
        <member name="T:N2.Edit.Web.EditPage">
            <summary>
            Base class for edit mode pages. Provides functionality to parse 
            selected item and refresh navigation.
            </summary>
        </member>
        <member name="M:N2.Edit.Web.EditPage.Authorize(System.Security.Principal.IPrincipal)">
            <summary>Determines whether the current page can be displayed.</summary>
            <param name="user">The user to authorize.</param>
            <returns>True if the user is authorized.</returns>
        </member>
        <member name="M:N2.Edit.Web.EditPage.RegisterToolbarSelection">
            <summary>Selects a toolbar item in the top frame</summary>
        </member>
        <member name="M:N2.Edit.Web.EditPage.EnsureAuthorization(N2.ContentItem,N2.Security.Permission)">
            <summary>Checks that the user has the required permission on the given item. Throws exceptions if authorization is missing.</summary>
            <param name="item">The item to check permissions on.</param>
            <param name="permission">The permission to check.</param>
        </member>
        <member name="M:N2.Edit.Web.EditPage.EnsureAuthorization(N2.Security.Permission)">
            <summary>Checks that the user has the required permission on the selected item. Throws exceptions if authorization is missing.</summary>
            <param name="permission">The permission to check.</param>
        </member>
        <member name="M:N2.Edit.Web.EditPage.IsAuthorized(N2.ContentItem,N2.Security.Permission)">
            <summary>Checks that the user has the required permission on the given item.</summary>
            <param name="item">The item to check permissions on.</param>
            <param name="permission">The permission to check.</param>
        </member>
        <member name="M:N2.Edit.Web.EditPage.IsAuthorized(N2.Security.Permission)">
            <summary>Checks that the user has the required permission on the selected item.</summary>
            <param name="permission">The permission to check.</param>
        </member>
        <member name="M:N2.Edit.Web.EditPage.Refresh(N2.ContentItem,N2.Edit.ToolbarArea)">
            <summary>Referesh the selected frames after loading the page.</summary>
            <param name="item"></param>
            <param name="area"></param>
        </member>
        <member name="P:N2.Edit.Web.EditPage.SelectedItem">
            <summary>Gets the currently selected item by the tree menu in edit mode.</summary>
        </member>
        <member name="T:N2.Engine.IEngine">
            <summary>
            Classes implementing this interface can serve as a portal for the 
            various services composing the N2 engine. Edit functionality, modules
            and implementations access most N2 functionality through this 
            interface.
            </summary>
        </member>
        <member name="M:N2.Engine.IEngine.Initialize">
            <summary>
            Initialize components and plugins in the N2 CMS environment.
            </summary>
        </member>
        <member name="M:N2.Engine.IEngine.Resolve``1">
            <summary>Resolves a service configured for the factory.</summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>An instance of the resolved service.</returns>
        </member>
        <member name="M:N2.Engine.IEngine.Resolve(System.Type)">
            <summary>Resolves a service configured for the factory.</summary>
            <param name="serviceType">The type of service to resolve.</param>
            <returns>An instance of the resolved service.</returns>
        </member>
        <member name="M:N2.Engine.IEngine.Resolve(System.String)">
            <summary>Resolves a named service configured for the factory.</summary>
            <param name="key">The name of the service to resolve.</param>
            <returns>An instance of the resolved service.</returns>
        </member>
        <member name="M:N2.Engine.IEngine.AddComponent(System.String,System.Type)">
            <summary>Registers a component in the IoC container.</summary>
            <param name="key">The name of the component.</param>
            <param name="classType">The type of component.</param>
        </member>
        <member name="M:N2.Engine.IEngine.AddComponent(System.String,System.Type,System.Type)">
            <summary>Registers a component in the IoC container.</summary>
            <param name="key">The name of the component.</param>
            <param name="serviceType">The service interface of the component.</param>
            <param name="classType">The type of component.</param>
        </member>
        <member name="M:N2.Engine.IEngine.AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>Adds a compnent instance to the container.</summary>
            <param name="key">A unique key.</param>
            <param name="serviceType">The type of service to provide.</param>
            <param name="instance">The service instance to add.</param>
        </member>
        <member name="M:N2.Engine.IEngine.AddComponentLifeStyle(System.String,System.Type,N2.Engine.ComponentLifeStyle)">
            <summary>Adds a compnent instance to the container.</summary>
            <param name="key">A unique key.</param>
            <param name="classType">The type of component.</param>
            <param name="lifeStyle">The lifestyle that the component will be instantiated with.</param>
        </member>
        <member name="M:N2.Engine.IEngine.AddFacility(System.String,System.Object)">
            <summary>Adds a "facility" to the IoC container. Unless this has been changed it's assumed that tihs is a <see cref="!:Castle.MicroKernel.IFacility"/>.</summary>
            <param name="key">The name of the facility.</param>
            <param name="facility">The facility instance.</param>
        </member>
        <member name="M:N2.Engine.IEngine.Release(System.Object)">
            <summary>Releases a component from the IoC container.</summary>
            <param name="instance">The component instance to release.</param>
        </member>
        <member name="P:N2.Engine.IEngine.Persister">
            <summary>Gets the persistence manager responsible of storing content items to persistence medium (database).</summary>
        </member>
        <member name="P:N2.Engine.IEngine.UrlParser">
            <summary>Gets the url parser responsible of mapping managementUrls to items and back again.</summary>
        </member>
        <member name="P:N2.Engine.IEngine.Definitions">
            <summary>Gets the definition manager responsible of maintaining available item definitions.</summary>
        </member>
        <member name="P:N2.Engine.IEngine.IntegrityManager">
            <summary>Gets the integrity manager used to control which items are allowed below which.</summary>
        </member>
        <member name="P:N2.Engine.IEngine.SecurityManager">
            <summary>Gets the security manager responsible of controlling access to items.</summary>
        </member>
        <member name="P:N2.Engine.IEngine.EditManager">
            <summary>Gets the class responsible for plugins in edit mode.</summary>
        </member>
        <member name="P:N2.Engine.IEngine.RequestContext">
            <summary>Contextual data associated with the current request.</summary>
        </member>
        <member name="P:N2.Engine.IEngine.Host">
            <summary>The base of the web site.</summary>
        </member>
        <member name="P:N2.Engine.IEngine.Container">
            <summary>The inversion of control container supporting this application.</summary>
        </member>
        <member name="T:N2.Persistence.IItemNotifier">
            <summary>
            Brokers items loaded from the database to whoever might want to know 
            they were loaded. This is somewhat different from items which are 
            caught through the <see cref="T:N2.Persistence.IPersister"/> load event since this will
            also be invoked when new items are created and when items are lazily
            loaded e.g. through the children collection.
            </summary>
        </member>
        <member name="M:N2.Persistence.IItemNotifier.NotifiyCreated(N2.ContentItem)">
            <summary>Notify subscribers that an item was loaded or created.</summary>
            <param name="newlyCreatedItem">The item that was loaded or created.</param>
            <returns>True if the item was modified.</returns>
        </member>
        <member name="M:N2.Persistence.IItemNotifier.NotifySaving(N2.ContentItem)">
            <summary>Notify subscribers that an item is to be saved.</summary>
            <param name="itemToBeSaved">The item that is to be saved.</param>
            <returns>True if the item was modified.</returns>
        </member>
        <member name="E:N2.Persistence.IItemNotifier.ItemCreated">
            <summary>Is triggered when an item was created or loaded from the database.</summary>
        </member>
        <member name="E:N2.Persistence.IItemNotifier.ItemSaving">
            <summary>Is triggered when an item is to be saved the database.</summary>
        </member>
        <member name="T:N2.Persistence.Finder.IQueryBuilder">
            <summary>
            Classes implementing this interface provides methods to define criterias
            when building a query.
            </summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryBuilder.Detail(System.String)">
            <summary>Find items having details matching the criteria and a certain name .</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryBuilder.Detail">
            <summary>Find items having a detail matching the criteria.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryBuilder.OpenBracket">
            <summary>"Opens a bracket" i.e. begins a group of criterias that are evaluated together. Must be followed by a CloseBracket.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryBuilder.Property(System.String)">
            <summary>Finds items with a [Persistable] property named.</summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.ID">
            <summary>Finds items with by ID, effectivly Persister.Get(id).</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.ParentID">
            <summary>Finds items with by it's parent item's ID, effectively Persister.Get(id).GetChildren().</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.Parent">
            <summary>Finds items by parent item, effectively Persister.Get(id).GetChildren()</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.Title">
            <summary>Find items with a certain title.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.Name">
            <summary>Find items with a certain name.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.ZoneName">
            <summary>Find items with a certain zone name.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.Created">
            <summary>Find items with a certain created date.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.Updated">
            <summary>Find items with a certain updated date.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.Published">
            <summary>Find items with a certain published date.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.Expires">
            <summary>Find items with a certain expiration date.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.SortOrder">
            <summary>Find items with a certain sort order.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.VersionIndex">
            <summary>Find items with a certain version index.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.State">
            <summary>Find items with a certain version index.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.Visible">
            <summary>Find items with a certain visibility.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.VersionOf">
            <summary>Find previous versions of an item.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.SavedBy">
            <summary>Find items by who saved them.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.AncestralTrail">
            <summary>Find items by location in hierarchy.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryBuilder.Type">
            <summary>Finds items belonging to a certain type. Note that derived types are not found with this method.</summary>
        </member>
        <member name="T:N2.Persistence.IRepository`2">
            <summary>
            The repository is a single point for database operations. All 
            persistence operations on database should pass through here.
            </summary>
            <typeparam name="TKey">The primary key type.</typeparam>
            <typeparam name="TEntity">The entity type.</typeparam>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Get(`0)">
            <summary>
            Get the entity from the persistance store, or return null
            if it doesn't exist.
            </summary>
            <param name="id">The entity's id</param>
            <returns>Either the entity that matches the id, or a null</returns>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Get``1(`0)">
            <summary>
            Get the entity from the persistance store, or return null
            if it doesn't exist.
            </summary>
            <param name="id">The entity's id</param>
            <typeparam name="T">The type of entity to get.</typeparam>
            <returns>Either the entity that matches the id, or a null</returns>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Find(System.String,System.Object)">
            <summary>
            Finds entitities from the persistance store with matching property values.
            </summary>
            <param name="propertyName">The name of the property to search for.</param>
            <param name="value">The value to search for.</param>
            <returns>Entities with matching values.</returns>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Load(`0)">
            <summary>
            Load the entity from the persistance store
            Will throw an exception if there isn't an entity that matches
            the id.
            </summary>
            <param name="id">The entity's id</param>
            <returns>The entity that matches the id</returns>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Delete(`1)">
            <summary>
            Register the entity for deletion when the unit of work
            is completed. 
            </summary>
            <param name="entity">The entity to delete</param>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Save(`1)">
            <summary>
            Register te entity for save in the database when the unit of work
            is completed. (INSERT)
            </summary>
            <param name="entity">the entity to save</param>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Update(`1)">
            <summary>
            Register the entity for update in the database when the unit of work
            is completed. (UPDATE)
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:N2.Persistence.IRepository`2.SaveOrUpdate(`1)">
            <summary>
            Register te entity for save or update in the database when the unit of work
            is completed. (INSERT or UPDATE)
            </summary>
            <param name="entity">the entity to save</param>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Exists">
            <summary>
            Check if any instance of the type exists
            </summary>
            <returns><c>true</c> if an instance is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Count">
            <summary>
            Counts the overall number of instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:N2.Persistence.IRepository`2.Flush">
            <summary>Flushes changes made to items in this repository.</summary>
        </member>
        <member name="M:N2.Persistence.IRepository`2.BeginTransaction">
            <summary>Begins a transaction.</summary>
            <returns>A disposable transaction wrapper.</returns>
        </member>
        <member name="T:N2.Persistence.ITransaction">
            <summary>
            Classes implementing this interface handle starting and stopping of 
            database transactions.
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.NHInterceptor">
            <summary>
            This class is used to notify subscribers about loaded items.
            </summary>
        </member>
        <member name="M:N2.Persistence.NH.NHInterceptor.OnLoad(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>Sets rewriter and definition manager on a content item object at load time.</summary>
            <param name="entity">The potential content item whose definition manager and rewriter will be set.</param>
            <param name="id">Ignored.</param>
            <param name="state">Ignored.</param>
            <param name="propertyNames">Ignored.</param>
            <param name="types">Ignored.</param>
            <returns>True if the entity was a content item.</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHInterceptor.OnFlushDirty(System.Object,System.Object,System.Object[],System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>Invokes the notifier's saving event.</summary>
            <param name="entity">The potential content item to notify about.</param>
            <param name="id">Ignored.</param>
            <param name="currentState">Ignored.</param>
            <param name="previousState">Ignored.</param>
            <param name="propertyNames">Ignored.</param>
            <param name="types">Ignored.</param>
            <returns>True if the entity was a content item.</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHInterceptor.OnSave(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>Invokes the notifier's saving event.</summary>
            <param name="entity">The potential content item to notify about.</param>
            <param name="id">Ignored.</param>
            <param name="state">Ignored.</param>
            <param name="propertyNames">Ignored.</param>
            <param name="types">Ignored.</param>
            <returns>True if the entity was a content item.</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHInterceptor.NotifiyCreated(N2.ContentItem)">
            <summary>Notify subscribers that an item was loaded or created.</summary>
            <param name="newlyCreatedItem">The item that was loaded or created.</param>
            <returns>True if the item was modified.</returns>
        </member>
        <member name="T:N2.Persistence.NH.Finder.ItemFinder">
            <summary>
            Provides the query builder.
            </summary>
        </member>
        <member name="T:N2.Persistence.Finder.IItemFinder">
            <summary>
            Classes implementing this interface are responsible creating a query 
            builder.
            </summary>
        </member>
        <member name="P:N2.Persistence.Finder.IItemFinder.Where">
            <summary>
            Starts the building of a query.
            </summary>
        </member>
        <member name="P:N2.Persistence.Finder.IItemFinder.All">
            <summary>
            Allows selection of all items.
            </summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.ItemFinder.Where">
            <summary>Starts the building of a query.</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.ItemFinder.All">
            <summary>Allows selection of all items.</summary>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(NHibernate.Criterion.Order,NHibernate.Criterion.ICriterion[])">
            <summary>
            Loads all the entities that match the criteria
            by order
            </summary>
            <param name="criteria">the criteria to look for</param>
            <param name="order"></param>
            <returns>All the entities that match the criteria</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
            <summary>
            Loads all the entities that match the criteria
            by order
            </summary>
            <param name="criteria">the criteria to look for</param>
            <param name="orders"> the order to load the entities</param>
            <returns>All the entities that match the criteria</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(NHibernate.Criterion.DetachedCriteria,System.Int32,System.Int32,NHibernate.Criterion.Order[])">
            <summary>
            Loads all the entities that match the criteria
            by order
            </summary>
            <param name="criteria">the criteria to look for</param>
            <param name="orders"> the order to load the entities</param>
            <param name="firstResult">the first result to load</param>
            <param name="maxResults">the number of result to load</param>
            <returns>All the entities that match the criteria</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
            <summary>
            Loads all the entities that match the criteria
            by order
            </summary>
            <param name="orders"></param>
            <param name="criteria">the criteria to look for</param>
            <returns>All the entities that match the criteria</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(NHibernate.Criterion.ICriterion[])">
            <summary>
            Loads all the entities that match the criteria
            </summary>
            <param name="criteria">the criteria to look for</param>
            <returns>All the entities that match the criteria</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(System.Int32,System.Int32,NHibernate.Criterion.ICriterion[])">
            <summary>
            Loads all the entities that match the criteria, and allow paging.
            </summary>
            <param name="firstResult">The first result to load</param>
            <param name="numberOfResults">Total number of results to load</param>
            <param name="criteria">the cirteria to look for</param>
            <returns>number of Results of entities that match the criteria</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(System.Int32,System.Int32,NHibernate.Criterion.Order,NHibernate.Criterion.ICriterion[])">
            <summary>
            Loads all the entities that match the criteria, with paging 
            and orderring by a single field.
            </summary>
            <param name="firstResult">The first result to load</param>
            <param name="numberOfResults">Total number of results to load</param>
            <param name="criteria">the cirteria to look for</param>
            <returns>number of Results of entities that match the criteria</returns>
            <param name="selectionOrder">The field the repository should order by</param>
            <returns>number of Results of entities that match the criteria</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(System.Int32,System.Int32,NHibernate.Criterion.Order[],NHibernate.Criterion.ICriterion[])">
            <summary>
            Loads all the entities that match the criteria, with paging 
            and orderring by a multiply fields.
            </summary>
            <param name="firstResult">The first result to load</param>
            <param name="numberOfResults">Total number of results to load</param>
            <param name="criteria">the cirteria to look for</param>
            <returns>number of Results of entities that match the criteria</returns>
            <param name="selectionOrder">The fields the repository should order by</param>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(System.String,N2.Persistence.Parameter[])">
            <summary>
            Execute the named query and return all the results
            </summary>
            <param name="namedQuery">The named query to execute</param>
            <param name="parameters">Parameters for the query</param>
            <returns>The results of the query</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindAll(System.Int32,System.Int32,System.String,N2.Persistence.Parameter[])">
            <summary>
            Execute the named query and return paged results
            </summary>
            <param name="parameters">Parameters for the query</param>
            <param name="namedQuery">the query to execute</param>
            <param name="firstResult">The first result to return</param>
            <param name="numberOfResults">number of records to return</param>
            <returns>Paged results of the query</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindOne(NHibernate.Criterion.ICriterion[])">
            <summary>
            Find a single entity based on a criteria.
            Thorws is there is more than one result.
            </summary>
            <param name="criteria">The criteria to look for</param>
            <returns>The entity or null</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindOne(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            Find a single entity based on a criteria.
            Thorws is there is more than one result.
            </summary>
            <param name="criteria">The criteria to look for</param>
            <returns>The entity or null</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindOne(System.String,N2.Persistence.Parameter[])">
            <summary>
            Find a single entity based on a named query.
            Thorws is there is more than one result.
            </summary>
            <param name="parameters">parameters for the query</param>
            <param name="namedQuery">the query to executre</param>
            <returns>The entity or null</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindFirst(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[])">
            <summary>
            Find the entity based on a criteria.
            </summary>
            <param name="criteria">The criteria to look for</param>
            <param name="orders">Optional orderring</param>
            <returns>The entity or null</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.FindFirst(NHibernate.Criterion.Order[])">
            <summary>
            Find the first entity of type
            </summary>
            <param name="orders">Optional orderring</param>
            <returns>The entity or null</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.Exists(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            Check if any instance matches the criteria.
            </summary>
            <returns><c>true</c> if an instance is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:N2.Persistence.NH.INHRepository`2.Count(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            Counts the number of instances matching the criteria.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.#ctor(N2.Persistence.NH.ISessionProvider)">
            <summary>Creates a new instance of the NHRepository.</summary>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Get(`0)">
            <summary>
            Get the entity from the persistance store, or return null
            if it doesn't exist.
            </summary>
            <param name="id">The entity's id</param>
            <returns>Either the entity that matches the id, or a null</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Get``1(`0)">
            <summary>
            Get the entity from the persistance store, or return null
            if it doesn't exist.
            </summary>
            <param name="id">The entity's id</param>
            <typeparam name="T">The type of entity to get.</typeparam>
            <returns>Either the entity that matches the id, or a null</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Load(`0)">
            <summary>
            Load the entity from the persistance store
            Will throw an exception if there isn't an entity that matches
            the id.
            </summary>
            <param name="id">The entity's id</param>
            <returns>The entity that matches the id</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Delete(`1)">
            <summary>
            Register the entity for deletion when the unit of work
            is completed. 
            </summary>
            <param name="entity">The entity to delete</param>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Save(`1)">
            <summary>
            Register te entity for save in the database when the unit of work
            is completed. (INSERT)
            </summary>
            <param name="entity">the entity to save</param>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Update(`1)">
            <summary>
            Register the entity for update in the database when the unit of work
            is completed. (UPDATE)
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.SaveOrUpdate(`1)">
            <summary>
            Register te entity for save or update in the database when the unit of work
            is completed. (INSERT or UPDATE)
            </summary>
            <param name="entity">the entity to save</param>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Find(System.String,System.Object)">
            <summary>
            Finds entitities from the persistance store with matching property values.
            </summary>
            <param name="propertyName">The name of the property to search for.</param>
            <param name="value">The value to search for.</param>
            <returns>Entities with matching values.</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Exists">
            <summary>
            Check if any instance of the type exists
            </summary>
            <returns><c>true</c> if an instance is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Count">
            <summary>
            Counts the overall number of instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Dispose">
            <summary>Closes the database session.</summary>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Flush">
            <summary>Flushes changes made to items in this repository.</summary>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.BeginTransaction">
            <summary>Begins a transaction.</summary>
            <returns>A disposable transaction wrapper.</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.FindFirst(NHibernate.Criterion.Order[])">
            <summary>
            Find the first entity of type
            </summary>
            <param name="orders">Optional orderring</param>
            <returns>The entity or null</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Exists(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            Check if any instance matches the criteria.
            </summary>
            <returns><c>true</c> if an instance is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:N2.Persistence.NH.NHRepository`2.Count(NHibernate.Criterion.DetachedCriteria)">
            <summary>
            Counts the number of instances matching the criteria.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:N2.Plugin.IPluginBootstrapper">
            <summary>
            Finds plugins and calls their initializer.
            </summary>
        </member>
        <member name="T:N2.Plugin.PluginBootstrapper">
            <summary>
            Finds plugins and calls their initializer.
            </summary>
        </member>
        <member name="M:N2.Plugin.PluginBootstrapper.GetPluginDefinitions">
            <summary>Gets plugins in the current app domain using the type finder.</summary>
            <returns>An enumeration of available plugins.</returns>
        </member>
        <member name="M:N2.Plugin.PluginBootstrapper.InitializePlugins(N2.Engine.IEngine,System.Collections.Generic.IEnumerable{N2.Plugin.IPluginDefinition})">
            <summary>Invokes the initialize method on the supplied plugins.</summary>
        </member>
        <member name="T:N2.Web.ISitesSource">
            <summary>
            This interface is used by the <see cref="T:N2.Web.DynamicSitesProvider"/> to 
            retrieve available sites.
            </summary>
        </member>
        <member name="M:N2.Web.ISitesSource.GetSites">
            <summary>Gets sites specified by a site node.</summary>
            <returns>An enumeration of sites.</returns>
            <remarks>The returned sites are cached.</remarks>
        </member>
        <member name="T:N2.Web.ISitesProvider">
            <summary>
            Classes implementing this interface can serve as providers for sites 
            when using the multiple site url parser.
            </summary>
        </member>
        <member name="M:N2.Web.ISitesProvider.GetSites">
            <summary>Gets site roots configured for this installation.</summary>
            <returns>An enumeration of sites.</returns>
        </member>
        <member name="T:N2.Web.IUrlParser">
            <summary>
            Classes implementing this interface creates unique managementUrls for items and
            can from such an url find the corresponding item.
            </summary>
        </member>
        <member name="M:N2.Web.IUrlParser.BuildUrl(N2.ContentItem)">
            <summary>Calculates an item url by walking it's parent path.</summary>
            <param name="item">The item whose url to compute.</param>
            <returns>A friendly url to the supplied item.</returns>
        </member>
        <member name="M:N2.Web.IUrlParser.IsRootOrStartPage(N2.ContentItem)">
            <summary>Checks if an item is start or root page</summary>
            <param name="item">The item to check</param>
            <returns>True if the item is a start page or a root page</returns>
        </member>
        <member name="M:N2.Web.IUrlParser.ResolvePath(N2.Web.Url)">
            <summary>Finds the content item and the template associated with an url.</summary>
            <param name="url">The url to the template to locate.</param>
            <returns>A TemplateData object. If no template was found the object will have empty properties.</returns>
        </member>
        <member name="M:N2.Web.IUrlParser.Parse(System.String)">
            <summary>Finds an item by traversing names from the starting point root.</summary>
            <param name="url">The url that should be traversed.</param>
            <returns>The content item matching the supplied url.</returns>
        </member>
        <member name="M:N2.Web.IUrlParser.StripDefaultDocument(System.String)">
            <summary>Removes a trailing Default.aspx from an URL.</summary>
            <param name="path">A URL path without query strings from which to remove any trailing Default.aspx.</param>
            <returns>The same path or one stripped of the remaining default document segment.</returns>
        </member>
        <member name="E:N2.Web.IUrlParser.PageNotFound">
            <summary>Is invoked when the url parser didn't find </summary>
        </member>
        <member name="P:N2.Web.IUrlParser.StartPage">
            <summary>Gets the current start page.</summary>
        </member>
        <member name="P:N2.Web.IUrlParser.CurrentPage">
            <summary>Parses the current url to retrieve the current page.</summary>
        </member>
        <member name="T:N2.Integrity.AllowedChildrenAttribute">
            <summary>
            A class decoration used to define which items are allowed below this 
            item. When this attribute intersects with 
            <see cref="T:N2.Integrity.RestrictParentsAttribute"/>, the union of these two are 
            considered to be allowed.
            </summary>
        </member>
        <member name="M:N2.Integrity.AllowedChildrenAttribute.#ctor">
            <summary>Initializes a new instance of the AllowedChildrenAttribute which is used to restrict which types of items may be added below which.</summary>
        </member>
        <member name="M:N2.Integrity.AllowedChildrenAttribute.#ctor(System.Type[])">
            <summary>Initializes a new instance of the AllowedChildrenAttribute which is used to restrict which types of items may be added below which.</summary>
            <param name="allowedChildTypes">A list of allowed types. Null is interpreted as all types are allowed.</param>
        </member>
        <member name="T:N2.Integrity.CannotDeleteRootException">
            <summary>
            Exception thrown when an attempt to remove the root item is made.
            </summary>
        </member>
        <member name="T:N2.Integrity.DestinationOnOrBelowItselfException">
            <summary>
            Exception thrown when an attempt to move an item onto or below itself is made.
            </summary>
        </member>
        <member name="P:N2.Integrity.DestinationOnOrBelowItselfException.SourceItem">
            <summary>Gets the source item that is causing the conflict.</summary>
        </member>
        <member name="P:N2.Integrity.DestinationOnOrBelowItselfException.DestinationItem">
            <summary>Gets the parent item already containing an item with the same name.</summary>
        </member>
        <member name="T:N2.Persistence.DoNotCopyAttribute">
            <summary>Used to mark that should not be copied.</summary>
        </member>
        <member name="T:N2.Persistence.NH.IConfigurationBuilder">
            <summary>
            Builds NHibernate configuration and session factories.
            </summary>
        </member>
        <member name="M:N2.Persistence.NH.IConfigurationBuilder.BuildConfiguration">
            <summary>Builds the NHibernate configuration object.</summary>
            <returns>A populated NHibernate configuration.</returns>
        </member>
        <member name="M:N2.Persistence.NH.IConfigurationBuilder.BuildSessionFactory">
            <summary>Build the NHibernate session factory. This is a costly operation.</summary>
            <returns>A session factory ready to serve sessions.</returns>
        </member>
        <member name="T:N2.Persistence.NH.ISessionProvider">
            <summary>
            Creates and provides access to the NHibernate session in the current 
            request's scope.
            </summary>
        </member>
        <member name="M:N2.Persistence.NH.ISessionProvider.Flush">
            <summary>Persists changes to disk.</summary>
        </member>
        <member name="P:N2.Persistence.NH.ISessionProvider.OpenSession">
            <summary>Returns an already opened session or creates and opens a new one and puts it in the current request.</summary>
            <returns>A NHibernate session.</returns>
        </member>
        <member name="T:N2.Plugin.IPluginInitializer">
            <summary>Classes implementing this interface can serve as plug in initializers. If one of these classes is referenced by a PlugInAttribute it's initialize methods will be invoked by the N2 factory during initialization.</summary>
        </member>
        <member name="M:N2.Plugin.IPluginInitializer.Initialize(N2.Engine.IEngine)">
            <summary>Invoked after the factory has been initialized.</summary>
            <param name="engine">The factory that has been initialized.</param>
        </member>
        <member name="T:N2.Plugin.PluginAttribute">
            <summary>
            Use this attribute to denote plugins and reference a plugin initializer 
            that is invoked when the factory is started.
            </summary>
        </member>
        <member name="T:N2.Plugin.InitializerCreatingAttribute">
            <summary>
            Base class for attributes which can create an instance of the plugin 
            initializer and execute it.
            </summary>
        </member>
        <member name="T:N2.Plugin.IPluginDefinition">
            <summary>
            Classes implementing this interface define plugins and are responsible of
            calling plugin initializers.
            </summary>
        </member>
        <member name="M:N2.Plugin.IPluginDefinition.Initialize(N2.Engine.IEngine)">
            <summary>Executes the plugin initializer.</summary>
            <param name="engine">A reference to the current engine.</param>
        </member>
        <member name="M:N2.Plugin.InitializerCreatingAttribute.CreateInitializer">
            <summary>Creates an instance of the initializer defined by this attribute.</summary>
            <returns>A new initializer instance.</returns>
        </member>
        <member name="M:N2.Plugin.PluginAttribute.#ctor">
            <summary>Creates a new instance of the PlugInAttribute class.</summary>
        </member>
        <member name="M:N2.Plugin.PluginAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>Creates a new instance of the PlugInAttribute class.</summary>
            <param name="title">The title of the plugin.</param>
            <param name="name">The name of the plugin.</param>
            <param name="initializerType">The name of the type responsible for initializing this plugin.</param>
        </member>
        <member name="P:N2.Plugin.PluginAttribute.Title">
            <summary>Gets or sets the title of the plugin marked by this attribute.</summary>
        </member>
        <member name="P:N2.Plugin.PluginAttribute.Name">
            <summary>Gets or sets the name of the plugin marked by this attribute.</summary>
        </member>
        <member name="T:N2.Security.AuthorizedRolesAttribute2">
            <summary>
            This class is a base class for attributes used to restrict permissions.
            </summary>
        </member>
        <member name="T:N2.Web.InvalidPathException">
            <summary>
            Exception thrown when an ItemDataSource can't follow a provided path.
            </summary>
        </member>
        <member name="T:N2.Web.InitializerModule">
            <summary>
            A HttpModule that ensures that the N2 engine is initialized with a web 
            context.
            </summary>
        </member>
        <member name="T:N2.Web.IWebContext">
            <summary>
            A mockable interface for operations that targets the the http context.
            </summary>
        </member>
        <member name="M:N2.Web.IWebContext.Close">
            <summary>Closes any endable resources at the end of the request.</summary>
        </member>
        <member name="M:N2.Web.IWebContext.MapPath(System.String)">
            <summary>Maps a virtual path to a physical disk path.</summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:N2.Web.IWebContext.ToAbsolute(System.String)">
            <summary>Converts a virtual path to an an absolute path. E.g. ~/hello.aspx -> /MyVirtualDirectory/hello.aspx.</summary>
            <param name="virtualPath">The virtual url to make absolute.</param>
            <returns>The absolute url.</returns>
        </member>
        <member name="M:N2.Web.IWebContext.ToAppRelative(System.String)">
            <summary>Converts an absolute url to an app relative path. E.g. /MyVirtualDirectory/hello.aspx -> ~/hello.aspx.</summary>
            <param name="virtualPath">The absolute url to convert.</param>
            <returns>An app relative url.</returns>
        </member>
        <member name="M:N2.Web.IWebContext.RewritePath(System.String)">
            <summary>Rewrites the request to the given path.</summary>
            <param name="path">The path to the template that will handle the request.</param>
        </member>
        <member name="M:N2.Web.IWebContext.RewritePath(System.String,System.String)">
            <summary>Transferes the request to the given path.</summary>
            <param name="path">The path to the template that will handle the request.</param>
            <param name="queryString">The query string to rewrite to.</param>
        </member>
        <member name="M:N2.Web.IWebContext.ClearError">
            <summary>Calls into HttpContext.ClearError().</summary>
        </member>
        <member name="P:N2.Web.IWebContext.IsWeb">
            <summary>Gets wether there is a web context availabe.</summary>
        </member>
        <member name="P:N2.Web.IWebContext.RequestItems">
            <summary>Gets a dictionary of request scoped items.</summary>
        </member>
        <member name="P:N2.Web.IWebContext.User">
            <summary>Gets the current user principal (may be null).</summary>
        </member>
        <member name="P:N2.Web.IWebContext.HttpContext">
            <summary>The http context associated with the current request (if any).</summary>
        </member>
        <member name="P:N2.Web.IWebContext.CurrentPage">
            <summary>A page instance stored in the request context.</summary>
        </member>
        <member name="P:N2.Web.IWebContext.CurrentPath">
            <summary>The template used to serve this request.</summary>
        </member>
        <member name="P:N2.Web.IWebContext.Url">
            <summary>The local part of the requested path, e.g. http://n2cms.com/path/to/a/page.aspx?some=query.</summary>
        </member>
        <member name="P:N2.Web.IWebContext.Request">
            <summary>The current request object.</summary>
        </member>
        <member name="P:N2.Web.IWebContext.Response">
            <summary>The current response object.</summary>
        </member>
        <member name="P:N2.Web.IWebContext.Handler">
            <summary>The handler associated with this request.</summary>
        </member>
        <member name="P:N2.Web.IWebContext.PhysicalPath">
            <summary>The physical path on disk to the requested page.</summary>
        </member>
        <member name="P:N2.Web.IWebContext.SkipAuthorization">
            <summary>
            Specifies whether the UrlAuthorizationModule should skip authorization for the current request.
            </summary>
        </member>
        <member name="T:N2.Web.MultipleSitesParser">
            <summary>
            Parses managementUrls in a multiple host environment.
            </summary>
        </member>
        <member name="T:N2.Web.UrlParser">
            <summary>
            Creates unique managementUrls for items and finds the corresponding item from
            such an url.
            </summary>
        </member>
        <member name="M:N2.Web.UrlParser.GetStartPage(N2.Web.Url)">
            <summary>May be overridden to provide custom start page depending on authority.</summary>
            <param name="url">The host name and path information.</param>
            <returns>The configured start page.</returns>
        </member>
        <member name="M:N2.Web.UrlParser.Parse(System.String)">
            <summary>Finds an item by traversing names from the start page.</summary>
            <param name="url">The url that should be traversed.</param>
            <returns>The content item matching the supplied url.</returns>
        </member>
        <member name="M:N2.Web.UrlParser.NotFoundPage(System.String)">
            <summary>Returns a page when  no page is found. This method will return the start page if the url matches the default content page property.</summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Web.UrlParser.BuildUrl(N2.ContentItem)">
            <summary>Calculates an item url by walking it's parent path.</summary>
            <param name="item">The item whose url to compute.</param>
            <returns>A friendly url to the supplied item.</returns>
        </member>
        <member name="M:N2.Web.UrlParser.IsRootOrStartPage(N2.ContentItem)">
            <summary>Checks if an item is startpage or root page</summary>
            <param name="item">The item to compare</param>
            <returns>True if the item is a startpage or a rootpage</returns>
        </member>
        <member name="M:N2.Web.UrlParser.StripDefaultDocument(System.String)">
            <summary>Removes a trailing Default.aspx from an URL.</summary>
            <param name="path">A URL path without query strings from which to remove any trailing Default.aspx.</param>
            <returns>The same path or one stripped of the remaining default document segment.</returns>
        </member>
        <member name="P:N2.Web.UrlParser.CurrentPage">
            <summary>Parses the current url to retrieve the current page.</summary>
        </member>
        <member name="P:N2.Web.UrlParser.StartPage">
            <summary>Gets the current start page.</summary>
        </member>
        <member name="P:N2.Web.UrlParser.DefaultDocument">
            <summary>Gets or sets the default content document name. This is usually "/Default.aspx".</summary>
        </member>
        <member name="M:N2.Web.MultipleSitesParser.Parse(System.String)">
            <summary>Finds an item by traversing names from the start page.</summary>
            <param name="url">The url that should be traversed.</param>
            <returns>The content item matching the supplied url.</returns>
        </member>
        <member name="M:N2.Web.MultipleSitesParser.GetStartPage(N2.Web.Url)">
            <summary>May be overridden to provide custom start page depending on authority.</summary>
            <param name="url">The host name and path information.</param>
            <returns>The configured start page.</returns>
        </member>
        <member name="M:N2.Web.MultipleSitesParser.BuildUrl(N2.ContentItem)">
            <summary>Calculates an item url by walking it's parent path.</summary>
            <param name="item">The item whose url to compute.</param>
            <returns>A friendly url to the supplied item.</returns>
        </member>
        <member name="T:N2.Web.DynamicSitesProvider">
            <summary>
            Finds available sites by looking for content items implementing the 
            <see cref="T:N2.Web.ISitesSource"/> interface.
            </summary>
        </member>
        <member name="T:N2.Web.RequestLifeCycleHandler">
            <summary>
            Handles the request life cycle for N2 by invoking url rewriting, 
            authorizing and closing NHibernate session.
            </summary>
        </member>
        <member name="M:N2.Web.RequestLifeCycleHandler.#ctor(N2.Web.IWebContext,N2.Web.EventBroker,N2.Web.RequestPathProvider,N2.Engine.IContentAdapterProvider,N2.Web.IErrorNotifier,N2.Configuration.ConfigurationManagerWrapper)">
            <summary>Creates a new instance of the RequestLifeCycleHandler class.</summary>
            <param name="webContext">The web context wrapper.</param>
            <param name="broker"></param>
            <param name="dispatcher"></param>
            <param name="adapters"></param>
            <param name="errors"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:N2.Web.RequestLifeCycleHandler.Application_AcquireRequestState(System.Object,System.EventArgs)">
            <summary>Infuses the http handler (usually an aspx page) with the content page associated with the url if it implements the <see cref="T:N2.Web.UI.IContentTemplate"/> interface.</summary>
        </member>
        <member name="T:N2.Web.Site">
            <summary>
            Represents a site to the N2 engine. A site defines a start page, a root
            page, a host url and a dictionary of custom settings.
            </summary>
        </member>
        <member name="M:N2.Web.Site.Is(System.String)">
            <summary>Checks the site against a certain host name and port number (authority).</summary>
            <param name="matchAgainstAuthority">The requested host.</param>
            <returns>True if the site matches.</returns>
        </member>
        <member name="P:N2.Web.Site.Wildcards">
            <summary>Matches hosts that ends with the site's authority, e.g. match both www.n2cms.com and n2cms.com.</summary>
        </member>
        <member name="P:N2.Web.Site.Authority">
            <summary>The domain name plus and any port information, e.g. n2cms.com:80</summary>
        </member>
        <member name="T:N2.Web.TemplateNotFoundException">
            <summary>
            Exception thrown when a template associated with a content is not 
            found.
            </summary>
        </member>
        <member name="M:N2.Web.TemplateNotFoundException.#ctor(N2.ContentItem)">
            <summary>Creates a new instance of the TemplateNotFoundException.</summary>
            <param name="item">The item whose templates wasn't found.</param>
        </member>
        <member name="P:N2.Web.TemplateNotFoundException.Item">
            <summary>Gets the content item associated with this exception.</summary>
        </member>
        <member name="T:N2.Web.UI.FieldSetContainerAttribute">
            <summary>
            Defines a fieldset that can contain editors when editing an item.
            </summary>
        </member>
        <member name="M:N2.Web.UI.FieldSetContainerAttribute.AddTo(System.Web.UI.Control)">
            <summary>Adds the fieldset to a parent container and returns it.</summary>
            <param name="container">The parent container onto which to add the container defined by this interface.</param>
            <returns>The newly added fieldset.</returns>
        </member>
        <member name="P:N2.Web.UI.FieldSetContainerAttribute.Legend">
            <summary>Gets or sets the fieldset legend (text/title).</summary>
        </member>
        <member name="T:N2.Web.UI.TabContainerAttribute">
            <summary>
            Defines a tab panel that can be used to contain editor controls.
            </summary>
            <example>
                [N2.Web.UI.TabContainer("default", "Default", 100)] // editables with the ContainerName="default" will be placed in a tab with the name "Default"
                public class MyPage : N2.ContentItem
                {
                    [N2.Details.EditableFreeTextArea("Text", 110, ContainerName="default")]
                    public virtual string Text
                    {
                        get { return (string)GetDetail("Text"); }
                        set { SetDetail("Text", value); }
                    }
                }
            </example>
        </member>
        <member name="M:N2.Web.UI.TabContainerAttribute.AddTo(System.Web.UI.Control)">
            <summary>Adds the tab panel to a parent container and returns it.</summary>
            <param name="container">The parent container onto which to add the container defined by this interface.</param>
            <returns>The newly added tab panel.</returns>
        </member>
        <member name="P:N2.Web.UI.TabContainerAttribute.TabText">
            <summary>Gets or sets this panel's tab text.</summary>
        </member>
        <member name="P:N2.Web.UI.TabContainerAttribute.RegisterTabCss">
            <summary>Gets or sets wether default styles should be registered.</summary>
        </member>
        <member name="P:N2.Web.UI.TabContainerAttribute.CssClass">
            <summary>
            This needs to contain the css class tabPanel to receive default styles.
            </summary>
        </member>
        <member name="T:N2.Web.UI.ContentUserControl`2">
            <summary>A user control that can be dynamically created, bound to non-page items and added to a page.</summary>
            <typeparam name="TPage">The type of page item this user control will have to deal with.</typeparam>
            <typeparam name="TItem">The type of non-page (data) item this user control will be bound to.</typeparam>
        </member>
        <member name="P:N2.Web.UI.ContentUserControl`2.CurrentItem">
            <summary>Gets the current data item of the dynamically added part.</summary>
        </member>
        <member name="P:N2.Web.UI.ContentUserControl`2.IsHighlighted">
            <summary>Gets whether the current data item is referenced in the query string. This usually occurs when the item is selected in edit mode.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.FieldSet">
            <summary>A fieldset container control with legend.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.FieldSet.Legend">
            <summary>Gets or sets the fieldset legend (it's text/title).</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.FieldSet.CssClass">
            <summary>Gets or sets this controls class name.</summary>
        </member>
        <member name="P:N2.Configuration.ComponentParameterElement.Name">
            <summary>The name of the property to set.  This is generally an constructor argument name or property name</summary>
        </member>
        <member name="P:N2.Configuration.ComponentParameterElement.Value">
            <summary>The value of the property to set.</summary>
        </member>
        <member name="T:N2.Configuration.ConfigurationManagerWrapper">
            <summary>
            A testable configuration manager wrapper.
            </summary>
        </member>
        <member name="T:N2.Configuration.ConfigurationManagerWrapper.ContentSectionTable">
            <summary>
            Keeps references to used config sections.
            </summary>
        </member>
        <member name="T:N2.Configuration.ConfigurationSectionBase">
            <summary>
            Base class for N2 configuration sections.
            </summary>
        </member>
        <member name="P:N2.Configuration.ImagesElement.Sizes">
            <summary>Information about images.</summary>
        </member>
        <member name="P:N2.Configuration.ImageSizeElement.Width">
            <summary>Maximum width of images resized to this size.</summary>
        </member>
        <member name="P:N2.Configuration.ImageSizeElement.Height">
            <summary>Maximum height of images resized to this size.</summary>
        </member>
        <member name="P:N2.Configuration.ImageSizeElement.Quality">
            <summary>Maximum height of images resized to this size.</summary>
        </member>
        <member name="P:N2.Configuration.ImageSizeElement.Replace">
            <summary>Replace existing file when creating this image size.</summary>
        </member>
        <member name="P:N2.Configuration.ImageSizeElement.ResizeOnUpload">
            <summary>Replace existing file when creating this image size.</summary>
        </member>
        <member name="P:N2.Configuration.ImageSizeElement.Mode">
            <summary>Maximum height of images resized to this size.</summary>
        </member>
        <member name="T:N2.Configuration.VersionsElement">
            <summary>
            Configuration related to versioning.
            </summary>
        </member>
        <member name="P:N2.Configuration.VersionsElement.Enabled">
            <summary>Whether versions are stored when saving items using the editor interface.</summary>
        </member>
        <member name="P:N2.Configuration.VersionsElement.MaximumPerItem">
            <summary>Max versions to store for each item.</summary>
        </member>
        <member name="T:N2.Configuration.VirtualPathCollection">
            <summary>
            The configured collection of paths instructs N2's url rewriter to 
            ignore certain virtual paths when considering a path for rewrite.
            </summary>
        </member>
        <member name="T:N2.Collections.BranchHierarchyBuilder">
            <summary>
            Builds a hierarchy of nodes between a certain item and one of it's 
            ancestors (or the root item). This is useful in certain situations when
            creating a navigation menu.
            </summary>
        </member>
        <member name="M:N2.Collections.BranchHierarchyBuilder.#ctor(N2.ContentItem,N2.ContentItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:N2.Collections.BranchHierarchyBuilder"/> class.
            </summary>
            <param name="initialItem">The initial item.</param>
            <param name="lastAncestor">The last ancestor.</param>
            <param name="appendAdditionalLevel">if set to <c>true</c> [append additional level].</param>
        </member>
        <member name="M:N2.Collections.BranchHierarchyBuilder.#ctor(N2.ContentItem,N2.ContentItem)">
            <summary>
            Initializes a new instance of the <see cref="T:N2.Collections.BranchHierarchyBuilder"/> class.
            </summary>
            <param name="initialItem">The initial item.</param>
            <param name="lastAncestor">The last ancestor.</param>
        </member>
        <member name="M:N2.Collections.BranchHierarchyBuilder.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:N2.Collections.CompositeFilter">
            <summary>
            Applies a collection of filters.
            </summary>
        </member>
        <member name="T:N2.Collections.DelegateFilter">
            <summary>
            Helps passing a delegate function used to determine wheter the item should be filtered.
            </summary>
        </member>
        <member name="T:N2.Collections.HierarchyNode`1">
            <summary>
            A node used by the hierarchy navigator to wrap the data beeing 
            navigated.
            </summary>
            <typeparam name="T">The type of data to wrap.</typeparam>
        </member>
        <member name="M:N2.Collections.HierarchyNode`1.#ctor(`0)">
            <summary>Creates a new instance of the hierarchy node.</summary>
            <param name="current">The current node.</param>
        </member>
        <member name="M:N2.Collections.HierarchyNode`1.#ctor(`0,System.Collections.Generic.IEnumerable{N2.Collections.HierarchyNode{`0}})">
            <summary>Creates a new instance of the hierarchy node.</summary>
            <param name="current">The current node.</param>
        </member>
        <member name="M:N2.Collections.HierarchyNode`1.Clone(System.Func{`0,System.Boolean})">
            <summary>Creates a deep copy of the hierarchy.</summary>
            <param name="childSelector"></param>
            <returns></returns>
        </member>
        <member name="P:N2.Collections.HierarchyNode`1.Current">
            <summary>Gets or sets the current node.</summary>
        </member>
        <member name="P:N2.Collections.HierarchyNode`1.Parent">
            <summary>Gets or sets the parent node.</summary>
        </member>
        <member name="P:N2.Collections.HierarchyNode`1.Children">
            <summary>Gets a list of child nodes.</summary>
        </member>
        <member name="T:N2.Collections.IHierarchyNavigator`1">
            <summary>
            Classes implementing this interface provides funtionality to navigate
            between graphs of items.
            </summary>
            <typeparam name="T">The type of node to navigate.</typeparam>
        </member>
        <member name="P:N2.Collections.IHierarchyNavigator`1.Parent">
            <summary>Gets the parent node navigator.</summary>
        </member>
        <member name="P:N2.Collections.IHierarchyNavigator`1.Children">
            <summary>Gets all child node navigators.</summary>
        </member>
        <member name="P:N2.Collections.IHierarchyNavigator`1.Current">
            <summary>Gets the current node.</summary>
        </member>
        <member name="P:N2.Collections.IHierarchyNavigator`1.HasChildren">
            <summary>Gets wether the current item has any child nodes.</summary>
        </member>
        <member name="T:N2.Collections.InverseFilter">
            <summary>
            Wraps and inverses another filter.
            </summary>
        </member>
        <member name="T:N2.Collections.ItemHierarchyNavigator">
            <summary>
            Navigates a graph of content item nodes.
            </summary>
        </member>
        <member name="T:N2.Collections.NavigationFilter">
            <summary>
            Filters items not suitable for navigation. Basically it's a composition
            of page, visible, published, and access filter.
            </summary>
        </member>
        <member name="T:N2.Collections.NullFilter">
            <summary>
            A very positive filter that match any item.
            </summary>
        </member>
        <member name="T:N2.Collections.PageFilter">
            <summary>
            Filters items that arn't pages.
            </summary>
        </member>
        <member name="T:N2.Collections.ParentFilter">
            <summary>
            Filters items not belonging to a certain parent item.
            </summary>
        </member>
        <member name="T:N2.Collections.AncestorFilter">
            <summary>
            Filters items not belonging to a certain page hierarchy.
            </summary>
        </member>
        <member name="T:N2.Collections.PublishedFilter">
            <summary>
            Filters unpublished items.
            </summary>
        </member>
        <member name="M:N2.Collections.PublishedFilter.IsPublished(N2.ContentItem)">
            <summary>Tells whether the item is published, i.e. now is between it's published and expires dates.</summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is published</returns>
        </member>
        <member name="T:N2.Collections.RecursiveFinder">
            <summary>
            Enumerates child items recursively to find items of a certain type, or 
            implementing a certain interface.
            </summary>
        </member>
        <member name="M:N2.Collections.RecursiveFinder.Find``1(N2.ContentItem,System.Int32)">
            <summary>Gets child items of a certain type within a certain depth.</summary>
            <typeparam name="T">Type of item to find</typeparam>
            <param name="root">The initial item.</param>
            <param name="recursionDepth">The maximum recursion depth.</param>
            <returns>An enumeration of items of the given type.</returns>
        </member>
        <member name="M:N2.Collections.RecursiveFinder.Find``1(N2.ContentItem,System.Int32,System.Type[])">
            <summary>Gets child items of a certain type within a certain depth.</summary>
            <typeparam name="T">Type of item to find</typeparam>
            <param name="root">The initial item.</param>
            <param name="recursionDepth">The maximum recursion depth.</param>
            <param name="except">Types to ignore (do not recurse into).</param>
            <returns>An enumeration of items of the given type.</returns>
        </member>
        <member name="T:N2.Collections.TreeHierarchyBuilder">
            <summary>
            Creates a hierarchy of content items from a certain level and downwards.
            </summary>
        </member>
        <member name="T:N2.Collections.VisibleFilter">
            <summary>
            Filters non-visible items.
            </summary>
        </member>
        <member name="T:N2.Configuration.ContainableCollection">
            <summary>
            Represents a collection of containable elements.
            </summary>
        </member>
        <member name="T:N2.Configuration.ContainableElement">
            <summary>
            Represents an editable or an editable container added to an item definition.
            </summary>
        </member>
        <member name="P:N2.Configuration.ContainableElement.Type">
            <summary>The type of item.</summary>
        </member>
        <member name="P:N2.Configuration.ContainableElement.Title">
            <summary>The title used to describe the type.</summary>
        </member>
        <member name="P:N2.Configuration.ContainableElement.ContainerName">
            <summary>The container onto which to add the container or editable.</summary>
        </member>
        <member name="P:N2.Configuration.ContainableElement.SortOrder">
            <summary>The sort of order of the editable.</summary>
        </member>
        <member name="T:N2.Configuration.DefaultDirectoryElement">
            <summary>
            Configuration related to default folder.
            </summary>
        </member>
        <member name="P:N2.Configuration.DefaultDirectoryElement.Mode">
            <summary>Controls how defualt folders are found.</summary>
        </member>
        <member name="P:N2.Configuration.DefaultDirectoryElement.RootPath">
            <summary>The path to the default folder. When this property is null the first upload folder found is used instead.</summary>
        </member>
        <member name="T:N2.Configuration.DefaultDirectoryMode">
            <summary>
            Tells the default directory selector how to treat folder paths.
            </summary>
        </member>
        <member name="F:N2.Configuration.DefaultDirectoryMode.UploadFolder">
            <summary>Always select the upload folder or default directory root path.</summary>
        </member>
        <member name="F:N2.Configuration.DefaultDirectoryMode.RecursiveNames">
            <summary>Create a shadow folder based on the nodes from the current to the top folder.</summary>
        </member>
        <member name="F:N2.Configuration.DefaultDirectoryMode.RecursiveNamesFromParent">
            <summary>Create a shadow folder based on the nodes between the start page and the item's parent.</summary>
        </member>
        <member name="F:N2.Configuration.DefaultDirectoryMode.NodeName">
            <summary>Create a shadow folder based on the item's name.</summary>
        </member>
        <member name="F:N2.Configuration.DefaultDirectoryMode.TopNodeName">
            <summary>Create a shadow folder based on the topmost item below the start page.</summary>
        </member>
        <member name="T:N2.Configuration.DefinitionCollection">
            <summary>
            A collection of configured item definitions that supports remove and add.
            </summary>
        </member>
        <member name="P:N2.Configuration.DefinitionCollection.DefineUnattributedTypes">
            <summary>When set to true this setting makes item types without a [Definition] attribute to be defined.</summary>
        </member>
        <member name="P:N2.Configuration.DefinitionCollection.DefaultContainerName">
            <summary>The default container to add editables to if no other container has been specified.</summary>
        </member>
        <member name="T:N2.Configuration.DefinitionElement">
            <summary>
            A configured definition of a content item.
            </summary>
        </member>
        <member name="P:N2.Configuration.DefinitionElement.Type">
            <summary>The type of item.</summary>
        </member>
        <member name="P:N2.Configuration.DefinitionElement.Title">
            <summary>The title used to describe the type.</summary>
        </member>
        <member name="P:N2.Configuration.DefinitionElement.SortOrder">
            <summary>The sort of order of the item.</summary>
        </member>
        <member name="P:N2.Configuration.DefinitionElement.ToolTip">
            <summary>A tool tip available when adding items.</summary>
        </member>
        <member name="P:N2.Configuration.DefinitionElement.Description">
            <summary>A description showed when adding items.</summary>
        </member>
        <member name="P:N2.Configuration.DefinitionElement.Editables">
            <summary>Additoinal editables on the content item.</summary>
        </member>
        <member name="P:N2.Configuration.DefinitionElement.Containers">
            <summary>Additional containers on the content item.</summary>
        </member>
        <member name="P:N2.Configuration.DefinitionElement.DefaultContainerName">
            <summary>The default container to add editables to if no other container has been specified.</summary>
        </member>
        <member name="T:N2.Configuration.InterfacePluginCollection">
            <summary>
            A configurable collection of interface plugins.
            </summary>
        </member>
        <member name="T:N2.Configuration.MappingCollection">
            <summary>
            A list of mappings that will be added to the NHibernate configuration.
            </summary>
        </member>
        <member name="T:N2.Configuration.MappingElement">
            <summary>
            References a nhibernate mapping file.
            </summary>
        </member>
        <member name="P:N2.Configuration.MappingElement.Name">
            <summary>The resource name and assembly of the base nhibernate mapping file, e.g. "N2.Mappings.Default.hbm.xml, N2"</summary>
        </member>
        <member name="P:N2.Configuration.NameEditorElement.WhitespaceReplacement">
            <summary>Gets or sets the character that replaces whitespace when updating the name (default is '-').</summary>
        </member>
        <member name="P:N2.Configuration.NameEditorElement.ToLower">
            <summary>Gets or sets whether names should be made lowercase.</summary>
        </member>
        <member name="P:N2.Configuration.NameEditorElement.ShowKeepUpdated">
            <summary>Allow editor to choose wether to update name automatically.</summary>
        </member>
        <member name="P:N2.Configuration.NameEditorElement.Replacements">
            <summary>Collection of regex replacements for the name title to name editor.</summary>
        </member>
        <member name="T:N2.Configuration.PatternValueElement">
            <summary>
            Defines a replacment pattern for the name editor.
            </summary>
        </member>
        <member name="P:N2.Configuration.PatternValueElement.Name">
            <summary>The name used to reference this element.</summary>
        </member>
        <member name="P:N2.Configuration.PatternValueElement.Pattern">
            <summary>A regular expression pattern used match replacements. This pattern should work both server and client side.</summary>
        </member>
        <member name="P:N2.Configuration.PatternValueElement.Value">
            <summary>The string to replace the pattern with.</summary>
        </member>
        <member name="P:N2.Configuration.PatternValueElement.ServerValidate">
            <summary>Validate on the server side that the pattern is not present in the name.</summary>
        </member>
        <member name="T:N2.Configuration.PatternValueCollection">
            <summary>
            A collection of pattern replacements for the name editor.
            </summary>
        </member>
        <member name="T:N2.Configuration.PluginInitializerCollection">
            <summary>
            A configurable collection of plugin initializers.
            </summary>
        </member>
        <member name="T:N2.Configuration.RewriteMethod">
            <summary>
            Represents a way to map a friendly url to a template.
            </summary>
        </member>
        <member name="F:N2.Configuration.RewriteMethod.None">
            <summary>Do not rewrite the request. Someone else should pick it up and do something about it.</summary>
        </member>
        <member name="F:N2.Configuration.RewriteMethod.BeginRequest">
            <summary>The pre 2.1 behavior. Rewrite at begin request.</summary>
            <remarks>When using this approach the return-url when using authorization and login-page will be the rewritten url.</remarks>
        </member>
        <member name="F:N2.Configuration.RewriteMethod.SurroundMapRequestHandler">
            <summary>Rewrites to page handler at PostResolveRequestCache and back again at PostMapRequestHandler.</summary>
            <remarks>While this approach allows for friendly return-url in authorization scenarios the drawback is that the aspx handler cannot be authenticated. So beware of authenticating the template.</remarks>
        </member>
        <member name="T:N2.Configuration.DatabaseSection">
            <summary>
            Database configuration section for nhibernate database connection.
            </summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.Caching">
            <summary>Whether cacheing should be enabled.</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.TryLocatingHbmResources">
            <summary>Whether cacheing should be enabled.</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.CacheProviderClass">
            <summary>The nhibernate cache provider class to use.</summary>
            <remarks>
            Other cache providers:
            NHibernate.Cache.NoCacheProvider, NHibernate
            NHibernate.Caches.SysCache2.SysCacheProvider,NHibernate.Caches.SysCache2
            </remarks>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.ConnectionStringName">
            <summary>The connection string to pick among the connection strings in the connectionStrings section.</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.TablePrefix">
            <summary>The prefix used for tables in this site. This can be used to install multiple installations in the same database.</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.ChildrenLaziness">
            <summary>The type of nhibernate laziness to use. Supported values are "true", "false", and "extra".</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.BatchSize">
            <summary>NHibernate option for database query batching.</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.Flavour">
            <summary>The database flavour decides which propertes the nhibernate configuration will receive.</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.HibernateMapping">
            <summary>The resource name and assembly of the base nhibernate mapping file, e.g. "N2.Mappings.Default.hbm.xml, N2"</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.HibernateProperties">
            <summary>Additional nhibernate properties applied after the default flavour-based configuration.</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.Mappings">
            <summary>NHibernate mappings added in addition to the hibernateMapping.</summary>
        </member>
        <member name="P:N2.Configuration.DatabaseSection.Search">
            <summary>Search configuration.</summary>
        </member>
        <member name="T:N2.Configuration.EditSection">
            <summary>
            Configuration related to the edit interface.
            </summary>
        </member>
        <member name="P:N2.Configuration.EditSection.Editors">
            <summary>Users and roles considered editors.</summary>
        </member>
        <member name="P:N2.Configuration.EditSection.Administrators">
            <summary>Users and roles considered administrators.</summary>
        </member>
        <member name="P:N2.Configuration.EditSection.Writers">
            <summary>Users and roles considered writers.</summary>
        </member>
        <member name="P:N2.Configuration.EditSection.EditTheme">
            <summary>
            The ASP.NET Theme to use for the Edit directory
            </summary>
        </member>
        <member name="P:N2.Configuration.EditSection.DefaultDirectory">
            <summary>Configuration about default directories, used to find default directory for a page.</summary>
        </member>
        <member name="P:N2.Configuration.EditSection.Versions">
            <summary>Configuration about versioning.</summary>
        </member>
        <member name="P:N2.Configuration.EditSection.Images">
            <summary>Configuration about images.</summary>
        </member>
        <member name="P:N2.Configuration.EditSection.Membership">
            <summary>Configuration about membership.</summary>
        </member>
        <member name="P:N2.Configuration.EditSection.Externals">
            <summary>Configuration about external items.</summary>
        </member>
        <member name="T:N2.Configuration.ErrorsElement">
            <summary>
            Configuration related to errors handling and reporting.
            </summary>
        </member>
        <member name="P:N2.Configuration.ErrorsElement.HandleWrongClassException">
            <summary>A negative value is treated as unlimited number of errors.</summary>
        </member>
        <member name="P:N2.Configuration.ErrorsElement.MaxErrorReportsPerHour">
            <summary>A negative value is treated as unlimited number of errors.</summary>
        </member>
        <member name="T:N2.Configuration.HostSection">
            <summary>
            Section configuring host settings such as root, and start node ids and 
            multiple sites.
            </summary>
        </member>
        <member name="P:N2.Configuration.HostSection.MultipleSites">
            <summary>Enable multiple sites functionality.</summary>
        </member>
        <member name="P:N2.Configuration.HostSection.DynamicSites">
            <summary>Examine content nodes to find items that are site providers.</summary>
        </member>
        <member name="P:N2.Configuration.HostSection.Wildcards">
            <summary>Use wildcard matching for hostnames, e.g. both n2cms.com and www.n2cms.com.</summary>
        </member>
        <member name="P:N2.Configuration.HostSection.OutputCache">
            <summary>Configures output cache for the templates.</summary>
        </member>
        <member name="P:N2.Configuration.HostSection.Resources">
            <summary>Web resource related config options.</summary>
        </member>
        <member name="P:N2.Configuration.HostSection.Vpp">
            <summary>Virtual path provider related config options.</summary>
        </member>
        <member name="P:N2.Configuration.InstallerElement.CheckInstallationStatus">
            <summary>When set to true this setting will cause the database connection to be verified upon startup. If the database connection is down the first user is redirected to an installation screen.</summary>
        </member>
        <member name="P:N2.Configuration.InstallerElement.AllowInstallation">
            <summary>When set to false this option disallows usage of the potentially dangerous interfaces located below /n2/installation/.</summary>
        </member>
        <member name="T:N2.Configuration.EngineSection">
            <summary>
            Configuration related to inversion of control and the dynamic aspects 
            of n2 definition.
            </summary>
        </member>
        <member name="P:N2.Configuration.EngineSection.EngineType">
            <summary>A custom <see cref="T:N2.Engine.IEngine"/> to manage the application instead of the default.</summary>
        </member>
        <member name="P:N2.Configuration.EngineSection.DynamicDiscovery">
            <summary>In addition to configured assemblies examine and load assemblies in the bin directory.</summary>
        </member>
        <member name="P:N2.Configuration.EngineSection.Assemblies">
            <summary>Additional assemblies assemblies investigated while investigating the environemnt, e.g. to find item definitions.</summary>
        </member>
        <member name="P:N2.Configuration.EngineSection.Scheduler">
            <summary>Scheduler related configuration.</summary>
        </member>
        <member name="P:N2.Configuration.EngineSection.Components">
            <summary>A collection of services that are registered in the container before the default ones. This is a place through which core services can be replaced.</summary>
        </member>
        <member name="P:N2.Configuration.EngineSection.ComponentConfigurations">
            <summary>Component configuration keys used register further services.</summary>
        </member>
        <member name="P:N2.Configuration.EngineSection.PluginInitializers">
            <summary>Add or remove plugin initializers. This is most commonly used to remove automatic plugin initializers in an external assembly.</summary>
        </member>
        <member name="P:N2.Configuration.EngineSection.InterfacePlugins">
            <summary>Add or remove UI plugins. This is most commonly used to remove unwanted toolbar buttons.</summary>
        </member>
        <member name="P:N2.Configuration.EngineSection.Definitions">
            <summary>Add or remove item definitions. This is most commonly used to prevent unwanted item definitions appearing.</summary>
        </member>
        <member name="T:N2.Configuration.ComponentCollection">
            <summary>
            Services to register instead of/in addition to existing N2 services.
            </summary>
        </member>
        <member name="T:N2.Configuration.ComponentElement">
            <summary>
            A service definition to add to the N2 container. This can be used to replace core services.
            </summary>
        </member>
        <member name="P:N2.Configuration.ComponentElement.Key">
            <summary>Optional name of the component</summary>
        </member>
        <member name="P:N2.Configuration.ComponentElement.Service">
            <summary>Class and name and assembly of the service interface, e.g. "MyNamespace.MyInterface, MyAssembly"</summary>
        </member>
        <member name="P:N2.Configuration.ComponentElement.Implementation">
            <summary>Class and name and assembly of the implementation to add, e.g. "MyNamespace.MyClass, MyAssembly". If no service is defined the class itself will represent the service.</summary>
        </member>
        <member name="P:N2.Configuration.ComponentElement.Parameters">
            <summary>A collection of properties (eg configuration values) that should be registered with the service and used for its instantiation</summary>
        </member>
        <member name="P:N2.Configuration.SiteElement.RootID">
            <summary>Optional configuration. When set this features allows multiple sites to coexist in the same database.</summary>
        </member>
        <member name="P:N2.Configuration.SiteElement.Wildcards">
            <summary>Use wildcard matching for this hostname, e.g. both n2cms.com and www.n2cms.com.</summary>
        </member>
        <member name="P:N2.Configuration.SiteElement.Settings">
            <summary>Per site settings passed on to the site object.</summary>
        </member>
        <member name="P:N2.Configuration.SiteElement.UploadFolders">
            <summary>Upload folders to use in addition to those specified in the edit section. To use site specific folders only you can put a &lt;clear/&gt; in edit/uploadFolders.</summary>
        </member>
        <member name="T:N2.Configuration.TinyMCEElement">
            <summary>
            Configuration related to the free text area included with the CMS.
            </summary>
        </member>
        <member name="P:N2.Configuration.TinyMCEElement.Enabled">
            <summary>Set enabled to false to disable the tinyMCE free text editor.</summary>
        </member>
        <member name="P:N2.Configuration.TinyMCEElement.Settings">
            <summary>TinyMCE configuration settings. Any configuration setting defined here will take precedence over the default configuration. Please visit http://wiki.moxiecode.com/index.php/TinyMCE:Configuration for configuration options.</summary>
        </member>
        <member name="P:N2.Configuration.TinyMCEElement.CssUrl">
            <summary>Url to the free text area editor css file.</summary>
        </member>
        <member name="P:N2.Configuration.TinyMCEElement.ScriptUrl">
            <summary>Url to the free text area editor configuration script file.</summary>
        </member>
        <member name="T:N2.Configuration.UrlElement">
            <summary>
            Configuration related to managementUrls and url parsing.
            </summary>
        </member>
        <member name="P:N2.Configuration.UrlElement.EnableCaching">
            <summary>Cache where appropriate to increase performance..</summary>
        </member>
        <member name="T:N2.Configuration.WebElement">
            <summary>
            Configuration related to integration with ASP.NET and managementUrls.
            </summary>
        </member>
        <member name="P:N2.Configuration.WebElement.Extension">
            <summary>The default extension used by the url parser.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.PageQueryKey">
            <summary>The query string key used to identify the page.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.ItemQueryKey">
            <summary>The query string key used to identify the item.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.PartQueryKey">
            <summary>The query string key used to identify the part.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.ObserveEmptyExtension">
            <summary>Look for a content page when the requested resource has no extension.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.ObserveAllExtensions">
            <summary>Look for a content page when the requested resource has an unknown extension.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.ObservedExtensions">
            <summary>Additional extensions observed by the rewriter.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.IsWeb">
            <summary>Whether the current application is running in a web context. This affects how database sessions are stored during a request.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.Rewrite">
            <summary>Enables rewriting of requests to the page handler of a certain content item.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.IgnoreExistingFiles">
            <summary>Tells the rewriter whether it should rewrite when the url matches an existing file. By default N2 doesn't rewrite when the file exists.</summary>
        </member>
        <member name="P:N2.Configuration.WebElement.Urls">
            <summary>Configuration related to managementUrls and url parsing.</summary>
        </member>
        <member name="T:N2.Definitions.AttributeExplorer">
            <summary>
            Finds uniquely named attributes on a type. Attributes defined on the 
            class must have their name attribute set, and attributes defined on a
            property their name set to the property's name.
            </summary>
        </member>
        <member name="M:N2.Definitions.AttributeExplorer.Find``1(System.Type)">
            <summary>
            Finds attributes on a type.
            </summary>
            <typeparam name="T">The type of attribute to find.</typeparam>
            <param name="typeToExplore">The type to explore</param>
            <returns>A list of attributes defined on the class or it's properties.</returns>
        </member>
        <member name="M:N2.Definitions.AttributeExplorer.Map``1(System.Type)">
            <summary>
            Maps properties on the class and it's properties to a dictionary.
            </summary>
            <typeparam name="T">The type of attribute to find.</typeparam>
            <param name="typeToExplore">The type to explore.</param>
            <returns>A dictionary of atributes.</returns>
        </member>
        <member name="T:N2.Definitions.Static.DefinitionBuilder">
            <summary>
            Inspects available types in the AppDomain and builds item definitions.
            </summary>
        </member>
        <member name="M:N2.Definitions.Static.DefinitionBuilder.GetDefinitions">
            <summary>Builds item definitions in the current environment.</summary>
            <returns>A dictionary of item definitions in the current environment.</returns>
        </member>
        <member name="M:N2.Definitions.Static.DefinitionBuilder.FindConcreteTypes">
            <summary>Enumerates concrete item types provided by the type finder.</summary>
            <returns>An enumeration of types derived from <see cref="T:N2.ContentItem"/>.</returns>
        </member>
        <member name="T:N2.Definitions.DefinitionManager">
            <summary>
            Stores item definitions and constructs new items.
            </summary>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.CreateInstance``1(N2.ContentItem)">
            <summary>Creates an instance of a certain type of item. It's good practice to create new items through this method so the item's dependencies can be injected by the engine.</summary>
            <returns>A new instance of an item.</returns>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.CreateInstance(System.Type,N2.ContentItem)">
            <summary>Creates an instance of a certain type of item. It's good practice to create new items through this method so the item's dependencies can be injected by the engine.</summary>
            <returns>A new instance of an item.</returns>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.GetDefinition(System.Type)">
            <summary>Gets the definition for a certain item type.</summary>
            <param name="itemType">The type of item whose definition we want.</param>
            <returns>The definition matching a certain item type.</returns>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.GetDefinition(System.String)">
            <summary>Gets item definition for a certain discriminator.</summary>
            <param name="discriminator">The discriminator/name that uniquely identifies a certain type.</param>
            <returns>The definition matching the string.</returns>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.GetDefinition(N2.ContentItem)">
            <summary>Gets the definition for a certain item.</summary>
            <param name="item">The item whose definition we want.</param>
            <returns>The definition matching a certain item.</returns>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.GetDefinitions">
            <summary>Gets all item definitions.</summary>
            <returns>A collection of item definitoins.</returns>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.GetAllowedChildren(N2.ContentItem)">
            <summary>Gets child types allowed below a certain item and zone.</summary>
            <param name="parentItem">The parent item whose allowed children to get.</param>
            <returns>A list of definitions allowed by the given criterias.</returns>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.GetAllowedChildren(N2.ContentItem,System.String)">
            <summary>Gets child types allowed below a certain item and zone.</summary>
            <param name="parentItem">The parent item whose allowed children to get.</param>
            <param name="zoneName">The zone name.</param>
            <returns>A list of definitions allowed by the given criterias.</returns>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.GetAllowedChildren(N2.ContentItem,System.String,System.Security.Principal.IPrincipal)">
            <summary>Gets items allowed below this item in a certain zone.</summary>
            <param name="parentItem">The parent whose allowed children to get.</param>
            <param name="zoneName">The zone whose allowed child item types to get.</param>
            <param name="user">The user whose access to query.</param>
            <returns>A list of items allowed in the zone the user is authorized to create.</returns>
        </member>
        <member name="M:N2.Definitions.DefinitionManager.GetAllowedChildren(N2.Definitions.ItemDefinition,System.String,System.Security.Principal.IPrincipal)">
            <summary>Gets items allowed below this item in a certain zone.</summary>
            <param name="parentItem">The parent whose allowed children to get.</param>
            <param name="zoneName">The zone whose allowed child item types to get.</param>
            <param name="user">The user whose access to query.</param>
            <returns>A list of items allowed in the zone the user is authorized to create.</returns>
        </member>
        <member name="E:N2.Definitions.DefinitionManager.ItemCreated">
            <summary>Notifies subscriber that an item was created through a <see cref="M:N2.Definitions.DefinitionManager.CreateInstance(System.Type,N2.ContentItem)"/> method.</summary>
        </member>
        <member name="T:N2.Definitions.DisableAttribute">
            <summary>
            Disables a definition removing it from lists when choosing new items. 
            Existing items will not be affaceted.
            </summary>
        </member>
        <member name="T:N2.Definitions.IDefinitionRefiner">
            <summary>
            Attributes implementing this interface can alter item definitions while
            they are beeing initiated.
            </summary>
        </member>
        <member name="T:N2.Definitions.IPart">
            <summary>
            Marker interface used to denote parts. This interface allows collaboration
            between modules that doesn't know about each other.
            </summary>
        </member>
        <member name="T:N2.Definitions.IStartPage">
            <summary>
            Marks a content item considered to be a start page. This interface can 
            be used for allowed parent/child relationships.
            </summary>
        </member>
        <member name="T:N2.Definitions.IStructuralPage">
            <summary>
            Interface used to denote pages that can have children. This interface 
            allows collaboration between modules that doesn't know about each other. 
            Classes implementing this interface are eligeble for having child pages.
            </summary>
        </member>
        <member name="T:N2.Definitions.SortBy">
            <summary>
            The order children are sorted.
            </summary>
        </member>
        <member name="F:N2.Definitions.SortBy.Title">
            <summary>Children are re-ordered by title in alphabetical ascending order.</summary>
        </member>
        <member name="F:N2.Definitions.SortBy.Published">
            <summary>Children are re-ordered by published date in ascending order.</summary>
        </member>
        <member name="F:N2.Definitions.SortBy.Updated">
            <summary>Children are re-ordered by changed date in ascending order.</summary>
        </member>
        <member name="F:N2.Definitions.SortBy.PublishedDescending">
            <summary>Children are re-ordered by published date in descending order.</summary>
        </member>
        <member name="F:N2.Definitions.SortBy.UpdatedDescending">
            <summary>Children are re-ordered by changed date in descending order.</summary>
        </member>
        <member name="F:N2.Definitions.SortBy.Expression">
            <summary>Children are re-ordered by an expression, e.g. "Title DESC".</summary>
        </member>
        <member name="F:N2.Definitions.SortBy.CurrentOrder">
            <summary>Children are given an ascending sort index in the order they appear in the children collection. This typically means new children are appended last.</summary>
        </member>
        <member name="F:N2.Definitions.SortBy.Unordered">
            <summary>Do not reorder children, children appears in sort order but this order is not altered. This can improve performance with large numbers of children.</summary>
        </member>
        <member name="T:N2.Definitions.SortChildrenAttribute">
            <summary>
            Controls the order of children added to items decorated with this attribute.
            </summary>
        </member>
        <member name="M:N2.Definitions.SortChildrenAttribute.ReorderChildren(N2.ContentItem)">
            <summary>Reorders children according to OrderBy.</summary>
            <param name="item">The item whose children to re-order.</param>
            <returns>Items that were changed in the process of ordering. These items needs to be saved for the order to be persisted.</returns>
        </member>
        <member name="P:N2.Definitions.SortChildrenAttribute.OrderBy">
            <summary>The order to apply to children.</summary>
        </member>
        <member name="P:N2.Definitions.SortChildrenAttribute.SortExpression">
            <summary>An expression used to sort children when order by <see cref="F:N2.Definitions.SortBy.Expression"/> is defined.</summary>
        </member>
        <member name="T:N2.Definitions.RefineOrder">
            <summary>
            Sort orders used by <see cref="T:N2.Definitions.ISortableRefiner"/>.
            </summary>
        </member>
        <member name="T:N2.Definitions.RemoveEditableAttribute">
            <summary>
            Removes details from a content item. This can be used to modify editables on 
            external components whose code you don't control.
            </summary>
            <example>
            // the attribute can be added to an assembly...
            [assembly:N2.Definitions.RemoveEditable("Title", typeof(SomeItemInLibraryCode))]
            
            // or to the content item inheriting an external item
            [RemoveEditable("Title")]
            public class MyItem : ExternalItem
            {
            }
            </example>
        </member>
        <member name="P:N2.Definitions.RemoveEditableAttribute.Name">
            <summary>The name of the detail to remove.</summary>
        </member>
        <member name="P:N2.Definitions.RemoveEditableAttribute.AffectedType">
            <summary>The type of item to remove details from.</summary>
        </member>
        <member name="T:N2.Definitions.RemoveDefinitionsAttribute">
            <summary>
            Disables an item definition. Can be used to create a better 
            implementation of a definition in an existing solution.
            </summary>
            <remarks>
            This attribute now may remove definitions or just disable them 
            depending on the ReplacementMode property.
            </remarks>
        </member>
        <member name="P:N2.Definitions.RemoveDefinitionsAttribute.ReplacementMode">
            <summary>
            Instructs the definition builder what to do with the removed 
            definitions.
            </summary>
        </member>
        <member name="T:N2.Definitions.DefinitionReplacementMode">
            <summary>
            Hints whether the definition should be removed or just disabled. Removing 
            it might cause error if there is already created items, e.g. lying around
            in the trash but allows for replacing the definition with a new one
            that overrides already created items (they need to use the same discriminator).
            </summary>
        </member>
        <member name="T:N2.Definitions.AllowInTrash">
            <summary>
            Whether an item can be stored in the trash can. Default is Yes.
            </summary>
        </member>
        <member name="T:N2.Definitions.ThrowableAttribute">
            <summary>
            When used on an item definition this attribute can prevent it from beeing 
            moved to trash upon deletion.
            </summary>
        </member>
        <member name="T:N2.Definitions.AllowVersions">
            <summary>
            Whether versions are allowed.
            </summary>
        </member>
        <member name="T:N2.Definitions.VersionableAttribute">
            <summary>
            When used to decorate a content class this attribute can tell the edit 
            manager not to store versions of items of that class.
            </summary>
        </member>
        <member name="T:N2.Details.EditableDateAttribute">
            <summary>
            Defines an editable date/time picker control for a content item.
            </summary>
        </member>
        <member name="P:N2.Details.EditableDateAttribute.ShowTime">
            <summary>Set to false to hide time box.</summary>
        </member>
        <member name="P:N2.Details.EditableDateAttribute.ShowDate">
            <summary>Set to false to hide date box.</summary>
        </member>
        <member name="T:N2.Details.EditableEnumAttribute">
            <summary>
            Adds a drop down for editing values in an enum attribute.
            </summary>
            <remarks>
            Depending on the property type the values will be stored as enum, integer or string.
            </remarks>
        </member>
        <member name="P:N2.Details.EditableEnumAttribute.EnumType">
            <summary>The type of enum listed by this editor.</summary>
        </member>
        <member name="T:N2.Details.EditableThemeSelectionAttribute">
            <summary>
            Allows the selection of themes.
            </summary>
        </member>
        <member name="P:N2.Details.EditableThemeSelectionAttribute.EnablePreview">
            <summary>Show a preview theme link next to the drop down.</summary>
        </member>
        <member name="T:N2.Details.RelativityMode">
            <summary>
            Tells the system when to make managementUrls in a detail relative or absolute.
            </summary>
        </member>
        <member name="T:N2.Details.WithEditableDateRangeAttribute">
            <summary>
            Decorates the content item with a date range editable that will update two date fields.
            </summary>
        </member>
        <member name="P:N2.Details.WithEditableDateRangeAttribute.NameEndRange">
            <summary>End of range detail (property) on the content item's object</summary>
        </member>
        <member name="P:N2.Details.WithEditableDateRangeAttribute.BetweenText">
            <summary>Gets or sets a text displayed between the date fields.</summary>
        </member>
        <member name="T:N2.Edit.ContainerRepository`1">
            <summary>
            Gets and creates a container for management items.
            </summary>
        </member>
        <member name="M:N2.Edit.ContainerRepository`1.#ctor(N2.Persistence.IPersister,N2.Persistence.Finder.IItemFinder,N2.Web.IHost,N2.Persistence.ContentActivator)">
            <summary>Stores dependencies</summary>
            <param name="finder"></param>
            <param name="persister"></param>
            <param name="activator"></param>
        </member>
        <member name="M:N2.Edit.ContainerRepository`1.GetBelowStart">
            <summary>Gets a container below the start page or null if no container exists.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Edit.ContainerRepository`1.GetBelowRoot">
            <summary>Gets a container below the root page or null if no container exists.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Edit.ContainerRepository`1.GetOrCreateBelowStart(System.Action{`0})">
            <summary>Gets a container below the start page and creates it if no container exists.</summary>
            <param name="setupCreatedItem"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Edit.ContainerRepository`1.GetOrCreateBelowRoot(System.Action{`0})">
            <summary>Gets a container below the root page and creates it if no container exists.</summary>
            <param name="setupCreatedItem"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Edit.ContainerRepository`1.Get(N2.ContentItem)">
            <summary>Gets a container or null if no container exists.</summary>
            <param name="containerContainer"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Edit.ContainerRepository`1.GetOrCreate(N2.ContentItem,System.Action{`0})">
            <summary>Gets or creates a container.</summary>
            <param name="containerContainer"></param>
            <param name="setupCreatedItem"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Edit.ContainerRepository`1.Create(N2.ContentItem,System.Action{`0})">
            <summary>Creates a container.</summary>
            <param name="containerContainer"></param>
            <param name="setupCreatedItem"></param>
            <returns></returns>
        </member>
        <member name="P:N2.Edit.ContainerRepository`1.Navigate">
            <summary>Instructs this class to navigate the content hierarchy rather than query for items.</summary>
        </member>
        <member name="T:N2.Definitions.TemplateDefinition">
            <summary>
            Describes a template for content
            </summary>
        </member>
        <member name="P:N2.Definitions.TemplateDefinition.Name">
            <summary>The name is used to refernce this template.</summary>
        </member>
        <member name="P:N2.Definitions.TemplateDefinition.Title">
            <summary>Short description of the template.</summary>
        </member>
        <member name="P:N2.Definitions.TemplateDefinition.Description">
            <summary>Longer description of the template.</summary>
        </member>
        <member name="P:N2.Definitions.TemplateDefinition.TemplateUrl">
            <summary>The url where the template can be observed.</summary>
        </member>
        <member name="P:N2.Definitions.TemplateDefinition.Template">
            <summary>A copy of the template.</summary>
        </member>
        <member name="P:N2.Definitions.TemplateDefinition.Original">
            <summary>The original template.</summary>
        </member>
        <member name="P:N2.Definitions.TemplateDefinition.Definition">
            <summary>The item definition of the template.</summary>
        </member>
        <member name="P:N2.Definitions.TemplateDefinition.ReplaceDefault">
            <summary>Replace the defualt template.</summary>
        </member>
        <member name="T:N2.Engine.AttributeInfo`1">
            <summary>
            Maps an attribute to the type it decorates.
            </summary>
            <typeparam name="T">The type of attribute.</typeparam>
        </member>
        <member name="P:N2.Engine.AttributeInfo`1.Attribute">
            <summary>An attribute retrieved from a type descriptor.</summary>
        </member>
        <member name="P:N2.Engine.AttributeInfo`1.DecoratedType">
            <summary>The particular type the attribute was describing.</summary>
        </member>
        <member name="T:N2.Edit.FileEventArgs">
            <summary>
            Conveys information about files and directories.
            </summary>
        </member>
        <member name="P:N2.Edit.FileEventArgs.VirtualPath">
            <summary>The current path of the file or directory.</summary>
        </member>
        <member name="P:N2.Edit.FileEventArgs.SourcePath">
            <summary>The source path of the file or directory.</summary>
        </member>
        <member name="T:N2.Edit.FileSystem.MappedFileSystem">
            <summary>
            Uses HttpContext.Current and System.IO to operate files.
            </summary>
        </member>
        <member name="T:N2.Edit.FileSystem.IFileSystem">
            <summary>
            Abstracts operations against binary files.
            </summary>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.GetFiles(System.String)">
            <summary>Gets files in directory.</summary>
            <param name="parentVirtualPath">The path to the directory.</param>
            <returns>An enumerations of files in the directory.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.GetFile(System.String)">
            <summary>Gets file data.</summary>
            <param name="virtualPath">The path to the file.</param>
            <returns>A file data object.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.GetDirectories(System.String)">
            <summary>Gets directories of a directory.</summary>
            <param name="parentVirtualPath">The path to the directory whose child directories to get.</param>
            <returns>An enumeration of directories.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.GetDirectory(System.String)">
            <summary>Gets a directory data.</summary>
            <param name="virtualPath">The path of the directory to get.</param>
            <returns>A directory data object.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.FileExists(System.String)">
            <summary>Checks if a file exists.</summary>
            <param name="virtualPath">The path of the file to check.</param>
            <returns>True if the file exists in the file system.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.MoveFile(System.String,System.String)">
            <summary>Moves a file to a new location.</summary>
            <param name="fromVirtualPath">The file path where the file is located.</param>
            <param name="destinationVirtualPath">The path the file should assume after beeing moved.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.DeleteFile(System.String)">
            <summary>Delets a file from the file system.</summary>
            <param name="virtualPath">The path of the file to delete.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.CopyFile(System.String,System.String)">
            <summary>Copies a file.</summary>
            <param name="fromVirtualPath">The path where the file is located.</param>
            <param name="destinationVirtualPath">The path the copy should assume when.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.OpenFile(System.String)">
            <summary>Opens a read-write file stream to a file.</summary>
            <param name="virtualPath">The path where the file is located.</param>
            <returns>A file stream.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.WriteFile(System.String,System.IO.Stream)">
            <summary>Creates or overwrites a file at the given path.</summary>
            <param name="virtualPath">The path of the file to create.</param>
            <param name="inputStream">An input stream of the file contents.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.ReadFileContents(System.String,System.IO.Stream)">
            <summary>Read file contents to a stream.</summary>
            <param name="virtualPath">The path of the file to read.</param>
            <param name="outputStream">The stream to which the file contents should be written.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.DirectoryExists(System.String)">
            <summary>Checks the existence of a directory.</summary>
            <param name="virtualPath">The directory to check.</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.MoveDirectory(System.String,System.String)">
            <summary>Moves a directory.</summary>
            <param name="fromVirtualPath">The original directory path.</param>
            <param name="destinationVirtualPath">The path the directory should assume after beeing moved.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.DeleteDirectory(System.String)">
            <summary>Deletes a directory including all files and sub-directories.</summary>
            <param name="virtualPath">The path of the directory to remove.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.IFileSystem.CreateDirectory(System.String)">
            <summary>Creates a directory.</summary>
            <param name="virtualPath">The directory path to create.</param>
        </member>
        <member name="T:N2.Edit.IContentBinder">
            <summary>
            Binds values between a content item and it's interface.
            </summary>
        </member>
        <member name="T:N2.Edit.INodeProvider">
            <summary>
            Provides virtual nodes for the management interface.
            </summary>
        </member>
        <member name="M:N2.Edit.INodeProvider.Get(System.String)">
            <summary>Gets the content item associated with a path.</summary>
            <param name="path">The path corresponding to a node.</param>
            <returns>The item or null if not a matching path.</returns>
        </member>
        <member name="M:N2.Edit.INodeProvider.GetChildren(System.String)">
            <summary>Gets children associated with a parent path.</summary>
            <param name="path">The parent path of the provided nodes.</param>
            <returns>A list of nodes below the given path.</returns>
        </member>
        <member name="T:N2.Edit.Installation.DatabaseStatus">
            <summary>
            Summarizes database status.
            </summary>
        </member>
        <member name="P:N2.Edit.Installation.DatabaseStatus.DatabaseVersion">
            <summary>
            Known database versions:
            0: no tables
            1: N2 uptil 1.5
            2: N2 uptil 2.0b2
            3: N2 from 2.0
            4: N2 from 2.2
            </summary>
        </member>
        <member name="T:N2.Edit.Installation.InstallationManager">
            <summary>
            Wraps functionality to request database status and generate n2's 
            database schema on multiple database flavours.
            </summary>
        </member>
        <member name="M:N2.Edit.Installation.InstallationManager.Install">
            <summary>Executes sql create database scripts.</summary>
        </member>
        <member name="M:N2.Edit.Installation.InstallationManager.CheckDatabase">
            <summary>Method that will checks the database. If something goes wrong an exception is thrown.</summary>
            <returns>A string with diagnostic information about the database.</returns>
        </member>
        <member name="M:N2.Edit.Installation.InstallationManager.CheckRootItem">
            <summary>Checks the root node in the database. Throws an exception if there is something really wrong with it.</summary>
            <returns>A diagnostic string about the root node.</returns>
        </member>
        <member name="M:N2.Edit.Installation.InstallationManager.CheckStartPage">
            <summary>Checks the root node in the database. Throws an exception if there is something really wrong with it.</summary>
            <returns>A diagnostic string about the root node.</returns>
        </member>
        <member name="M:N2.Edit.Installation.InstallationManager.GetStartDefinitions(System.Collections.Generic.IEnumerable{N2.Definitions.ItemDefinition})">
            <summary>Gets definitions suitable as start pages.</summary>
            <returns>An enumeration of item definitions.</returns>
        </member>
        <member name="M:N2.Edit.Installation.InstallationManager.GetRootDefinitions(System.Collections.Generic.IEnumerable{N2.Definitions.ItemDefinition})">
            <summary>Gets definitions suitable as root nodes.</summary>
            <returns>An enumeration of item definitions.</returns>
        </member>
        <member name="M:N2.Edit.Installation.InstallationManager.GetRootAndStartDefinitions(System.Collections.Generic.IEnumerable{N2.Definitions.ItemDefinition})">
            <summary>Gets definitions suitable as start pages and root node.</summary>
            <returns>An enumeration of item definitions.</returns>
        </member>
        <member name="M:N2.Edit.Installation.InstallationManager.Is(N2.Installation.InstallerHint,N2.Installation.InstallerHint)">
            <summary>Checks installer hint bit flags.</summary>
            <param name="flags">The defined flags.</param>
            <param name="expected">The expected flags.</param>
            <returns>True if the defined contains the expected.</returns>
        </member>
        <member name="T:N2.Installation.InstallerHint">
            <summary>
            Hint for the installer how to treat a certain item definition.
            </summary>
        </member>
        <member name="F:N2.Installation.InstallerHint.Default">
            <summary>May be either start or root page unless another item is preferred as start or root page.</summary>
        </member>
        <member name="F:N2.Installation.InstallerHint.PreferredRootPage">
            <summary>Is prefereed as root page by the installer.</summary>
        </member>
        <member name="F:N2.Installation.InstallerHint.PreferredStartPage">
            <summary>Is prefereed as start page by the installer.</summary>
        </member>
        <member name="F:N2.Installation.InstallerHint.NeverRootPage">
            <summary>Will never be placed as root page by the installer.</summary>
        </member>
        <member name="F:N2.Installation.InstallerHint.NeverStartPage">
            <summary>Will never be placed as start page by the installer.</summary>
        </member>
        <member name="F:N2.Installation.InstallerHint.NeverRootOrStartPage">
            <summary>Will never be placed as start or root page by the installer.</summary>
        </member>
        <member name="T:N2.Engine.AbstractContentAdapter">
            <summary>
            Convenience base class for content adapters. One instance 
            of the inheriting class is created per request upon usage.
            </summary>
        </member>
        <member name="P:N2.Engine.AbstractContentAdapter.Path">
            <summary>The path associated with this controller instance.</summary>
        </member>
        <member name="P:N2.Engine.AbstractContentAdapter.AdaptedType">
            <summary>The type adapted by this adapter instance.</summary>
        </member>
        <member name="P:N2.Engine.AbstractContentAdapter.Engine">
            <summary>The content engine requesting external control.</summary>
        </member>
        <member name="M:N2.Edit.NodeAdapter.GetChildren(N2.ContentItem,System.String)">
            <summary>Gets the children of the given item for the given user interface.</summary>
            <param name="parent">The item whose children to get.</param>
            <param name="userInterface">The interface where the children are displayed.</param>
            <returns>An enumeration of the children.</returns>
        </member>
        <member name="M:N2.Edit.NodeAdapter.HasChildren(N2.ContentItem,N2.Collections.ItemFilter)">
            <summary>Returns true when an item has children.</summary>
            <param name="filter">The filter to apply.</param>
            <param name="parent">The item whose childrens existence is to be determined.</param>
            <returns>True when there are children.</returns>
        </member>
        <member name="M:N2.Edit.NodeAdapter.GetPreviewUrl(N2.ContentItem)">
            <summary>Gets the url used from the management UI when previewing an item.</summary>
            <param name="item">The item to preview.</param>
            <returns>An url to preview the item.</returns>
        </member>
        <member name="M:N2.Edit.NodeAdapter.GetIconUrl(N2.ContentItem)">
            <summary>Gets the url to the icon representing this item.</summary>
            <param name="item">The item whose icon to get.</param>
            <returns>An url to an icon.</returns>
        </member>
        <member name="M:N2.Edit.NodeAdapter.GetMaximumPermission(N2.ContentItem)">
            <summary>Gets the permissions for the logged in user towards an item.</summary>
            <param name="item">The item for which permissions should be retrieved.</param>
            <returns>A permission flag.</returns>
        </member>
        <member name="T:N2.Edit.NodeFactoryDelegate">
            <summary>Represents a method that creates a content item based on a path.</summary>
            <param name="path">The relative path to resolve</param>
            <returns>The content item at the given path or null.</returns>
        </member>
        <member name="T:N2.Edit.Workflow.CommandBase`1">
            <summary>
            Base class for commands used by <see cref="T:N2.Edit.Workflow.CommandDispatcher"/>.
            </summary>
            <typeparam name="T">The type of context to process.</typeparam>
        </member>
        <member name="T:N2.Edit.Workflow.CommandDispatcher">
            <summary>
            Encapsulates the execution of commands used to modify the state of content items.
            </summary>
        </member>
        <member name="M:N2.Edit.Workflow.CommandDispatcher.Execute(N2.Edit.Workflow.CommandBase{N2.Edit.Workflow.CommandContext},N2.Edit.Workflow.CommandContext)">
            <summary>Executes the supplied command</summary>
            <param name="command">The command to execute.</param>
            <param name="context">The context passed to the command</param>
        </member>
        <member name="M:N2.Edit.Workflow.CommandDispatcher.Publish(N2.Edit.Workflow.CommandContext)">
            <summary>Publishes the data specified by the provided context.</summary>
            <param name="context">Contains data and information used to for publishing an item.</param>
        </member>
        <member name="M:N2.Edit.Workflow.CommandDispatcher.Save(N2.Edit.Workflow.CommandContext)">
            <summary>Saves the data specified by the provided context.</summary>
            <param name="context">Contains data and information used to for saving an item.</param>
        </member>
        <member name="T:N2.Edit.Workflow.CommandFactory">
            <summary>
            Provides and executies commands used to change the state of content items.
            </summary>
        </member>
        <member name="T:N2.Edit.Workflow.ICommandFactory">
            <summary>
            Provides and executies commands used to change the state of content items.
            </summary>
        </member>
        <member name="M:N2.Edit.Workflow.ICommandFactory.GetPublishCommand(N2.Edit.Workflow.CommandContext)">
            <summary>Gets the command used to publish an item.</summary>
            <param name="context">The command context used to determine which command to return.</param>
            <returns>A command that when executed will publish an item.</returns>
        </member>
        <member name="M:N2.Edit.Workflow.ICommandFactory.GetSaveCommand(N2.Edit.Workflow.CommandContext)">
            <summary>Gets the command to save changes to an item without leaving the editing interface.</summary>
            <param name="context">The command context used to determine which command to return.</param>
            <returns>A command that when executed will save an item.</returns>
        </member>
        <member name="M:N2.Edit.Workflow.CommandFactory.GetPublishCommand(N2.Edit.Workflow.CommandContext)">
            <summary>Gets the command used to publish an item.</summary>
            <param name="context">The command context used to determine which command to return.</param>
            <returns>A command that when executed will publish an item.</returns>
        </member>
        <member name="M:N2.Edit.Workflow.CommandFactory.GetSaveCommand(N2.Edit.Workflow.CommandContext)">
            <summary>Gets the command to save changes to an item without leaving the editing interface.</summary>
            <param name="context">The command context used to determine which command to return.</param>
            <returns>A command that when executed will save an item.</returns>
        </member>
        <member name="T:N2.ContentState">
            <summary>
            The current state of a content item
            </summary>
        </member>
        <member name="F:N2.ContentState.None">
            <summary>The item's state is not known.</summary>
        </member>
        <member name="F:N2.ContentState.New">
            <summary>The item is new and has not been saved yet.</summary>
        </member>
        <member name="F:N2.ContentState.Draft">
            <summary>The item is a draft that has not been published.</summary>
        </member>
        <member name="F:N2.ContentState.Waiting">
            <summary>The item is waiting for the opportune moment to be published.</summary>
        </member>
        <member name="F:N2.ContentState.Published">
            <summary>The item is published.</summary>
        </member>
        <member name="F:N2.ContentState.Unpublished">
            <summary>The item was previously published.</summary>
        </member>
        <member name="F:N2.ContentState.Deleted">
            <summary>The item is deleted and resides in the trash can.</summary>
        </member>
        <member name="T:N2.Edit.Workflow.Interfaces">
            <summary>
            Known interfaces in N2 CMS.
            </summary>
        </member>
        <member name="F:N2.Edit.Workflow.Interfaces.Editing">
            <summary>The editing interface</summary>
        </member>
        <member name="F:N2.Edit.Workflow.Interfaces.Viewing">
            <summary>The preview interface</summary>
        </member>
        <member name="F:N2.Edit.Workflow.Interfaces.Managing">
            <summary>The managing interface</summary>
        </member>
        <member name="T:N2.Edit.Workflow.StateChangedEventArgs">
            <summary>
            Converys information about state changes
            </summary>
        </member>
        <member name="P:N2.Edit.Workflow.StateChangedEventArgs.PreviousState">
            <summary>The state the item had before the change.</summary>
        </member>
        <member name="T:N2.Edit.Workflow.StateChanger">
            <summary>
            Helps to change state of an item and notify observers about the change.
            </summary>
        </member>
        <member name="M:N2.Edit.Workflow.StateChanger.ChangeTo(N2.ContentItem,N2.ContentState)">
            <summary>Changes a state of an item to the new state.</summary>
            <param name="item">The item whose state is to be changed.</param>
            <param name="toState">The next state of the item.</param>
        </member>
        <member name="E:N2.Edit.Workflow.StateChanger.StateChanged">
            <summary>Is invoked when the state has changed.</summary>
        </member>
        <member name="T:N2.Edit.Workflow.StopExecutionException">
            <summary>
            Used to control command flow and stop execution
            </summary>
        </member>
        <member name="T:N2.Engine.AdaptsAttribute">
            <summary>
            Registers an adapter to be used with a content item of the specified type
            </summary>
        </member>
        <member name="P:N2.Engine.AdaptsAttribute.ContentType">
            <summary>The type of content item to adapt.</summary>
        </member>
        <member name="T:N2.Engine.Castle.WindsorServiceContainer">
            <summary>
            Wraps usage of the Castle Windsor inversion of control container.
            </summary>
        </member>
        <member name="T:N2.Engine.ServiceContainerBase">
            <summary>
            Wraps an inversion of control container. The default container used by N2 is Windsor.
            </summary>
        </member>
        <member name="T:N2.Engine.IServiceContainer">
            <summary>
            Wraps an inversion of control container. The default container used by N2 is Windsor.
            </summary>
        </member>
        <member name="M:N2.Engine.IServiceContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>Registers the service of the specified type with the container.</summary>
        </member>
        <member name="M:N2.Engine.IServiceContainer.AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>Registers the specified instance to the container as for the given service.</summary>
        </member>
        <member name="M:N2.Engine.IServiceContainer.AddComponentLifeStyle(System.String,System.Type,N2.Engine.ComponentLifeStyle)">
            <summary>Registers the service of the specified type with the container as using the specified lifestyle.</summary>
        </member>
        <member name="M:N2.Engine.IServiceContainer.AddComponentWithParameters(System.String,System.Type,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Registers the service of the specified type with the container, giving a number of properties for use during instantiation.</summary>
        </member>
        <member name="M:N2.Engine.IServiceContainer.Resolve``1">
            <summary>Returns the first registered service of the given type.</summary>
        </member>
        <member name="M:N2.Engine.IServiceContainer.Resolve``1(System.String)">
            <summary>Returns the service registered for the given key.</summary>
        </member>
        <member name="M:N2.Engine.IServiceContainer.Resolve(System.Type)">
            <summary>Returns the first registered service of the given type.</summary>
        </member>
        <member name="M:N2.Engine.IServiceContainer.Release(System.Object)">
            <summary>Frees the resources assiciated with the given object instance</summary>
        </member>
        <member name="M:N2.Engine.IServiceContainer.ResolveAll(System.Type)">
            <summary>Resolves all services serving the given interface.</summary>
            <param name="serviceType">The type of service to resolve.</param>
            <returns>All services registered to serve the provided interface.</returns>
        </member>
        <member name="M:N2.Engine.IServiceContainer.ResolveAll``1">
            <summary>Resolves all services of the given type.</summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>All services registered to serve the provided interface.</returns>
        </member>
        <member name="M:N2.Engine.IServiceContainer.StartComponents">
            <summary>Starts any <see cref="T:N2.Plugin.IAutoStart"/> components in the container.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.AddComponent(System.String,System.Type,System.Type)">
            <summary>Registers the service of the specified type with the container.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.AddComponentWithParameters(System.String,System.Type,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Registers the service of the specified type with the container, giving a number of properties for use during instantiation.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>Registers the specified instance to the container as for the given service.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.AddComponentLifeStyle(System.String,System.Type,N2.Engine.ComponentLifeStyle)">
            <summary>Registers the service of the specified type with the container as using the specified lifestyle.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.Resolve(System.Type)">
            <summary>Returns the first registered service of the given type.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.Resolve(System.String)">
            <summary>Returns the service registered for the given key.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.Release(System.Object)">
            <summary>Frees the resources assiciated with the given object instance</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.Resolve``1">
            <summary>Returns the service registered for the given key.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.Resolve``1(System.String)">
            <summary>Returns the first registered service of the given type.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.StartComponents">
            <summary>Starts any <see cref="T:N2.Plugin.IAutoStart"/> components in the container.</summary>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.ResolveAll(System.Type)">
            <summary>Resolves all services serving the given interface.</summary>
            <param name="serviceType">The type of service to resolve.</param>
            <returns>All services registered to serve the provided interface.</returns>
        </member>
        <member name="M:N2.Engine.ServiceContainerBase.ResolveAll``1">
            <summary>Resolves all services of the given type.</summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>All services registered to serve the provided interface.</returns>
        </member>
        <member name="M:N2.Engine.Castle.WindsorServiceContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:N2.Engine.Castle.WindsorServiceContainer"/> 
            class using an empty Windsor container.
            </summary>
        </member>
        <member name="M:N2.Engine.Castle.WindsorServiceContainer.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:N2.Engine.Castle.WindsorServiceContainer"/> 
            class using an existing container.  Any additional/replacement service 
            defined by the user will be added to the container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:N2.Engine.Castle.WindsorServiceContainer.ResolveAll(System.Type)">
            <summary>Resolves all services serving the given interface.</summary>
            <param name="serviceType">The type of service to resolve.</param>
            <returns>All services registered to serve the provided interface.</returns>
        </member>
        <member name="M:N2.Engine.Castle.WindsorServiceContainer.ResolveAll``1">
            <summary>Resolves all services of the given type.</summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>All services registered to serve the provided interface.</returns>
        </member>
        <member name="T:N2.Engine.Castle.WindsorServiceContainer.AutoStartFacility">
            <summary>
            This class is derived from the Castle Startable facility, with appropriate modifications
            </summary>
        </member>
        <member name="M:N2.Engine.Castle.WindsorServiceContainer.AutoStartFacility.CheckWaitingList">
            <summary>
            For each new component registered,
            some components in the WaitingDependency
            state may have became valid, so we check them
            </summary>
        </member>
        <member name="M:N2.Engine.Castle.WindsorServiceContainer.AutoStartFacility.Start(System.String)">
            <summary>
            Request the component instance
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:N2.Engine.ContainerConfigurer">
            <summary>
            Configures the inversion of control container with services used by N2 CMS.
            </summary>
        </member>
        <member name="T:N2.Engine.ContainerConfigurer.ConfigurationKeys">
            <summary>
            Known configuration keys used to configure services.
            </summary>
        </member>
        <member name="F:N2.Engine.ContainerConfigurer.ConfigurationKeys.MediumTrust">
            <summary>Key used to configure services intended for medium trust.</summary>
        </member>
        <member name="F:N2.Engine.ContainerConfigurer.ConfigurationKeys.FullTrust">
            <summary>Key used to configure services intended for full trust.</summary>
        </member>
        <member name="T:N2.Engine.ServiceProvider`1">
            <summary>
            Provides services from the inversion of control container.
            </summary>
            <typeparam name="T">The type of service that is provided.</typeparam>
        </member>
        <member name="T:N2.Persistence.IDependencySetter">
            <summary>
            Fulfils the dependency of an object. This class is used by the <see cref="T:N2.Persistence.ContentDependencyInjector"/>.
            </summary>
        </member>
        <member name="M:N2.Persistence.IDependencySetter.Fulfil(System.Object)">
            <summary>Injects dependencies onto an object inheriting from <see cref="!:IDependentEntity"/></summary>
            <param name="instance">The instance to inject the dependency on.</param>
        </member>
        <member name="T:N2.Persistence.ContentDependencyInjector">
            <summary>
            Injects dependencies onto content items as they are created.
            </summary>
        </member>
        <member name="T:N2.Persistence.ItemNotifier">
            <summary>
            Brokers items loaded from the database to whoever might want to know 
            they were loaded. This is somewhat different from items which are 
            caught through the <see cref="T:N2.Persistence.IPersister"/> load event since this will
            also be invoked when new items are created and when items are lazily
            loaded e.g. through the children collection.
            </summary>
        </member>
        <member name="M:N2.Persistence.ItemNotifier.NotifiyCreated(N2.ContentItem)">
            <summary>Notify subscribers that an item was loaded or created.</summary>
            <param name="newlyCreatedItem">The item that was loaded or created.</param>
            <returns>True if the item was modified.</returns>
        </member>
        <member name="M:N2.Persistence.ItemNotifier.NotifySaving(N2.ContentItem)">
            <summary>Notify subscribers that an item is to be saved.</summary>
            <param name="itemToBeSaved">The item that is to be saved.</param>
            <returns>True if the item was modified.</returns>
        </member>
        <member name="E:N2.Persistence.ItemNotifier.ItemCreated">
            <summary>Is triggered when an item was created or loaded from the database.</summary>
        </member>
        <member name="E:N2.Persistence.ItemNotifier.ItemSaving">
            <summary>Is triggered when an item is to be saved the database.</summary>
        </member>
        <member name="T:N2.Persistence.Proxying.DetailPropertyInterceptor">
            <summary>
            Intercepts detail property calls and calls Get/SetDetail.
            </summary>
        </member>
        <member name="T:N2.Persistence.Proxying.EmptyProxyFactory">
            <summary>
            Doesn't intercept at all.
            </summary>
        </member>
        <member name="T:N2.Persistence.Proxying.IProxyFactory">
            <summary>
            Creates a proxy that rewires auto-generated properties to detail get/set.
            </summary>
        </member>
        <member name="M:N2.Persistence.Proxying.IProxyFactory.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Initializes the proxy factory with the given types.</summary>
            <param name="interceptedTypes"></param>
        </member>
        <member name="M:N2.Persistence.Proxying.IProxyFactory.Create(System.String,System.Object)">
            <summary>Creates a proxied instance.</summary>
            <param name="typeName">The name of the type to create.</param>
            <param name="id">The instance identifyer.</param>
            <returns>A proxy intercepting access to certain properties.</returns>
        </member>
        <member name="M:N2.Persistence.Proxying.IProxyFactory.OnLoaded(System.Object)">
            <summary>Optional modifications of a loaded instance.</summary>
            <param name="instance">The instance to modify.</param>
        </member>
        <member name="M:N2.Persistence.Proxying.IProxyFactory.OnSaving(System.Object)">
            <summary>Optional modifications of a instance to be saved.</summary>
            <param name="instance">The instance to modify.</param>
        </member>
        <member name="M:N2.Persistence.Proxying.IProxyFactory.GetTypeName(System.Object)">
            <summary>Gets the type name of a proxied instance.</summary>
            <param name="instance">The proxied instance.</param>
            <returns>The instance's full name.</returns>
        </member>
        <member name="T:N2.Persistence.Proxying.IInterceptedType">
            <summary>
            Assigned to proxied objects.
            </summary>
        </member>
        <member name="M:N2.Persistence.Proxying.IInterceptedType.GetTypeName">
            <summary>The type name of the intercepted type.</summary>
            <returns>The type name.</returns>
        </member>
        <member name="T:N2.Persistence.Proxying.InterceptingProxyFactory">
            <summary>
            Creates a proxy that rewires auto-generated properties to detail get/set.
            </summary>
        </member>
        <member name="T:N2.Persistence.Finder.IPropertyCriteria">
            <summary>
            Classes implementing this interface provides options to add criteras 
            for various comparisons on item persistable properties.
            </summary>
        </member>
        <member name="M:N2.Persistence.Finder.IPropertyCriteria.Null(System.Boolean)">
            <summary>Presence of a detail.</summary>
            <param name="isNull">True if the detail is expected to be present.</param>
        </member>
        <member name="T:N2.Persistence.Serialization.Attachment">
            <summary>
            A binary attachment to serialized items.
            </summary>
        </member>
        <member name="T:N2.Persistence.Serialization.DeserializationException">
            <summary>
            An exception that may be thrown when problems occur in the deseralization 
            of exported content data.
            </summary>
        </member>
        <member name="T:N2.Persistence.Serialization.DetailXmlReader">
            <summary>
            Reads a content detail from the input navigator.
            </summary>
        </member>
        <member name="T:N2.Persistence.Serialization.Exporter">
            <summary>
            Exports items to a stream.
            </summary>
        </member>
        <member name="T:N2.Persistence.Serialization.ExportOptions">
            <summary>
            Hints for the export service.
            </summary>
        </member>
        <member name="F:N2.Persistence.Serialization.ExportOptions.Default">
            <summary>Default/Export everything.</summary>
        </member>
        <member name="F:N2.Persistence.Serialization.ExportOptions.OnlyDefinedDetails">
            <summary>Don't export details which have no definition.</summary>
        </member>
        <member name="F:N2.Persistence.Serialization.ExportOptions.ExcludeAttachments">
            <summary>Don't export attachments.</summary>
        </member>
        <member name="T:N2.Persistence.Serialization.FileAttachmentAttribute">
            <summary>
            Attaches files to exports.
            </summary>
        </member>
        <member name="M:N2.Persistence.Serialization.IAttachmentHandler.Write(N2.ContentItem,System.Xml.XmlTextWriter)">
            <summary>Writes an attachment to the export stream.</summary>
        </member>
        <member name="M:N2.Persistence.Serialization.IAttachmentHandler.Read(System.Xml.XPath.XPathNavigator,N2.ContentItem)">
            <summary>Reads an attachment from import stream.</summary>
        </member>
        <member name="M:N2.Persistence.Serialization.IAttachmentHandler.Import(N2.Persistence.Serialization.Attachment)">
            <summary>Imports an attachment into the host system.</summary>
            <param name="attachment">The attachment to import.</param>
        </member>
        <member name="F:N2.Persistence.Serialization.ImportOption.All">
            <summary>All items and attachments.</summary>
        </member>
        <member name="F:N2.Persistence.Serialization.ImportOption.AllItems">
            <summary>All items except attachments</summary>
        </member>
        <member name="F:N2.Persistence.Serialization.ImportOption.Root">
            <summary>The root node.</summary>
        </member>
        <member name="F:N2.Persistence.Serialization.ImportOption.Children">
            <summary>All items except the root node.</summary>
        </member>
        <member name="F:N2.Persistence.Serialization.ImportOption.Attachments">
            <summary>Import attachment overwriting any existing files.</summary>
        </member>
        <member name="T:N2.Persistence.Serialization.ItemXmlWriter">
            <summary>
            A content item xml serializer.
            </summary>
        </member>
        <member name="T:N2.Security.PermissionRemapAttribute">
            <summary>
            When decorating a content item this attribute is used by the security manager
            to remap required permissions of the item.
            </summary>
        </member>
        <member name="T:N2.Web.CacheUtility">
            <summary>
            Helper methods for setting and checking cache headers.
            </summary>
        </member>
        <member name="M:N2.Web.CacheUtility.IsUnmodifiedSince(System.Web.HttpRequest,System.String[])">
            <summary>Checks the request's If-Modified-Since against a file last write time.</summary>
            <param name="request">The request to check for last headers.</param>
            <param name="filePaths">Paths to file that may have changed.</param>
            <returns>True if the file has changed or no request header.</returns>
        </member>
        <member name="M:N2.Web.CacheUtility.IsUnmodifiedSince(System.Web.HttpRequest,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Checks the request's If-Modified-Since against a file last write time.</summary>
            <param name="request">The request to check for last headers.</param>
            <param name="filePaths">Paths to file that may have changed.</param>
            <returns>True if the file has changed or no request header.</returns>
        </member>
        <member name="M:N2.Web.CacheUtility.IsUnmodifiedSince(System.Web.HttpRequest,System.DateTime)">
            <summary>Checks the request's If-Modified-Since against a date.</summary>
            <param name="request">The request to check for last headers.</param>
            <param name="utcDate">The date to compare against.</param>
            <returns>True if the file has changed or no request header.</returns>
        </member>
        <member name="M:N2.Web.CacheUtility.SetValidUntilExpires(System.Web.HttpResponse,System.TimeSpan)">
            <summary>Sets public cacheablility (ask server if resources is modified) on the response header.</summary>
            <param name="response">The response whose cache to modify.</param>
            <param name="expirationTime">The time before the resource expires.</param>
        </member>
        <member name="M:N2.Web.CacheUtility.SetValidUntilExpires(System.Web.HttpResponse,System.DateTime)">
            <summary>Sets public cacheablility (ask server if resources is modified) on the response header.</summary>
            <param name="response">The response whose cache to modify.</param>
            <param name="lastModified">The time the resource was modified.</param>
        </member>
        <member name="M:N2.Web.CacheUtility.NotModified(System.Web.HttpResponse)">
            <summary>Ends the response with not modified status.</summary>
            <param name="response">The response to end.</param>
        </member>
        <member name="T:N2.Web.Drawing.ImageResizeMode">
            <summary>
            How to fit the image in the max width and height.
            </summary>
        </member>
        <member name="F:N2.Web.Drawing.ImageResizeMode.Stretch">
            <summary>Stretch the image to fit</summary>
        </member>
        <member name="F:N2.Web.Drawing.ImageResizeMode.Fit">
            <summary>Fit the image inside the box.</summary>
        </member>
        <member name="F:N2.Web.Drawing.ImageResizeMode.Fill">
            <summary>Crop portions of the image outside the box</summary>
        </member>
        <member name="T:N2.Web.Drawing.ImageResizeHandler">
            <summary>
            Resizes the requested image to the requested size.
            </summary>
        </member>
        <member name="T:N2.Web.Drawing.ImageResizeParameters">
            <summary>
            Parameters for the <see cref="T:N2.Web.Drawing.ImageResizer"/>.
            </summary>
        </member>
        <member name="T:N2.Web.Drawing.ImageResizer">
            <summary>
            Resizes an image.
            </summary>
        </member>
        <member name="T:N2.Web.Drawing.ImagesUtility">
            <summary>
            Helper methods for images and image paths.
            </summary>
        </member>
        <member name="F:N2.Web.Drawing.ImagesUtility.Separator">
            <summary>Separator between the size suffix and the file name.</summary>
        </member>
        <member name="M:N2.Web.Drawing.ImagesUtility.IsImagePath(System.String)">
            <summary>Compares the extension against known image exensions.</summary>
            <param name="imageUrl">The url to check</param>
            <returns>True if it's an image</returns>
        </member>
        <member name="M:N2.Web.Drawing.ImagesUtility.GetResizedPath(N2.Web.Url,System.String)">
            <summary>Gets the path of a resized version of the image, regardless of it existing or not.</summary>
            <param name="url">The base url of an image.</param>
            <param name="resizedSuffix">The size suffix to append before the extension.</param>
            <returns>A resized image url.</returns>
        </member>
        <member name="M:N2.Web.Drawing.ImagesUtility.GetExistingImagePath(System.String,System.String)">
            <summary>Gets the path of a resized version of the image, if it exists, otherwise the given image url.</summary>
            <param name="url">The base url of an image.</param>
            <param name="resizedSuffix">The size suffix to append before the extension.</param>
            <returns>A resized image url if it exists.</returns>
        </member>
        <member name="T:N2.Web.RequestPathProvider">
            <summary>
            Resolves the controller to handle a certain request. Supports a default 
            controller or additional imprativly using the ConnectControllers method 
            or declarativly using the [Controls] attribute registered.
            </summary>
        </member>
        <member name="T:N2.Edit.ControlPanelDragPluginAttribute">
            <summary>
            A control panel plugin that is hidden unless there is a zone on the page.
            </summary>
        </member>
        <member name="T:N2.Edit.ControlPanelLinkAttribute">
            <summary>
            Registers a link plugin in the control panel plugin area.
            </summary>
        </member>
        <member name="P:N2.Edit.ControlPanelLinkAttribute.UrlEncode">
            <summary>Url encode the NavigateUrl and NavigateQuery (for usage in query string).</summary>
        </member>
        <member name="P:N2.Edit.ControlPanelLinkAttribute.Title">
            <summary>The anchor text.</summary>
        </member>
        <member name="P:N2.Edit.ControlPanelLinkAttribute.Target">
            <summary>The anchor target frame.</summary>
        </member>
        <member name="P:N2.Edit.ControlPanelLinkAttribute.ToolTip">
            <summary>The anchor tool tip.</summary>
        </member>
        <member name="P:N2.Edit.ControlPanelLinkAttribute.NavigateUrl">
            <summary>The anchor's url.</summary>
        </member>
        <member name="P:N2.Edit.ControlPanelLinkAttribute.NavigateQuery">
            <summary>The anchor's url query.</summary>
        </member>
        <member name="P:N2.Edit.ControlPanelLinkAttribute.ShowDuring">
            <summary>The control panel state that displays this link.</summary>
        </member>
        <member name="P:N2.Edit.ControlPanelLinkAttribute.GlobalResourceClassName">
            <summary>Used for translating the plugin's texts from a global resource.</summary>
        </member>
        <member name="T:N2.Edit.ControlPanelSeparatorAttribute">
            <summary>
            A vertical separator line for the control panel plugin area.
            </summary>
        </member>
        <member name="T:N2.Edit.EditableAdapter">
            <summary>
            Controls aspects related to the editor interface and editing content items.
            </summary>
        </member>
        <member name="M:N2.Edit.EditableAdapter.AddDefinedEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Web.UI.Control,System.Security.Principal.IPrincipal)">
            <summary>Adds the editors defined for the item to the control hierarchy.</summary>
            <param name="definition">The definition containing editor information.</param>
            <param name="item">The specific item being added.</param>
            <param name="container">The container onto which to add editors.</param>
            <param name="user">The user to filter access by.</param>
            <returns>A editor name to control map of added editors.</returns>
        </member>
        <member name="M:N2.Edit.EditableAdapter.AddDefinedEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Web.UI.Control,System.Security.Principal.IPrincipal,System.Type)">
            <summary>Adds the editors defined for the item to the control hierarchy.</summary>
            <param name="definition">The definition containing editor information.</param>
            <param name="item">The specific item being added.</param>
            <param name="container">The container onto which to add editors.</param>
            <param name="user">The user to filter access by.</param>
            <param name="containerNameFilter">Only add editors within this container name.</param>
            <returns>A editor name to control map of added editors.</returns>
        </member>
        <member name="M:N2.Edit.EditableAdapter.AddDefinedEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Web.UI.Control,System.Security.Principal.IPrincipal,System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds the editors defined for the item to the control hierarchy.</summary>
            <param name="definition">The definition containing editor information.</param>
            <param name="item">The specific item being added.</param>
            <param name="container">The container onto which to add editors.</param>
            <param name="user">The user to filter access by.</param>
            <param name="containerNameFilter">Only add editors with these names.</param>
            <param name="containerTypeFilter">Only add editors within this container type.</param>
            <returns>A editor name to control map of added editors.</returns>
        </member>
        <member name="M:N2.Edit.EditableAdapter.LoadAddedEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control},System.Security.Principal.IPrincipal)">
            <summary>Updates editors with values from the item.</summary>
            <param name="item">The item containing values.</param>
            <param name="addedEditors">A map of editors to update (may have been filtered by access).</param>
            <param name="user">The user to filter access by.</param>
        </member>
        <member name="M:N2.Edit.EditableAdapter.UpdateItem(N2.Definitions.ItemDefinition,N2.ContentItem,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control},System.Security.Principal.IPrincipal)">
            <summary>Updates an item with the values from the editor controls without saving it.</summary>
            <param name="item">The item to update.</param>
            <param name="addedEditors">Editors containing interesting values.</param>
            <param name="user">The user to filter access by.</param>
            <returns>Detail names that were updated.</returns>
        </member>
        <member name="M:N2.Edit.EditableAdapter.SaveItem(N2.ContentItem,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control},N2.Web.UI.WebControls.ItemEditorVersioningMode,System.Security.Principal.IPrincipal)">
            <summary>Saves an item using values from the supplied item editor.</summary>
            <param name="item">The item to update.</param>
            <param name="addedEditors">The editors to update the item with.</param>
            <param name="versioningMode">How to treat the item beeing saved in respect to versioning.</param>
            <param name="user">The user that is performing the saving.</param>
            <returns>The item to continue using.</returns>
        </member>
        <member name="M:N2.Edit.EditableAdapter.GetDefaultFolder(N2.ContentItem)">
            <summary>Gets the default folder for an item.</summary>
            <param name="item">The item whose default folder is requested.</param>
            <returns>The default folder.</returns>
        </member>
        <member name="T:N2.Edit.NullBinder`1">
            <summary>
            Doesn't bind anything but reports the object was updated.
            </summary>
            <typeparam name="T">The type of model object (ignored)</typeparam>
        </member>
        <member name="T:N2.Edit.NullValidator`1">
            <summary>
            Doesn't return any validation errors.
            </summary>
            <typeparam name="T">The type of model object (ignored)</typeparam>
        </member>
        <member name="T:N2.Edit.Web.PageValidator`1">
            <summary>Validates using the web forms validators on the page</summary>
            <typeparam name="T">The type of model object (ignored)</typeparam>
        </member>
        <member name="T:N2.Edit.SelectionUtility">
            <summary>
            Helps discovering item selection in editing interfaces.
            </summary>
        </member>
        <member name="P:N2.Edit.SelectionUtility.SelectedItem">
            <summary>The selected item.</summary>
        </member>
        <member name="P:N2.Edit.SelectionUtility.MemorizedItem">
            <summary>The item placed in memory.</summary>
        </member>
        <member name="T:N2.Edit.FileSystem.DefaultDirectorySelector">
            <summary>
            Finds the default folder associated with an item.
            </summary>
        </member>
        <member name="T:N2.Edit.FileSystem.IDefaultDirectory">
            <summary>
            Finds the default folder associated with an item.
            </summary>
        </member>
        <member name="T:N2.Edit.IDocumentBaseSource">
            <summary>
            Used to resolve document base when applied to a content item. The document base 
            is used to resolve the location of non-rooted links and sources in the editor
            html source.
            </summary>
        </member>
        <member name="P:N2.Edit.IDocumentBaseSource.BaseUrl">
            <summary>An url with a trailing slash used to prepend relative managementUrls.</summary>
        </member>
        <member name="T:N2.Edit.Trash.TrashPurgeInterval">
            <summary>
            Specifies intervals after which deleted items can be purged from trash.
            </summary>
        </member>
        <member name="F:N2.Edit.Trash.TrashPurgeInterval.Dayly">
            <summary>Purge after a day.</summary>
        </member>
        <member name="F:N2.Edit.Trash.TrashPurgeInterval.Weekly">
            <summary>Purge after 7 days.</summary>
        </member>
        <member name="F:N2.Edit.Trash.TrashPurgeInterval.Monthly">
            <summary>Purge after 31 days.</summary>
        </member>
        <member name="F:N2.Edit.Trash.TrashPurgeInterval.Quarterly">
            <summary>Purge after 92 days.</summary>
        </member>
        <member name="F:N2.Edit.Trash.TrashPurgeInterval.Yearly">
            <summary>Purge after 365 days.</summary>
        </member>
        <member name="F:N2.Edit.Trash.TrashPurgeInterval.Never">
            <summary>Never purge</summary>
        </member>
        <member name="T:N2.Engine.AsyncWorker">
            <summary>
            Performs work asynchronously.
            </summary>
        </member>
        <member name="T:N2.Engine.IWorker">
            <summary>
            Defines a class that does work.
            </summary>
        </member>
        <member name="M:N2.Engine.IWorker.DoWork(System.Action)">
            <summary>Starts the execution of the specified work.</summary>
            <param name="action">The method to execute.</param>
        </member>
        <member name="P:N2.Engine.IWorker.ExecutingWorkItems">
            <summary>Gets the number of executing work actions.</summary>
        </member>
        <member name="F:N2.Engine.AsyncWorker.QueueUserWorkItem">
            <summary>Testability seam for the async worker.</summary>
        </member>
        <member name="M:N2.Engine.AsyncWorker.DoWork(System.Action)">
            <summary>Starts the execution of the specified work.</summary>
            <param name="action">The method to execute.</param>
        </member>
        <member name="M:N2.Engine.AsyncWorker.DoWork``1(System.Action,System.Action{``0})">
            <summary>Starts the execution of the specified work with error handling.</summary>
            <param name="action">The method to execute.</param>
            <param name="onError">Action to execute when an error occurs.</param>
            <typeparam name="T">The type of exceptions to handle.</typeparam>
        </member>
        <member name="P:N2.Engine.AsyncWorker.ExecutingWorkItems">
            <summary>Gets the number of executing work actions.</summary>
        </member>
        <member name="T:N2.Engine.Configuration.IServiceContainerConfigurer">
            <summary>
            Performs one-off configuration of the <see cref="T:N2.Engine.IServiceContainer"/>.
            </summary>
        </member>
        <member name="T:N2.Engine.StructureBoundCache`1">
            <summary>
            Caches a value that is expired when a content item is moved or deleted.
            </summary>
            <typeparam name="T">The type of value to store.</typeparam>
        </member>
        <member name="M:N2.Engine.StructureBoundCache`1.GetValue(System.Func{`0})">
            <summary>Gets an existing or creates a new cached value.</summary>
            <param name="valueFactory">The method that creates the value when it is null.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:N2.Engine.StructureBoundCache`1.Value">
            <summary>The value that is cached.</summary>
        </member>
        <member name="T:N2.Engine.Globalization.LanguageInfo">
            <summary>
            Used to cache information about a language available in the system.
            </summary>
        </member>
        <member name="P:N2.Engine.Globalization.LanguageInfo.ID">
            <summary>The identifier of item that is the root of this language.</summary>
        </member>
        <member name="P:N2.Engine.Globalization.LanguageInfo.LanguageCode">
            <summary>The language code of this language.</summary>
        </member>
        <member name="T:N2.Engine.MediumTrust.MediumTrustEngine">
            <summary>
            Uses a lightweight container for resolving services in a medium trust environment.
            </summary>
            <remarks>
            Since N2 2.0 this is not used since .NET 3.5 and changes to the Windsor container allows usage in medium trust.
            </remarks>
        </member>
        <member name="T:N2.Engine.ContentEngine">
            <summary>
            This principal gateway to N2 services. The class is responsible for 
            initializing and providing access to the services that compose N2.
            </summary>
        </member>
        <member name="M:N2.Engine.ContentEngine.#ctor">
            <summary>
            Creates an instance of the content engine using default settings and configuration.
            </summary>
        </member>
        <member name="M:N2.Engine.ContentEngine.#ctor(N2.Engine.IServiceContainer,N2.Web.EventBroker,N2.Engine.ContainerConfigurer)">
            <summary>Sets the current container to the given container.</summary>
            <param name="container">An previously prepared service container.</param>
            <param name="broker"></param>
        </member>
        <member name="M:N2.Engine.ContentEngine.#ctor(System.Configuration.Configuration,System.String,N2.Engine.IServiceContainer,N2.Web.EventBroker,N2.Engine.ContainerConfigurer)">
            <summary>Tries to determine runtime parameters from the given configuration.</summary>
            <param name="config">The configuration to use.</param>
            <param name="sectionGroup">The configuration section to retrieve configuration from</param>
            <param name="broker">Web ap event provider</param>
        </member>
        <member name="M:N2.Engine.ContentEngine.Resolve``1">
            <summary>Resolves a service configured in the factory.</summary>
        </member>
        <member name="M:N2.Engine.ContentEngine.Resolve(System.String)">
            <summary>Resolves a named service configured in the factory.</summary>
            <param name="key">The name of the service to resolve.</param>
            <returns>An instance of the resolved service.</returns>
        </member>
        <member name="M:N2.Engine.ContentEngine.AddComponent(System.String,System.Type)">
            <summary>Registers a component in the IoC container.</summary>
            <param name="key">A unique key.</param>
            <param name="serviceType">The type of component to register.</param>
        </member>
        <member name="M:N2.Engine.ContentEngine.AddComponent(System.String,System.Type,System.Type)">
            <summary>Registers a component in the IoC container.</summary>
            <param name="key">A unique key.</param>
            <param name="serviceType">The type of service to provide.</param>
            <param name="classType">The type of component to register.</param>
        </member>
        <member name="M:N2.Engine.ContentEngine.AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>Adds a compnent instance to the container.</summary>
            <param name="key">A unique key.</param>
            <param name="serviceType">The type of service to provide.</param>
            <param name="instance">The service instance to add.</param>
        </member>
        <member name="P:N2.Engine.ContentEngine.Persister">
            <summary>Gets N2 persistence manager used for database persistence of content.</summary>
        </member>
        <member name="P:N2.Engine.ContentEngine.Definitions">
            <summary>Gets N2 definition manager</summary>
        </member>
        <member name="P:N2.Engine.ContentEngine.IntegrityManager">
            <summary>Gets N2 integrity manager </summary>
        </member>
        <member name="P:N2.Engine.ContentEngine.SecurityManager">
            <summary>Gets N2 security manager responsible of item access checks.</summary>
        </member>
        <member name="P:N2.Engine.ContentEngine.UrlParser">
            <summary>Gets the url parser responsible of mapping managementUrls to items and back again.</summary>
        </member>
        <member name="P:N2.Engine.ContentEngine.EditManager">
            <summary>Gets the edit manager responsible for plugins in edit mode.</summary>
        </member>
        <member name="M:N2.Engine.MediumTrust.MediumTrustServiceContainer.ResolveAll(System.Type)">
            <summary>Resolves all services serving the given interface.</summary>
            <param name="serviceType">The type of service to resolve.</param>
            <returns>All services registered to serve the provided interface.</returns>
        </member>
        <member name="M:N2.Engine.MediumTrust.MediumTrustServiceContainer.ResolveAll``1">
            <summary>Resolves all services of the given type.</summary>
            <typeparam name="T">The type of service to resolve.</typeparam>
            <returns>All services registered to serve the provided interface.</returns>
        </member>
        <member name="T:N2.Engine.ServiceRegistrator">
            <summary>
            Registers service in the N2 inversion of container upon start.
            </summary>
        </member>
        <member name="T:N2.Engine.StructureBoundDictionaryCache`2">
            <summary>
            Caches a dynamically expandable dictionary that is expired when an item is moved or deleted.
            </summary>
            <typeparam name="K">The type of key for the dictionary.</typeparam>
            <typeparam name="V">The type of values stored in the dictionary.</typeparam>
        </member>
        <member name="M:N2.Engine.StructureBoundDictionaryCache`2.GetValue(`0,System.Func{`0,`1})">
            <summary>Gets the value from the ditionary or uses the provided factory method to create it.</summary>
            <param name="key"></param>
            <param name="valueFactoryMethod"></param>
            <returns></returns>
        </member>
        <member name="T:N2.Engine.ValueEventArgs`1">
            <summary>
            An event argument passing a value.
            </summary>
            <typeparam name="T">The type of value to pass.</typeparam>
        </member>
        <member name="T:N2.Integrity.RestrictChildrenAttribute">
            <summary>
            This attribute replace the children allowed with the types 
            </summary>
        </member>
        <member name="M:N2.Integrity.RestrictChildrenAttribute.#ctor">
            <summary>Initializes a new instance of the RestrictChildrenAttribute which is used to restrict which types of items may be added below which.</summary>
        </member>
        <member name="M:N2.Integrity.RestrictChildrenAttribute.#ctor(N2.Integrity.AllowedTypes)">
            <summary>Initializes a new instance of the RestrictChildrenAttribute which is used to restrict which types of items may be added below which.</summary>
            <param name="allowedTypes">Defines wether all types of items are allowed as parent items.</param>
        </member>
        <member name="M:N2.Integrity.RestrictChildrenAttribute.#ctor(System.Type[])">
            <summary>Initializes a new instance of the RestrictChildrenAttribute which is used to restrict which types of items may be added below which.</summary>
            <param name="allowedChildrenTypes">A list of allowed types. Null is interpreted as all types are allowed.</param>
        </member>
        <member name="P:N2.Integrity.RestrictChildrenAttribute.TemplateNames">
            <summary>
            Restrict children by template name, allow only children with these template name.
            </summary>
        </member>
        <member name="T:N2.Edit.FileSystem.DirectoryData">
            <summary>
            Represents a directory provided through the <see cref="T:N2.Edit.FileSystem.IFileSystem"/>.
            </summary>
        </member>
        <member name="T:N2.Edit.FileSystem.AbstractFileSystemItem">
            <summary>
            Represents an item provided through the <see cref="T:N2.Edit.FileSystem.IFileSystem"/>.
            </summary>
        </member>
        <member name="T:N2.Edit.FileSystem.FileData">
            <summary>
            Represents a file provided through the <see cref="T:N2.Edit.FileSystem.IFileSystem"/>.
            </summary>
        </member>
        <member name="T:N2.Edit.FileSystem.VirtualPathFileSystem">
            <summary>
            Wraps the virtual path provider file system.
            </summary>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.GetFiles(System.String)">
            <summary>Gets files in directory.</summary>
            <param name="parentVirtualPath">The path to the directory.</param>
            <returns>An enumerations of files in the directory.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.GetFile(System.String)">
            <summary>Gets file data.</summary>
            <param name="virtualPath">The path to the file.</param>
            <returns>A file data object.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.GetDirectories(System.String)">
            <summary>Gets directories of a directory.</summary>
            <param name="parentVirtualPath">The path to the directory whose child directories to get.</param>
            <returns>An enumeration of directories.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.GetDirectory(System.String)">
            <summary>Gets a directory data.</summary>
            <param name="virtualPath">The path of the directory to get.</param>
            <returns>A directory data object.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.FileExists(System.String)">
            <summary>Checks if a file exists.</summary>
            <param name="virtualPath">The path of the file to check.</param>
            <returns>True if the file exists in the file system.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.DirectoryExists(System.String)">
            <summary>Checks the existence of a directory.</summary>
            <param name="virtualPath">The directory to check.</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.DeleteFile(System.String)">
            <summary>Delets a file from the file system.</summary>
            <param name="virtualPath">The path of the file to delete.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.DeleteDirectory(System.String)">
            <summary>Deletes a directory including all files and sub-directories.</summary>
            <param name="virtualPath">The path of the directory to remove.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.MoveFile(System.String,System.String)">
            <summary>Moves a file to a new location.</summary>
            <param name="fromVirtualPath">The file path where the file is located.</param>
            <param name="destinationVirtualPath">The path the file should assume after beeing moved.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.MoveDirectory(System.String,System.String)">
            <summary>Moves a directory.</summary>
            <param name="fromVirtualPath">The original directory path.</param>
            <param name="destinationVirtualPath">The path the directory should assume after beeing moved.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.CopyFile(System.String,System.String)">
            <summary>Copies a file.</summary>
            <param name="fromVirtualPath">The path where the file is located.</param>
            <param name="destinationVirtualPath">The path the copy should assume when.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.CreateDirectory(System.String)">
            <summary>Creates a directory.</summary>
            <param name="virtualPath">The directory path to create.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.WriteFile(System.String,System.IO.Stream)">
            <summary>Creates or overwrites a file at the given path.</summary>
            <param name="virtualPath">The path of the file to create.</param>
            <param name="inputStream">An input stream of the file contents.</param>
        </member>
        <member name="M:N2.Edit.FileSystem.VirtualPathFileSystem.ReadFileContents(System.String,System.IO.Stream)">
            <summary>Read file contents to a stream.</summary>
            <param name="virtualPath">The path of the file to read.</param>
            <param name="outputStream">The stream to which the file contents should be written.</param>
        </member>
        <member name="T:N2.Edit.NavigationSeparatorPluginAttribute">
            <summary>
            Adds a separator to the items in the right-click menu in the navigation
            pane.
            </summary>
        </member>
        <member name="T:N2.Edit.NavigationPluginAttribute">
            <summary>
            An attribute defining a right-click item in the navigation pane.
            </summary>
        </member>
        <member name="T:N2.Edit.PluginContext">
            <summary>
            Class used to supply plugins with contextual information.
            </summary>
        </member>
        <member name="T:N2.Edit.FileSystem.IFileSystemContainer">
            <summary>
            Marker interface used on content items which may contain file systems.
            </summary>
        </member>
        <member name="T:N2.Edit.Settings.ISettingsEditor">
            <summary>
            When used on a settings editor user control this interface defines 
            the method invoked when it's time to save changes.
            </summary>
        </member>
        <member name="T:N2.Engine.ContentAdapterProvider">
            <summary>
            Keeps track of and provides content adapters in the system.
            </summary>
        </member>
        <member name="T:N2.Engine.IContentAdapterProvider">
            <summary>
            Resolves content adapter for a given type at runtime.
            </summary>
        </member>
        <member name="M:N2.Engine.IContentAdapterProvider.ResolveAdapter``1(System.Type)">
            <summary>Resolves the adapter for the current type.</summary>
            <returns>A suitable adapter for the given type.</returns>
        </member>
        <member name="M:N2.Engine.IContentAdapterProvider.ResolveAdapter``1(N2.ContentItem)">
            <summary>Resolves the adapter for the current item.</summary>
            <returns>A suitable adapter for the given item.</returns>
        </member>
        <member name="M:N2.Engine.ContentAdapterProvider.ResolveAdapter``1(System.Type)">
            <summary>Resolves the adapter for the current type.</summary>
            <returns>A suitable adapter for the given type.</returns>
        </member>
        <member name="M:N2.Engine.ContentAdapterProvider.ResolveAdapter``1(N2.ContentItem)">
            <summary>Resolves the adapter for the current item.</summary>
            <returns>A suitable adapter for the given item.</returns>
        </member>
        <member name="M:N2.Engine.ContentAdapterProvider.RegisterAdapter(N2.Engine.AbstractContentAdapter[])">
            <summary>Adds an adapter to the list of adapters. This is typically auto-wired using the [Adapts] attribute.</summary>
            <param name="adapterToAdd">The adapter instnace to add.</param>
        </member>
        <member name="M:N2.Engine.ContentAdapterProvider.UnregisterAdapter(N2.Engine.AbstractContentAdapter[])">
            <summary>Removes an adapter from the list of adapters.</summary>
            <param name="descriptorsToAdd">The adapter to add.</param>
        </member>
        <member name="T:N2.Engine.Globalization.ILanguage">
            <summary>
            Represents a language available to the translation manager. In the default
            implementation this interface is implemented by the start node of a 
            language branch.
            </summary>
        </member>
        <member name="P:N2.Engine.Globalization.ILanguage.FlagUrl">
            <summary>The path of the image representing this language. It's used to represent the language in the editor interface.</summary>
        </member>
        <member name="P:N2.Engine.Globalization.ILanguage.LanguageTitle">
            <summary>The friendly name of the language.</summary>
        </member>
        <member name="P:N2.Engine.Globalization.ILanguage.LanguageCode">
            <summary>The identifier of the language.</summary>
        </member>
        <member name="T:N2.Engine.Globalization.ILanguageGateway">
            <summary>
            Globalization functionality.
            </summary>
        </member>
        <member name="M:N2.Engine.Globalization.ILanguageGateway.FindTranslations(N2.ContentItem)">
            <summary>Gets available translations for a certain item.</summary>
            <param name="item">The item whose translations to get..</param>
            <returns>An enumeration of content itmes that are translations of the given item. The item itself is included.</returns>
        </member>
        <member name="M:N2.Engine.Globalization.ILanguageGateway.GetLanguage(N2.ContentItem)">
            <summary>Gets the language of an item.</summary>
            <param name="item">The item whose language to get.</param>
            <returns>The item's language or null.</returns>
        </member>
        <member name="M:N2.Engine.Globalization.ILanguageGateway.GetLanguage(System.String)">
            <summary>Gets the language with a certain language code.</summary>
            <param name="languageCode">The language code to find a matching language for.</param>
            <returns>The language with the code or null.</returns>
        </member>
        <member name="M:N2.Engine.Globalization.ILanguageGateway.GetEditTranslations(N2.ContentItem,System.Boolean,System.Boolean)">
            <summary>Gets an enumeration of translation options for edit mode.</summary>
            <param name="item">The item beeing edited.</param>
            <param name="includeCurrent">Wether to include the current item in the enumeratin.</param>
            <returns>An enumeration of translation definitions.</returns>
        </member>
        <member name="M:N2.Engine.Globalization.ILanguageGateway.GetAvailableLanguages">
            <summary>Gets available languages.</summary>
            <returns>An enumeration of available languages.</returns>
        </member>
        <member name="M:N2.Engine.Globalization.ILanguageGateway.GetTranslation(N2.ContentItem,N2.Engine.Globalization.ILanguage)">
            <summary>Gets an item's translation in a certain language.</summary>
            <param name="item">The item whose translation to get.</param>
            <param name="language">The language to look for.</param>
            <returns>A translated item or null.</returns>
        </member>
        <member name="M:N2.Engine.Globalization.ILanguageGateway.Associate(System.Collections.Generic.IEnumerable{N2.ContentItem})">
            <summary>Associate these items from different language branches as the same translated page. If a language branch already contains an associated item that item will be de-associated and be removed as a translation.</summary>
            <param name="items">The translations to associate with each other.</param>
        </member>
        <member name="M:N2.Engine.Globalization.ILanguageGateway.Unassociate(N2.ContentItem)">
            <summary>
            Unassociates an item from the relation to other translated pages.
            </summary>
            <param name="item">The item to remove as translation.</param>
        </member>
        <member name="P:N2.Engine.Globalization.ILanguageGateway.Enabled">
            <summary>Get wether the language functionality is enabled.</summary>
        </member>
        <member name="T:N2.Engine.Globalization.LanguageGateway">
            <summary>
            Globalization handler.
            </summary>
        </member>
        <member name="M:N2.Engine.Globalization.LanguageGateway.GetLanguage(System.String)">
            <summary>Gets the language with a certain language code.</summary>
            <param name="languageCode">The language code to find a matching language for.</param>
            <returns>The language with the code or null.</returns>
        </member>
        <member name="M:N2.Engine.Globalization.LanguageGateway.Associate(System.Collections.Generic.IEnumerable{N2.ContentItem})">
            <summary>Associate these items from different language branches as the same translated page. If a language branch already contains an associated item that item will be de-associated and be removed as a translation.</summary>
            <param name="items">The translations to associate with each other.</param>
        </member>
        <member name="M:N2.Engine.Globalization.LanguageGateway.Unassociate(N2.ContentItem)">
            <summary>
            Unassociates an item from the relation to other translated pages.
            </summary>
            <param name="item">The item to remove as translation.</param>
        </member>
        <member name="M:N2.Engine.Globalization.LanguageGateway.EnsureNoLanguageRoots(System.Collections.Generic.IEnumerable{N2.ContentItem})">
            <summary>Throws an exception if any of the items is a language root.</summary>
            <param name="items"></param>
        </member>
        <member name="M:N2.Engine.Globalization.LanguageGateway.AppointMaster(System.Collections.Generic.IEnumerable{N2.ContentItem})">
            <summary>Determines the preferred "master" or picks the first one.</summary>
            <param name="items"></param>
            <returns>An item whose id will be used as language key.</returns>
        </member>
        <member name="M:N2.Engine.Globalization.LanguageGateway.UpdateLanguageKeys(System.Collections.Generic.IEnumerable{N2.ContentItem},N2.ContentItem)">
            <summary>Updates language keys and removes language keys from any existing translations within a certain language branch.</summary>
            <param name="items"></param>
            <param name="appointedMaster"></param>
            <returns>Items that have been updated as a result of the operation.</returns>
        </member>
        <member name="T:N2.Engine.Globalization.LanguageInterceptor">
            <summary>
            Intercepts and acts upon operations on the node tree. The purpose is to 
            keep the language branches synchronized.
            </summary>
        </member>
        <member name="T:N2.Engine.Globalization.NavigationTranslationsPluginAttribute">
            <summary>
            Adds language icons to the right-click menu in the navigation pane.
            </summary>
        </member>
        <member name="T:N2.Engine.Globalization.TranslateSpecification">
            <summary>
            Information used by the edit interface about an existing or potential translation.
            </summary>
        </member>
        <member name="T:N2.Engine.Singleton`1">
            <summary>
            A statically compiled "singleton" used to store objects throughout the 
            lifetime of the app domain. Not so much singleton in the pattern's 
            sense of the word as a standardized way to store single instances.
            </summary>
            <typeparam name="T">The type of object to store.</typeparam>
            <remarks>Access to the instance is not synchrnoized.</remarks>
        </member>
        <member name="T:N2.Engine.Singleton">
            <summary>
            Provides access to all "singletons" stored by <see cref="T:N2.Engine.Singleton`1"/>.
            </summary>
        </member>
        <member name="P:N2.Engine.Singleton.AllSingletons">
            <summary>Dictionary of type to singleton instances.</summary>
        </member>
        <member name="P:N2.Engine.Singleton`1.Instance">
            <summary>The singleton instance for the specified type T. Only one instance (at the time) of this object for each type of T.</summary>
        </member>
        <member name="T:N2.Engine.SingletonList`1">
            <summary>
            Provides a singleton list for a certain type.
            </summary>
            <typeparam name="T">The type of list to store.</typeparam>
        </member>
        <member name="P:N2.Engine.SingletonList`1.Instance">
            <summary>The singleton instance for the specified type T. Only one instance (at the time) of this list for each type of T.</summary>
        </member>
        <member name="T:N2.Engine.SingletonDictionary`2">
            <summary>
            Provides a singleton dictionary for a certain key and vlaue type.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TValue">The type of value.</typeparam>
        </member>
        <member name="P:N2.Engine.SingletonDictionary`2.Instance">
            <summary>The singleton instance for the specified type T. Only one instance (at the time) of this dictionary for each type of T.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.ControlPanel">
            <summary>
            A control panel for on page editing. The control displays buttons for 
            start editing and saving changes.
            </summary>
        </member>
        <member name="M:N2.Web.UI.WebControls.ControlPanel.GetPartDefinitions(N2.Web.Parts.PartsAdapter,N2.ContentItem,System.Collections.Generic.IEnumerable{N2.Web.UI.WebControls.Zone},System.Security.Principal.IPrincipal)">
            <summary>Gets part definitions that can be added to the given page.</summary>
            <param name="adapter"></param>
            <param name="item"></param>
            <param name="pageZones"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Web.UI.WebControls.ControlPanel.GetQuickEditUrl(System.String)">
            <summary>Gets the url for editing the page directly.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ControlPanel.StyleSheetUrl">
            <summary>Gets or sets the url to a style sheet added to the page when editing.</summary>
        </member>
        <member name="T:N2.Web.UI.Page`1">
            <summary>
            This class name has been deprecated. Page base class that provides easy access to the current page item.
            </summary>
            <typeparam name="TPage">The type of content item served by the page inheriting this class.</typeparam>
        </member>
        <member name="T:N2.Web.UI.UserControl`1">
            <summary>
            This class name has been deprecated. A user control base used to for quick access to content data.
            </summary>
            <typeparam name="TPage">The type of page item this user control will have to deal with.</typeparam>
        </member>
        <member name="T:N2.Web.UI.UserControl`2">
            <summary>
            This class name has been deprecated. A user control that can be dynamically created, bound to non-page items and added to a page.
            </summary>
            <typeparam name="TPage">The type of page item this user control will have to deal with.</typeparam>
            <typeparam name="TItem">The type of non-page (data) item this user control will be bound to.</typeparam>
        </member>
        <member name="T:N2.PageDefinitionAttribute">
            <summary>
            Defines a page (ASPX) available to the CMS and provides a way to define 
            useful meta-data. Unlike <see cref="T:N2.DefinitionAttribute"/> this attribute
            makes more assumptions about the item beeing defined and provides more
            meta-data options.
            </summary>
        </member>
        <member name="P:N2.PageDefinitionAttribute.InstallerVisibility">
            <summary>Instructs the installation screen how to treat this definition during installation.</summary>
        </member>
        <member name="T:N2.PartDefinitionAttribute">
            <summary>
            Defines a part (ASCX) available to the CMS and provides a way to define 
            useful meta-data. Unlike <see cref="T:N2.DefinitionAttribute"/> this attribute
            makes more assumptions about the item beeing defined and provides more
            meta-data options.
            </summary>
        </member>
        <member name="T:N2.Persistence.Finder.IComparisonCriteria`1">
            <summary>
            Classes implementing this interface provides functionality to add a 
            criteria with operations such as greater than and between.
            </summary>
            <typeparam name="T">The type of value to search for.</typeparam>
        </member>
        <member name="M:N2.Persistence.Finder.IComparisonCriteria`1.Gt(`0)">
            <summary>Greater than.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IComparisonCriteria`1.Ge(`0)">
            <summary>Greater or equal than.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IComparisonCriteria`1.Lt(`0)">
            <summary>Less than.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IComparisonCriteria`1.Le(`0)">
            <summary>Less or equal than.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IComparisonCriteria`1.Between(`0,`0)">
            <summary>Between lowerBound and upperBound.</summary>
        </member>
        <member name="T:N2.Persistence.IActiveContent">
            <summary>
            Content items implementing this interface are responsible for their 
            own persistence.
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.Finder.NullablePropertyCriteria`1">
            <summary>
            The criteria building block of a query. Compares a property to value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:N2.Persistence.NH.Finder.PropertyCriteria`1">
            <summary>
            The criteria building block of a query. Compares a property to value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:N2.Persistence.NH.Finder.PropertyIsNullHqlProvider`1">
            <summary>
            Represents a property criteria to select values in a certain range.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="T:N2.Persistence.PersistableAttribute">
            <summary>
            Instructs the database mapping to generate store the property in a
            additional column with the same name in the n2item table. Adding this 
            attribute to an existing system requires the database to be updated.
            </summary>
            <example>
            [PageDefinition]
            public class PropertyItemType : ContentItem
            {
                [Persistable, EditableTextBox("Author", 80)]
                public virtual string Author { get; set; }
            }
            </example>
        </member>
        <member name="M:N2.Persistence.PersistableAttribute.GenerateMapping(System.Reflection.PropertyInfo)">
            <summary>Generates the mapping xml for this property.</summary>
            <param name="info">The property the attribute was added to.</param>
            <returns>An hbm xml snippet.</returns>
        </member>
        <member name="P:N2.Persistence.PersistableAttribute.Length">
            <summary>The length of this column (usually for string properties)</summary>
        </member>
        <member name="P:N2.Persistence.PersistableAttribute.Column">
            <summary>An alternative name of the column (optional).</summary>
        </member>
        <member name="P:N2.Persistence.PersistableAttribute.PersistAs">
            <summary>Where to store this property (default is column).</summary>
        </member>
        <member name="T:N2.Persistence.NH.ClassMappingGenerator">
            <summary>
            Generates nhibernate mappings for item types.
            </summary>
        </member>
        <member name="M:N2.Persistence.NH.ClassMappingGenerator.GetMapping(System.Type,System.Type,System.String)">
            <summary>Gets the mapping xml for a type</summary>
            <param name="definition">The type to generate mapping for</param>
            <param name="allDefinitions">All definitions in the system.</param>
            <returns>An xml string</returns>
        </member>
        <member name="T:N2.Persistence.NotifiableItemEventArgs">
            <summary>
            Event argument used by <see cref="T:N2.Persistence.IItemNotifier"/> to notify about changes during interception.
            </summary>
        </member>
        <member name="P:N2.Persistence.NotifiableItemEventArgs.WasModified">
            <summary>Set to true when modifying items using this event argument.</summary>
        </member>
        <member name="T:N2.Persistence.NH.TrailTracker">
            <summary>
            Ensures that the ancestral trail on content items is up to date
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.SessionContext">
            <summary>
            A wrapper class that supports the <see cref="T:N2.Web.IClosable"/> interface 
            which means it will be disposed at the end of the request.
            </summary>
        </member>
        <member name="T:N2.Web.IClosable">
            <summary>
            Represents a class that end and be disposed. Used to mark classes in 
            the request context that may be disposed when the request ends.
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.ConfigurationSource">
            <summary>
            An unncessary abstraction that stores the single session factory 
            instance for whoomever may need it.
            </summary>
        </member>
        <member name="T:N2.Persistence.NotVersionableAttribute">
            <summary>
            When used to decorate a content class this attribute tells the edit 
            manager not to store versions of items of that class.
            </summary>
        </member>
        <member name="T:N2.Edit.Targets">
            <summary>
            Target frames in N2's edit interface.
            </summary>
        </member>
        <member name="F:N2.Edit.Targets.Navigation">
            <summary>The navigate/search frame.</summary>
        </member>
        <member name="F:N2.Edit.Targets.Preview">
            <summary>The preview/manipulate frame.</summary>
        </member>
        <member name="F:N2.Edit.Targets.Top">
            <summary>The top window.</summary>
        </member>
        <member name="T:N2.Edit.Trash.NotThrowableAttribute">
            <summary>
            When used on an item definition this attribute prevents it from beeing 
            moved to trash upon deletion.
            </summary>
        </member>
        <member name="T:N2.Definitions.ReplacesParentDefinitionAttribute">
            <summary>
            Replaces the parent item definition with the one decorated by this 
            attribute. This can be used to disable and replace items in external
            class libraries.
            </summary>
        </member>
        <member name="P:N2.Definitions.ReplacesParentDefinitionAttribute.ReplacementMode">
            <summary>
            Replacing the parent without removing it will result in a disabled
            definition. Existing items can be loaded but new ones can't be created
            through the editor UI.
            </summary>
        </member>
        <member name="P:N2.Definitions.ReplacesParentDefinitionAttribute.AssumeParentDiscriminator">
            <summary>
            Set to false to assume the parent item's discriminator. This will cause the 
            decorated type to be loaded instead of the removed.
            </summary>
        </member>
        <member name="M:N2.Details.DisplayableImageAttribute.AddImage(System.Web.UI.Control,N2.ContentItem,System.String,System.String,System.String,System.String)">
            <summary>Adds an image control to the container.</summary>
            <param name="container">The containing control.</param>
            <param name="item">The item containing image informatin.</param>
            <param name="detailName">The detail name on the item.</param>
            <param name="cssClass">The css class to applky to the image element.</param>
            <param name="altText">Alt alternative text to apply to the image element.</param>
            <returns>An image control.</returns>
        </member>
        <member name="M:N2.Details.DisplayableImageAttribute.WriteImage(N2.ContentItem,System.String,System.String,System.String,System.String,System.IO.TextWriter)">
            <summary>Writes an image html to the given writer.</summary>
            <param name="item">The item containing the data.</param>
            <param name="detailName">The name of the property to write.</param>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="P:N2.Details.DisplayableImageAttribute.PreferredSize">
            <summary>The image size to display by default if available.</summary>
        </member>
        <member name="T:N2.Details.EditableImageAttribute">
            <summary>
            Defines an editable image this allows to select an image with the file picker.
            </summary>
            <example>
            	public class MyItem : N2.ContentItem
            	{
            		[N2.Details.EditableImage("Image", 100)]
            		public virtual string ImageUrl { get; set; }
            	}
            </example>
        </member>
        <member name="P:N2.Details.EditableImageAttribute.Alt">
            <summary>Image alt text.</summary>
        </member>
        <member name="P:N2.Details.EditableImageAttribute.CssClass">
            <summary>CSS class on the image element.</summary>
        </member>
        <member name="P:N2.Details.EditableImageAttribute.PreferredSize">
            <summary>The image size to display by default if available.</summary>
        </member>
        <member name="T:N2.Details.EditableLanguagesDropDownAttribute">
            <summary>
            An editable drop down with cultures/languages.
            </summary>
        </member>
        <member name="T:N2.Details.EditableLinkAttribute">
            <summary>
            Defines an editable link to another item on this site. The item is 
            selected through a popup window displaying the item tree.
            </summary>
            <example>
            	[EditableLink("Feed root", 90)]
            	public virtual ContentItem FeedRoot { get; set; }
            </example>
        </member>
        <member name="P:N2.Details.EditableLinkAttribute.SelectableTypes">
            <summary>Content item types that may be selected using this selector.</summary>
        </member>
        <member name="T:N2.Details.WithEditablePublishedRangeAttribute">
            <summary>
            Class applicable editable attribute that adds text boxes for selecting 
            published date range.
            </summary>
        </member>
        <member name="F:N2.Edit.CreationPosition.Before">
            <summary>Before the selected item on the same level.</summary>
        </member>
        <member name="F:N2.Edit.CreationPosition.Below">
            <summary>Below the selected item, i.e. one level down.</summary>
        </member>
        <member name="F:N2.Edit.CreationPosition.After">
            <summary>After the selected item on the same level.</summary>
        </member>
        <member name="T:N2.Edit.EditManager">
            <summary>
            Class responsible for plugins in edit mode, knowling links to edit
            pages and saving interaction.
            </summary>
        </member>
        <member name="M:N2.Edit.EditManager.AddEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Web.UI.Control,System.Security.Principal.IPrincipal)">
            <summary>Adds defined editors and containers to a control.</summary>
            <param name="definition">The definition containing editor information.</param>
            <param name="item">The content item whose editors to add.</param>
            <param name="editorContainer">The container onto which add the editors.</param>
            <param name="user">The user whose credentials will be queried.</param>
        </member>
        <member name="M:N2.Edit.EditManager.AddEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Web.UI.Control,System.Security.Principal.IPrincipal,System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds defined editors and containers to a control.</summary>
            <param name="definition">The definition containing editor information.</param>
            <param name="item">The content item whose editors to add.</param>
            <param name="container">The container onto which add the editors.</param>
            <param name="user">The user whose permissions to use when adding editors.</param>
            <param name="containerNameFilter">Only add editors with these names.</param>
            <param name="containerTypeFilter">Only add editors within this container type.</param>
            <returns>A list of added editors.</returns>
        </member>
        <member name="M:N2.Edit.EditManager.UpdateEditors(N2.Definitions.ItemDefinition,N2.ContentItem,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control},System.Security.Principal.IPrincipal)">
            <summary>Sets initial editor values.</summary>
            <param name="addedEditors">Previously added editor controls.</param>
            <param name="item">The content item to use for update.</param>
            <param name="user">The current user.</param>
        </member>
        <member name="M:N2.Edit.EditManager.UpdateItem(N2.Definitions.ItemDefinition,N2.ContentItem,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control},System.Security.Principal.IPrincipal)">
            <summary>Updates the item by way of letting the defined editable attributes interpret the added editors.</summary>
            <param name="item">The item to update.</param>
            <param name="addedEditors">The previously added editors.</param>
            <param name="user">The user for filtering updatable editors.</param>
            <returns>Whether any property on the item was updated.</returns>
        </member>
        <member name="M:N2.Edit.EditManager.Save(N2.ContentItem,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control},N2.Web.UI.WebControls.ItemEditorVersioningMode,System.Security.Principal.IPrincipal)">
            <summary>Saves an item using values from the supplied item editor.</summary>
            <param name="item">The item to update.</param>
            <param name="addedEditors">The editors to update the item with.</param>
            <param name="versioningMode">How to treat the item beeing saved in respect to versioning.</param>
            <param name="user">The user that is performing the saving.</param>
        </member>
        <member name="M:N2.Edit.EditManager.GetPlugins``1(System.Security.Principal.IPrincipal)">
            <summary>Gets edit mode plugins found in the environment sorted and filtered by the given user.</summary>
            <typeparam name="T">The type of plugin to get.</typeparam>
            <param name="user">The user that should be authorized for the plugin.</param>
            <param name="item">The item to filter item-specific permissions for.</param>
            <returns>An enumeration of plugins.</returns>
        </member>
        <member name="M:N2.Edit.EditManager.ApplyModifications(N2.Definitions.ItemDefinition,System.Collections.Generic.IDictionary{System.String,System.Web.UI.Control})">
            <summary>Applies defined modifications to the editors.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.OnAddedEditor(N2.Web.UI.ControlEventArgs)">
            <summary>
            Triggers the AddedEditor event.
            </summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetDeleteUrl(N2.ContentItem)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetEditExistingItemUrl(N2.ContentItem)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetEditInterfaceUrl">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetEditInterfaceUrl(N2.ContentItem)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetEditNewPageUrl(N2.ContentItem,N2.Definitions.ItemDefinition,System.String,N2.Edit.CreationPosition)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetManagementInterfaceUrl">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetNavigationUrl(N2.INode)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetPreviewUrl(N2.INode)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetSelectNewItemUrl(N2.ContentItem)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="M:N2.Edit.EditManager.GetSelectNewItemUrl(N2.ContentItem,System.String)">
            <summary>Use EditUrlManager instead.</summary>
        </member>
        <member name="P:N2.Edit.EditManager.MaximumNumberOfVersions">
            <summary>Number of item versions to keep.</summary>
        </member>
        <member name="P:N2.Edit.EditManager.EnableVersioning">
            <summary>Gets or sets wether a version is saved when updating items.</summary>
        </member>
        <member name="P:N2.Edit.EditManager.UploadFolders">
            <summary>Gets folders paths on the server where users are allowed to upload content through the interface.</summary>
        </member>
        <member name="E:N2.Edit.EditManager.ItemSaved">
            <summary>
            Event that is triggered when page is saved/published
            </summary>
        </member>
        <member name="E:N2.Edit.EditManager.AddedEditor">
            <summary>Occurs when a detail editor (a control that contains an editor) is added.</summary>
        </member>
        <member name="E:N2.Edit.EditManager.SavingVersion">
            <summary>Occurs when a version is about to be saved.</summary>
        </member>
        <member name="T:N2.Edit.EditToolbarPluginAttribute">
            <summary>
            A plugin added to the edit item toolbar area.
            </summary>
        </member>
        <member name="T:N2.Edit.Trash.ITrashCan">
            <summary>
            Container of scrapped items.
            </summary>
        </member>
        <member name="P:N2.Edit.Trash.ITrashCan.Enabled">
            <summary>Whether the trash functionality is enabled.</summary>
        </member>
        <member name="P:N2.Edit.Trash.ITrashCan.PurgeInterval">
            <summary>Number of days after which deleted items should be purged from trash.</summary>
        </member>
        <member name="P:N2.Edit.Trash.ITrashCan.Children">
            <summary>Currently thrown items.</summary>
        </member>
        <member name="T:N2.Edit.Trash.ITrashHandler">
            <summary>
            Service interface implemented by the trash handler implementation.
            </summary>
        </member>
        <member name="M:N2.Edit.Trash.ITrashHandler.CanThrow(N2.ContentItem)">
            <summary>Checks if the trash is enabled, the item is not already thrown and for the NotThrowable attribute.</summary>
            <param name="affectedItem">The item to check.</param>
            <returns>True if the item may be thrown.</returns>
        </member>
        <member name="M:N2.Edit.Trash.ITrashHandler.IsInTrash(N2.ContentItem)">
            <summary>Determines wether an item has been thrown away.</summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is in the scraps.</returns>
        </member>
        <member name="M:N2.Edit.Trash.ITrashHandler.ExpireTrashedItem(N2.ContentItem)">
            <summary>Expires an item that has been thrown so that it's not accessible to external users.</summary>
            <param name="item">The item to restore.</param>
        </member>
        <member name="M:N2.Edit.Trash.ITrashHandler.Restore(N2.ContentItem)">
            <summary>Restores an item to the original location.</summary>
            <param name="item">The item to restore.</param>
        </member>
        <member name="M:N2.Edit.Trash.ITrashHandler.RestoreValues(N2.ContentItem)">
            <summary>Removes expiry date and metadata set during throwing.</summary>
            <param name="item">The item to reset.</param>
        </member>
        <member name="M:N2.Edit.Trash.ITrashHandler.Throw(N2.ContentItem)">
            <summary>Throws an item in a way that it later may be restored to it's original location at a later stage.</summary>
            <param name="item">The item to throw.</param>
        </member>
        <member name="M:N2.Edit.Trash.ITrashHandler.PurgeOldItems">
            <summary>Delete items lying in trash for longer than the specified interval.</summary>
        </member>
        <member name="P:N2.Edit.Trash.ITrashHandler.TrashContainer">
            <summary>The container of thrown items.</summary>
        </member>
        <member name="E:N2.Edit.Trash.ITrashHandler.ItemThrowing">
            <summary>Occurs before an item is thrown.</summary>
        </member>
        <member name="E:N2.Edit.Trash.ITrashHandler.ItemThrowed">
            <summary>Occurs after an item has been thrown.</summary>
        </member>
        <member name="T:N2.Edit.Web.EditPageUserControl">
            <summary>
            A user control that provides access to the edit item page.
            </summary>
        </member>
        <member name="T:N2.Edit.Web.EditUserControl">
            <summary>
            Base class for user controls in the edit interface.
            </summary>
        </member>
        <member name="P:N2.Edit.Web.EditUserControl.Engine">
            <summary>The default engine driving this application.</summary>
        </member>
        <member name="P:N2.Edit.Web.EditUserControl.Selection">
            <summary>Helps to select items from query string.</summary>
        </member>
        <member name="T:N2.Integrity.IntegrityMappingAttribute">
            <summary>
            Attribute used to map allowed children to an item type. This attribute 
            is useful in scenarios where you can't change the item definitions, 
            e.g. if they are defined in an external assembly.
            </summary>
        </member>
        <member name="T:N2.Integrity.AllowedZones">
            <summary>
            Determines which zones an item is allowed to exist in.
            </summary>
        </member>
        <member name="F:N2.Integrity.AllowedZones.All">
            <summary>The item may be added to a zone with any name.</summary>
        </member>
        <member name="F:N2.Integrity.AllowedZones.AllNamed">
            <summary>The item may be added to zones with a name but not without zones.</summary>
        </member>
        <member name="F:N2.Integrity.AllowedZones.SpecifiedZones">
            <summary>Allowed in the specified zones. This is the default setting.</summary>
        </member>
        <member name="F:N2.Integrity.AllowedZones.None">
            <summary>The item is not allowed to be placed in a zone.</summary>
        </member>
        <member name="T:N2.Integrity.IntegrityMappingOption">
            <summary>
            Flag used to control how types defined by the
            <see cref="T:N2.Integrity.IntegrityMappingAttribute"/> are added to item definitions.
            </summary>
        </member>
        <member name="F:N2.Integrity.IntegrityMappingOption.AddToExising">
            <summary>Add defined types to existing ones.</summary>
        </member>
        <member name="F:N2.Integrity.IntegrityMappingOption.RemoveOthers">
            <summary>Add defined types to existing ones and remove existing types not fullfilling defined types.</summary>
        </member>
        <member name="T:N2.Integrity.IntegrityEnforcer">
            <summary>
            Subscribes to persister envents and throws exceptions if something 
            illegal is about to be done.
            </summary>
        </member>
        <member name="P:N2.Integrity.IntegrityEnforcer.Enabled">
            <summary>Gets or sets wether the integrity is enforced.</summary>
        </member>
        <member name="M:N2.ItemAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of ItemAttribute class.
            </summary>
            <param name="title">The title used when presenting this item type to editors.</param>
        </member>
        <member name="M:N2.ItemAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of ItemAttribute class.</summary>
            <param name="title">The title used when presenting this item type to editors.</param>
            <param name="name">The name/discriminator needed to map the appropriate type with content data when retrieving from persistence. When this is null the type's full name is used.</param>
        </member>
        <member name="M:N2.ItemAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Initializes a new instance of ItemAttribute class.</summary>
            <param name="title">The title used when presenting this item type to editors.</param>
            <param name="name">The name/discriminator needed to map the appropriate type with content data when retrieving from persistence. When this is null the type's name is used.</param>
            <param name="description">The description of this item.</param>
            <param name="toolTip">The tool tip displayed when hovering over this item type.</param>
            <param name="sortOrder">The order of this type compared to other items types.</param>
        </member>
        <member name="T:N2.Persistence.NH.ConfigurationBuilder">
            <summary>
            Builds NHibernate configuration by reading hbm files and generating 
            mappings for item types without hbm.xml mappings files.
            </summary>
        </member>
        <member name="M:N2.Persistence.NH.ConfigurationBuilder.#ctor(N2.Definitions.IDefinitionProvider[],N2.Persistence.NH.ClassMappingGenerator,N2.Web.IWebContext,N2.Persistence.NH.ConfigurationBuilderParticipator[],N2.Configuration.DatabaseSection,System.Configuration.ConnectionStringsSection)">
            <summary>Creates a new instance of the <see cref="T:N2.Persistence.NH.ConfigurationBuilder"/>.</summary>
        </member>
        <member name="M:N2.Persistence.NH.ConfigurationBuilder.SetupProperties(N2.Configuration.DatabaseSection,System.Configuration.ConnectionStringsSection)">
            <summary>Sets properties configuration dictionary based on configuration in the database section.</summary>
            <param name="config">The database section configuration.</param>
            <param name="connectionStrings">Connection strings from configuration</param>
        </member>
        <member name="M:N2.Persistence.NH.ConfigurationBuilder.BuildConfiguration">
            <summary>Builds a <see cref="T:NHibernate.Cfg.Configuration"/> by adding properties, default assemblies and generating class mappings for unmapped types.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Persistence.NH.ConfigurationBuilder.AddMapping(NHibernate.Cfg.Configuration,System.String)">
            <summary>Adds mappings to the configuration.</summary>
            <param name="cfg">The configuration to add the mappings to.</param>
            <param name="name">The resource name of the embedded resource.</param>
        </member>
        <member name="M:N2.Persistence.NH.ConfigurationBuilder.GenerateMappings(NHibernate.Cfg.Configuration)">
            <summary>Generates subclasses nhibernate xml configuration as an alternative to NHibernate definition file and adds them to the configuration.</summary>
            <param name="cfg">The nhibernate configuration to build.</param>
        </member>
        <member name="M:N2.Persistence.NH.ConfigurationBuilder.AddAssemblies(NHibernate.Cfg.Configuration)">
            <summary>Adds default assemblies to NHibernate configuration.</summary>
            <param name="cfg"></param>
        </member>
        <member name="M:N2.Persistence.NH.ConfigurationBuilder.AddProperties(NHibernate.Cfg.Configuration)">
            <summary>Adds properties to NHibernate configuration.</summary>
            <param name="cfg"></param>
        </member>
        <member name="M:N2.Persistence.NH.ConfigurationBuilder.BuildSessionFactory">
            <summary>Builds a configuration and returns a new <see cref="T:NHibernate.ISessionFactory"/></summary>
            <returns>A new <see cref="T:NHibernate.ISessionFactory"/>.</returns>
        </member>
        <member name="M:N2.Persistence.NH.ConfigurationBuilder.IsMapped(NHibernate.Cfg.Configuration,System.Type)">
            <summary>Checks whether a type's mapping is added to the NHibernate configuration.</summary>
            <param name="cfg">The nhibernate configuration to investigate.</param>
            <param name="type">The type to look for</param>
            <returns>True if the type is mapped</returns>
        </member>
        <member name="P:N2.Persistence.NH.ConfigurationBuilder.Assemblies">
            <summary>Gets assemblies that will be added to the NHibernate configuration.</summary>
        </member>
        <member name="P:N2.Persistence.NH.ConfigurationBuilder.Properties">
            <summary>Gets NHibernate configuration properties.</summary>
        </member>
        <member name="T:N2.Persistence.NH.ContentPersister">
            <summary>
            A wrapper for NHibernate persistence functionality.
            </summary>
        </member>
        <member name="M:N2.Persistence.NH.ContentPersister.#ctor(N2.Persistence.IRepository{System.Int32,N2.ContentItem},N2.Persistence.NH.INHRepository{System.Int32,N2.Details.ContentDetail},N2.Persistence.Finder.IItemFinder)">
            <summary>Creates a new instance of the DefaultPersistenceManager.</summary>
        </member>
        <member name="M:N2.Persistence.NH.ContentPersister.Get(System.Int32)">
            <summary>Gets an item by id</summary>
            <param name="id">The id of the item to load</param>
            <returns>The item if one with a matching id was found, otherwise null.</returns>
        </member>
        <member name="M:N2.Persistence.NH.ContentPersister.Get``1(System.Int32)">
            <summary>Gets an item by id</summary>
            <typeparam name="T">The type of object that is expected</typeparam>
            <param name="id">The id of the item to load</param>
            <returns>The item if one with a matching id was found, otherwise null.</returns>
        </member>
        <member name="M:N2.Persistence.NH.ContentPersister.Save(N2.ContentItem)">
            <summary>Saves or updates an item storing it in database</summary>
            <param name="unsavedItem">Item to save</param>
        </member>
        <member name="M:N2.Persistence.NH.ContentPersister.Delete(N2.ContentItem)">
            <summary>Deletes an item an all sub-items</summary>
            <param name="itemNoMore">The item to delete</param>
        </member>
        <member name="M:N2.Persistence.NH.ContentPersister.Move(N2.ContentItem,N2.ContentItem)">
            <summary>Move an item to a destination</summary>
            <param name="source">The item to move</param>
            <param name="destination">The destination below which to place the item</param>
        </member>
        <member name="M:N2.Persistence.NH.ContentPersister.Copy(N2.ContentItem,N2.ContentItem)">
            <summary>Copies an item and all sub-items to a destination</summary>
            <param name="source">The item to copy</param>
            <param name="destination">The destination below which to place the copied item</param>
            <returns>The copied item</returns>
        </member>
        <member name="M:N2.Persistence.NH.ContentPersister.Copy(N2.ContentItem,N2.ContentItem,System.Boolean)">
            <summary>Copies an item and all sub-items to a destination</summary>
            <param name="source">The item to copy</param>
            <param name="destination">The destination below which to place the copied item</param>
            <param name="includeChildren">Whether child items should be copied as well.</param>
            <returns>The copied item</returns>
        </member>
        <member name="M:N2.Persistence.NH.ContentPersister.Flush">
            <summary>Persists changes.</summary>
        </member>
        <member name="E:N2.Persistence.NH.ContentPersister.ItemSaving">
            <summary>Occurs before an item is saved</summary>
        </member>
        <member name="E:N2.Persistence.NH.ContentPersister.ItemSaved">
            <summary>Occurs when an item has been saved</summary>
        </member>
        <member name="E:N2.Persistence.NH.ContentPersister.ItemDeleting">
            <summary>Occurs before an item is deleted</summary>
        </member>
        <member name="E:N2.Persistence.NH.ContentPersister.ItemDeleted">
            <summary>Occurs when an item has been deleted</summary>
        </member>
        <member name="E:N2.Persistence.NH.ContentPersister.ItemMoving">
            <summary>Occurs before an item is moved</summary>
        </member>
        <member name="E:N2.Persistence.NH.ContentPersister.ItemMoved">
            <summary>Occurs when an item has been moved</summary>
        </member>
        <member name="E:N2.Persistence.NH.ContentPersister.ItemCopying">
            <summary>Occurs before an item is copied</summary>
        </member>
        <member name="E:N2.Persistence.NH.ContentPersister.ItemCopied">
            <summary>Occurs when an item has been copied</summary>
        </member>
        <member name="E:N2.Persistence.NH.ContentPersister.ItemLoaded">
            <summary>Occurs when an item is loaded</summary>
        </member>
        <member name="T:N2.Persistence.NH.SessionProvider">
            <summary>
            Provides access to opened nhibernate sessions.
            </summary>
        </member>
        <member name="P:N2.Persistence.NH.SessionProvider.NHSessionFactory">
            <summary>Gets the NHibernate session factory</summary>
        </member>
        <member name="M:N2.Plugin.IPluginFinder.GetPlugins``1(System.Security.Principal.IPrincipal)">
            <summary>Gets plugins found in the environment sorted and filtered by the given user.</summary>
            <typeparam name="T">The type of plugin to get.</typeparam>
            <param name="user">The user that should be authorized for the plugin.</param>
            <returns>An enumeration of plugins.</returns>
        </member>
        <member name="M:N2.Plugin.IPluginFinder.GetPlugins``1">
            <summary>Gets plugins found in the environment sorted.</summary>
            <typeparam name="T">The type of plugin to get.</typeparam>
            <returns>An enumeration of plugins.</returns>
        </member>
        <member name="T:N2.Plugin.PluginFinder">
            <summary>
            Investigates the execution environment to find plugins.
            </summary>
        </member>
        <member name="M:N2.Plugin.PluginFinder.GetPlugins``1(System.Security.Principal.IPrincipal)">
            <summary>Gets plugins found in the environment sorted and filtered by the given user.</summary>
            <typeparam name="T">The type of plugin to get.</typeparam>
            <param name="user">The user that should be authorized for the plugin.</param>
            <returns>An enumeration of plugins.</returns>
        </member>
        <member name="M:N2.Plugin.PluginFinder.FindPlugins">
            <summary>Finds and sorts plugin defined in known assemblies.</summary>
            <returns>A sorted list of plugins.</returns>
        </member>
        <member name="T:N2.Plugin.Scheduling.Heart">
            <summary>
            A wrapper for a timer that beats at a certain interval.
            </summary>
        </member>
        <member name="T:N2.Plugin.Scheduling.IHeart">
            <summary>
            Interface of a timer wrapper that beats at a certain interval.
            </summary>
        </member>
        <member name="E:N2.Plugin.Scheduling.Heart.Beat">
            <summary>Occurs when a time unit has elapsed.</summary>
        </member>
        <member name="T:N2.Plugin.Scheduling.ScheduledAction">
            <summary>
            Base class for actions that can be scheduled to be executed by the 
            system at certain intervals. Inherit from this class and decorate using 
            the <see cref="T:N2.Plugin.Scheduling.ScheduleExecutionAttribute"/> to enable.
            </summary>
        </member>
        <member name="M:N2.Plugin.Scheduling.ScheduledAction.Execute">
            <summary>The method that executes the action. Implement in a subclass.</summary>
        </member>
        <member name="M:N2.Plugin.Scheduling.ScheduledAction.ShouldExecute">
            <summary>Examines the properties to determine whether the action should run.</summary>
        </member>
        <member name="M:N2.Plugin.Scheduling.ScheduledAction.OnError(System.Exception)">
            <summary>
            This method will be called when error occured in the action's Execute() method. 
            It can be overrided to write custom error handling routine. 
            The default behavior is to call IErrorHandler.Notify() with the exception.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:N2.Plugin.Scheduling.ScheduledAction.Engine">
            <summary>The engine ivoking this action.</summary>
        </member>
        <member name="P:N2.Plugin.Scheduling.ScheduledAction.ErrorCount">
            <summary>The number of consecutive times this action has failed.</summary>
        </member>
        <member name="P:N2.Plugin.Scheduling.ScheduledAction.IsExecuting">
            <summary>Whether the action is currently executing.</summary>
        </member>
        <member name="P:N2.Plugin.Scheduling.ScheduledAction.Interval">
            <summary>The interval before next execution.</summary>
        </member>
        <member name="P:N2.Plugin.Scheduling.ScheduledAction.LastExecuted">
            <summary>When the action was last executed.</summary>
        </member>
        <member name="P:N2.Plugin.Scheduling.ScheduledAction.Repeat">
            <summary>Wheter the action should run again.</summary>
        </member>
        <member name="T:N2.Plugin.Scheduling.Repeat">
            <summary>
            Specifies wether an action should be executed more than once.
            </summary>
        </member>
        <member name="F:N2.Plugin.Scheduling.Repeat.Once">
            <summary>Execute the action once and then remove it.</summary>
        </member>
        <member name="F:N2.Plugin.Scheduling.Repeat.Indefinitely">
            <summary>Execute the action after the specified duration as long as the application is running.</summary>
        </member>
        <member name="T:N2.Plugin.Scheduling.ScheduleExecutionAttribute">
            <summary>
            Defines how often a scheduled action should execute.
            </summary>
        </member>
        <member name="T:N2.Plugin.Scheduling.Scheduler">
            <summary>
            Maintains a list of scheduler actions and checks wether it's time to 
            execute them.
            </summary>
        </member>
        <member name="T:N2.Plugin.Scheduling.TimeUnit">
            <summary>
            Specifies the unit of a duration integer.
            </summary>
        </member>
        <member name="T:N2.Security.DynamicPermissionMap">
            <summary>
            Maps a permission to a set of users and roles. Supports authorizing
            users against supplied content items. 
            </summary>
        </member>
        <member name="T:N2.Security.PermissionMap">
            <summary>
            Maps a permission to a set of users and roles.
            </summary>
        </member>
        <member name="M:N2.Security.PermissionMap.IsInRoles(System.Security.Principal.IPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Asks the user if it is in any of the roles.</summary>
            <param name="user">The user to check.</param>
            <param name="roles">The roles to look for.</param>
            <returns>True if the user is in any of the given roles or the roles are null.</returns>
        </member>
        <member name="M:N2.Security.DynamicPermissionMap.GetRoles(N2.ContentItem,N2.Security.Permission)">
            <summary>Gets roles allowed for a certain permission stored in a content item.</summary>
            <param name="item">The item whose permitted roles get.</param>
            <param name="permission">The permission asked for.</param>
            <returns>Permitted roles.</returns>
        </member>
        <member name="T:N2.Security.SecurityManager">
            <summary>
            Manages security by subscribing to persister events and providing 
            methods to authorize request event.
            </summary>
        </member>
        <member name="M:N2.Security.SecurityManager.#ctor(N2.Web.IWebContext,N2.Configuration.EditSection)">
            <summary>Creates a new instance of the security manager.</summary>
        </member>
        <member name="M:N2.Security.SecurityManager.IsPublished(N2.ContentItem)">
            <summary>Check whether an item is published, i.e. it's published and isn't expired.</summary>
            <param name="item">The item to check.</param>
            <returns>A boolean indicating whether the item is published.</returns>
        </member>
        <member name="M:N2.Security.SecurityManager.IsEditor(System.Security.Principal.IPrincipal)">
            <summary>Find out if a princpial has edit access.</summary>
            <param name="user">The princpial to check.</param>
            <returns>A boolean indicating whether the principal has edit access.</returns>
        </member>
        <member name="M:N2.Security.SecurityManager.IsAdmin(System.Security.Principal.IPrincipal)">
            <summary>Find out if a princpial has admin access.</summary>
            <param name="user">The princpial to check.</param>
            <returns>A boolean indicating whether the principal has admin access.</returns>
        </member>
        <member name="M:N2.Security.SecurityManager.IsAuthorized(N2.ContentItem,System.Security.Principal.IPrincipal)">
            <summary>Find out if a principal is allowed to access an item.</summary>
            <param name="item">The item to check against.</param>
            <param name="user">The principal to check for allowance.</param>
            <returns>True if the item has public access or the principal is allowed to access it.</returns>
        </member>
        <member name="M:N2.Security.SecurityManager.IsAuthorized(System.Security.Principal.IPrincipal,N2.Security.Permission)">
            <summary>Find out if a principal has a certain permission by default.</summary>
            <param name="user">The principal to check for allowance.</param>
            <param name="permission">The type of permission to map against.</param>
            <returns>True if the system is configured to allow the user to the given permission.</returns>
        </member>
        <member name="M:N2.Security.SecurityManager.IsAuthorized(System.Security.Principal.IPrincipal,N2.ContentItem,N2.Security.Permission)">
            <summary>Find out if a principal has a certain permission for an item.</summary>
            <param name="item">The item to check against.</param>
            <param name="user">The principal to check for allowance.</param>
            <param name="permission">The type of permission to map against.</param>
            <returns>True if the item has public access or the principal is allowed to access it.</returns>
        </member>
        <member name="M:N2.Security.SecurityManager.CopyPermissions(N2.ContentItem,N2.ContentItem)">
            <summary>Copies permissions from the source to the destination.</summary>
            <param name="source">The item whose permissions to carry over.</param>
            <param name="destination">The item whose permissions will be modified.</param>
        </member>
        <member name="M:N2.Security.SecurityManager.GetPermissions(System.Security.Principal.IPrincipal,N2.ContentItem)">
            <summary>Gets the permissions for a certain user towards an item.</summary>
            <param name="user">The user whose permissoins to get.</param>
            <param name="item">The item for which permissions should be retrieved.</param>
            <returns>A permission flag.</returns>
        </member>
        <member name="P:N2.Security.SecurityManager.EditorNames">
            <summary>
            Gets user names considered as editors.
            </summary>
        </member>
        <member name="P:N2.Security.SecurityManager.EditorRoles">
            <summary>
            Gets roles considered as editors.
            </summary>
        </member>
        <member name="P:N2.Security.SecurityManager.WriterRoles">
            <summary>
            Gets roles considered as writers.
            </summary>
        </member>
        <member name="P:N2.Security.SecurityManager.AdminNames">
            <summary>
            Gets user names considered as administrators.
            </summary>
        </member>
        <member name="P:N2.Security.SecurityManager.AdminRoles">
            <summary>
            Gets or sets roles considered as administrators.
            </summary>
        </member>
        <member name="P:N2.Security.SecurityManager.Enabled">
            <summary>Gets or sets whether the security manager is enabled.</summary>
        </member>
        <member name="P:N2.Security.SecurityManager.ScopeEnabled">
            <summary>Gets or sets whether the security manager is enabled in the current scope. This can be used to override the security features in certain situations.</summary>
        </member>
        <member name="T:N2.Web.EventBroker">
            <summary>
            A broker for events from the http application. The purpose of this 
            class is to reduce the risk of temporary errors during initialization
            causing the site to be crippled.
            </summary>
        </member>
        <member name="M:N2.Web.EventBroker.Attach(System.Web.HttpApplication)">
            <summary>Attaches to events from the application instance.</summary>
        </member>
        <member name="M:N2.Web.EventBroker.Application_Disposed(System.Object,System.EventArgs)">
            <summary>Detaches events from the application instance.</summary>
        </member>
        <member name="M:N2.Web.EventBroker.IsStaticResource(System.Object)">
            <summary>Returns true if the requested resource is one of the typical resources that needn't be processed by the cms engine.</summary>
            <param name="sender">The event sender, probably a http application.</param>
            <returns>True if the request targets a static resource file.</returns>
            <remarks>
            These are the file extensions considered to be static resources:
            .css
            .gif
            .png 
            .jpg
            .jpeg
            .js
            .axd
            .ashx
            </remarks>
        </member>
        <member name="P:N2.Web.EventBroker.Instance">
            <summary>Accesses the event broker singleton instance.</summary>
        </member>
        <member name="T:N2.Web.ConventionTemplateAttribute">
            <summary>
            Tells the system to look for the ASPX template associated with the
            attribute content item in the default location. This is typically
            "~/UI/Views/" or the location defined by any [ConventionTemplateDirectory]
            attribute in the same assembly.
            </summary>
        </member>
        <member name="M:N2.Web.ConventionTemplateAttribute.#ctor(System.String)">
            <summary>
            Uses the provided template name instead of the class name to
            find the template's location.
            </summary>
            <param name="otherTemlpateName">The name used to find the template.</param>
        </member>
        <member name="T:N2.Web.ConventionTemplateDirectoryAttribute">
            <summary>
            Used in combination with the [ConventionTemplate] attribute to
            point out the location of content item templates. All content
            item types with a ConventionTemplate attribute in the same 
            assembly as this attribute are affected by this optin.
            </summary>
        </member>
        <member name="M:N2.Web.ConventionTemplateDirectoryAttribute.GetDirectory(System.Type)">
            <summary>
            Gets the directory specified as convention for the type. By default this is
            the directory specified by a ConventionTemplateDirectoryAttribute in the 
            same assembly as the supplied type, or "~/UI/Views/" if no such attribute is 
            found.
            </summary>
            <param name="itemType">The type of item whose convention directory to get.</param>
            <returns>The virtual directory path for the specified item type.</returns>
        </member>
        <member name="T:N2.Web.PathDictionary">
            <summary>
            Provides access to a static dictionary of item path finders. These
            are used to map a content item to the appropriate template (aspx)
            depending on the url action.
            </summary>
        </member>
        <member name="M:N2.Web.PathDictionary.GetFinders(System.Type)">
            <summary>Looks up path finders from a static cache.</summary>
            <param name="itemType">The type of item whose path finders to get.</param>
            <returns>A list of path finders.</returns>
        </member>
        <member name="M:N2.Web.PathDictionary.PrependFinder(System.Type,N2.Web.IPathFinder)">
            <summary>Adds a path finder to an item.</summary>
            <param name="itemType">The type to add the finder to.</param>
            <param name="finder">The finder to add.</param>
        </member>
        <member name="M:N2.Web.PathDictionary.AppendFinder(System.Type,N2.Web.IPathFinder)">
            <summary>Adds a path finder to an item.</summary>
            <param name="itemType">The type to add the finder to.</param>
            <param name="finder">The finder to add.</param>
        </member>
        <member name="M:N2.Web.PathDictionary.RemoveFinder(System.Type,N2.Web.IPathFinder)">
            <summary>Adds a path finder to an item.</summary>
            <param name="itemType">The type to add the finder to.</param>
            <param name="finder">The finder to add.</param>
        </member>
        <member name="M:N2.Web.PathDictionary.FindFinders(System.Type)">
            <summary>Looks up path finders for a certain type using reflection.</summary>
            <param name="itemType">The type of item whose path finders to get.</param>
            <returns>A list of path finders that decorates the item class and it's base types.</returns>
        </member>
        <member name="M:N2.Web.PathDictionary.GetPath(N2.ContentItem,System.String)">
            <summary>Resolves a path based on the remaining url.</summary>
            <param name="item">The current item beeing navigated.</param>
            <param name="remainingUrl">The url remaining from previous segments.</param>
            <returns>A path data object that may be empty.</returns>
        </member>
        <member name="T:N2.Web.GoogleSiteMapHandler">
            <summary>
            Provides a sitemap format file (XML) for the site, accessed via
            http://www.yoursite.com/GoogleSiteMapHandler.axd
            
            See sitemap.org for details on what's outputted.
            </summary>
            <remarks>
            This doesn't handle multiple sites and a lot of settings are hardcoded for now.
            
            You can ping google to update your sitemap (along with the webmaster tools) using
            http://www.google.com/ping?sitemap=url
            </remarks>
        </member>
        <member name="M:N2.Web.GoogleSiteMapHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Entry point for the handler.
            </summary>
        </member>
        <member name="M:N2.Web.GoogleSiteMapHandler.RecurseTree(System.Collections.Generic.IList{N2.ContentItem},N2.ContentItem)">
            <summary>
            Builds up the entire site tree recursively, adding items to the list
            </summary>
            <param name="list">This should be an empty list</param>
            <param name="parent">This should be called using the root item</param>
        </member>
        <member name="T:N2.Web.Parts.IAddablePart">
            <summary>
            Content items implementing this interface are detected by the part 
            content adapter and added with this method instead of the default.
            </summary>
        </member>
        <member name="M:N2.Web.Parts.IAddablePart.AddTo(System.Web.UI.Control)">
            <summary>Adds the content item's interface control to the container.</summary>
            <param name="container">The containing zone.</param>
            <returns>The control that was added.</returns>
        </member>
        <member name="T:N2.Web.RequestAdapter">
            <summary>
            The default controller for N2 content items. Controls behaviour such as 
            rewriting, authorization and more. This class can be used as base class 
            for customizing the behaviour (decorate the inherited class with the 
            [Adapts] attribute).
            </summary>
        </member>
        <member name="M:N2.Web.RequestAdapter.RewriteRequest(N2.Web.PathData,N2.Configuration.RewriteMethod)">
            <summary>Rewrites a dynamic/computed url to an actual template url.</summary>
        </member>
        <member name="M:N2.Web.RequestAdapter.GetHandlerPath(N2.Web.PathData)">
            <summary>Gets the path to the handler (aspx template) to rewrite to.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Web.RequestAdapter.InjectCurrentPage(N2.Web.PathData,System.Web.IHttpHandler)">
            <summary>Inject the current page into the page handler.</summary>
            <param name="handler">The handler executing the request.</param>
        </member>
        <member name="M:N2.Web.RequestAdapter.AuthorizeRequest(N2.Web.PathData,System.Security.Principal.IPrincipal)">
            <summary>Authorize the user against the current content item. Throw an exception if not authorized.</summary>
            <param name="user">The user for which to authorize the request.</param>
        </member>
        <member name="T:N2.Web.AdaptiveContext">
            <summary>
            A web context wrapper that maps to the web request context for calls in 
            web application scope and thread context when no request has been made 
            (e.g. when executing code in scheduled action).
            </summary>
        </member>
        <member name="M:N2.Web.AdaptiveContext.ToAbsolute(System.String)">
            <summary>Converts a virtual path to an an absolute path. E.g. ~/hello.aspx -> /MyVirtualDirectory/hello.aspx.</summary>
            <param name="virtualPath">The virtual url to make absolute.</param>
            <returns>The absolute url.</returns>
        </member>
        <member name="M:N2.Web.AdaptiveContext.ToAppRelative(System.String)">
            <summary>Converts an absolute url to an app relative path. E.g. /MyVirtualDirectory/hello.aspx -> ~/hello.aspx.</summary>
            <param name="virtualPath">The absolute url to convert.</param>
            <returns>An app relative url.</returns>
        </member>
        <member name="M:N2.Web.AdaptiveContext.MapPath(System.String)">
            <summary>Maps a virtual path to a physical disk path.</summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:N2.Web.AdaptiveContext.RewritePath(System.String)">
            <summary>Rewrites the request to the given path.</summary>
            <param name="path">The path to the template that will handle the request.</param>
        </member>
        <member name="M:N2.Web.AdaptiveContext.RewritePath(System.String,System.String)">
            <summary>Rewrites the request to the given path.</summary>
            <param name="path">The path to the template that will handle the request.</param>
            <param name="query">The query string to rewrite to.</param>
        </member>
        <member name="M:N2.Web.AdaptiveContext.ClearError">
            <summary>Calls into HttpContext.ClearError().</summary>
        </member>
        <member name="M:N2.Web.AdaptiveContext.Close">
            <summary>Disposes request items that needs disposing. This method should be called at the end of each request.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.IsWeb">
            <summary>Gets wether there is a web context availabe.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.CurrentContext">
            <summary>Returns either the web or the thread context depending on <see cref="P:N2.Web.AdaptiveContext.IsWeb"/>.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.RequestItems">
            <summary>Gets a dictionary of request scoped items.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.User">
            <summary>Gets the current user principal (may be null).</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.Request">
            <summary>The current request object.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.Response">
            <summary>The current response object.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.Handler">
            <summary>The handler associated with this request.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.CurrentPage">
            <summary>A page instance stored in the request context.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.CurrentPath">
            <summary>The template used to serve this request.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.SkipAuthorization">
            <summary>Specifies whether the UrlAuthorizationModule should skip authorization for the current request.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.PhysicalPath">
            <summary>The physical path on disk to the requested page.</summary>
        </member>
        <member name="P:N2.Web.AdaptiveContext.Url">
            <summary>The host part of the requested url, e.g. http://n2cms.com/path/to/a/page.aspx?some=query.</summary>
        </member>
        <member name="M:N2.Web.CachingUrlParserDecorator.BuildUrl(N2.ContentItem)">
            <summary>Calculates an item url by walking it's parent path.</summary>
            <param name="item">The item whose url to compute.</param>
            <returns>A friendly url to the supplied item.</returns>
        </member>
        <member name="M:N2.Web.CachingUrlParserDecorator.IsRootOrStartPage(N2.ContentItem)">
            <summary>Checks if an item is start or root page</summary>
            <param name="item">The item to check</param>
            <returns>True if the item is a start page or a root page</returns>
        </member>
        <member name="M:N2.Web.CachingUrlParserDecorator.ResolvePath(N2.Web.Url)">
            <summary>Finds the content item and the template associated with an url.</summary>
            <param name="url">The url to the template to locate.</param>
            <returns>A TemplateData object. If no template was found the object will have empty properties.</returns>
        </member>
        <member name="M:N2.Web.CachingUrlParserDecorator.Parse(System.String)">
            <summary>Finds an item by traversing names from the starting point root.</summary>
            <param name="url">The url that should be traversed.</param>
            <returns>The content item matching the supplied url.</returns>
        </member>
        <member name="M:N2.Web.CachingUrlParserDecorator.StripDefaultDocument(System.String)">
            <summary>Removes a trailing Default.aspx from an URL.</summary>
            <param name="path">A URL path without query strings from which to remove any trailing Default.aspx.</param>
            <returns>The same path or one stripped of the remaining default document segment.</returns>
        </member>
        <member name="T:N2.Web.Compilation.HasValueExpressionBuilder">
            <summary>
            Gives a true/false value indicating wether a certain expressions would 
            give a value. Useful in situations where we need to hide a webcontrol 
            when there is no value to give it.
            </summary>
            <example>
            &lt;asp:Image ImageUrl="&lt;%$ CurrentItem: MainImageUrl %&gt;" Visible="&lt;%$ HasValue: MainImageUrl %&gt;" runat="server" /&gt;
            </example>
        </member>
        <member name="M:N2.Web.Compilation.HasValueExpressionBuilder.HasValue(System.String)">
            <summary>Gets wether a certain exression has a value.</summary>
            <param name="expression">The expression to check.</param>
            <returns>True if the expression would result in a non null or non empty-string value.</returns>
        </member>
        <member name="P:N2.Web.Compilation.HasValueExpressionBuilder.CurrentItemInContext">
            <summary>The item associated with the currently created control.</summary>
        </member>
        <member name="P:N2.Web.Compilation.HasValueExpressionBuilder.ExpressionFormat">
            <summary>Gets the expression format for this expression.</summary>
        </member>
        <member name="T:N2.Web.Compilation.StartPageExpressionBuilder">
            <summary>
            Gets a value from the current start page.
            </summary>
            <example>
            &lt;asp:Label text="&lt;%$ StartPage: Title %&gt;" CssClass="siteName" runat="server" /&gt;
            </example>
        </member>
        <member name="M:N2.Web.Compilation.StartPageExpressionBuilder.GetStartPageValue(System.String)">
            <summary>Gets a value from the current start page.</summary>
            <param name="expression">The name of the value to get.</param>
            <returns>The value or null.</returns>
        </member>
        <member name="T:N2.Web.ControlsAttribute">
            <summary>
            Used to bind a controller to a certain content type.
            </summary>
        </member>
        <member name="T:N2.Web.IAdapterDescriptor">
            <summary>
             Describes the relationship between a content item and it's controller. 
             Used by the request dispatcher to resolve controller for a certain path.
            </summary>
        </member>
        <member name="M:N2.Web.IAdapterDescriptor.IsAdapterFor(N2.Web.PathData,System.Type)">
            <summary>Checks a whether the controller is the right one for a certain path.</summary>
            <param name="path">The path containing information about the current content item.</param>
            <param name="requiredType">The type of controller required by the caller. This is typically a type of interface deriving from <see cref="T:N2.Engine.AbstractContentAdapter"/>.</param>
            <returns>True if the controller is the right one.</returns>
        </member>
        <member name="P:N2.Web.IAdapterDescriptor.ItemType">
            <summary>The type of content item to re-define controller for.</summary>
        </member>
        <member name="P:N2.Web.IAdapterDescriptor.AdapterType">
            <summary>The type of controller to instantiate when the relationship is satisfied.</summary>
        </member>
        <member name="P:N2.Web.IAdapterDescriptor.ControllerName">
            <summary>The name of the specified controller type.</summary>
        </member>
        <member name="M:N2.Web.ControlsAttribute.IsAdapterFor(N2.Web.PathData,System.Type)">
            <summary>Compares the path against the referenced item type to determine whether this is the correct adapter.</summary>
            <param name="path">The request path.</param>
            <param name="requiredType">The type of adapter needed.</param>
            <returns>True if the descriptor references the correct adapter.</returns>
        </member>
        <member name="P:N2.Web.ControlsAttribute.ItemType">
            <summary>The type of item beeing adapted.</summary>
        </member>
        <member name="P:N2.Web.ControlsAttribute.AdapterType">
            <summary>The type of adapter referenced by this descriptor. This property is set by the framework as adapters are enumerated.</summary>
        </member>
        <member name="P:N2.Web.ControlsAttribute.ControllerName">
            <summary>The name of the controller. Used to reference the controller in ASP.NET MVC scenarios.</summary>
        </member>
        <member name="T:N2.Web.DynamicTemplateAttribute">
            <summary>
            Register a template reference that uses the content item's 
            TemplateUrl property as template.
            </summary>
        </member>
        <member name="T:N2.Web.ErrorHandler">
            <summary>
            Is notified of errors in the web context and tries to do something barely useful about them.
            </summary>
        </member>
        <member name="P:N2.Web.ErrorHandler.ErrorCount">
            <summary>Total number of errors since startup.</summary>
        </member>
        <member name="T:N2.Web.Host">
            <summary>
            Reads the configuration to build and maintains knowledge of 
            <see cref="T:N2.Web.Site"/>s in the application
            </summary>
        </member>
        <member name="T:N2.Web.IHost">
            <summary>
            Classes implementing this interface knows about available 
            <see cref="T:N2.Web.Site">Sites</see> and which one is the current
            based on the context.
            </summary>
        </member>
        <member name="M:N2.Web.IHost.GetSite(N2.Web.Url)">
            <summary>Gets the site associated with an url.</summary>
            <param name="hostUrl">The url of the site.</param>
            <returns>The associated site or null if no matching site is found.</returns>
        </member>
        <member name="M:N2.Web.IHost.GetSite(N2.ContentItem)">
            <summary>Gets the site associated with an item.</summary>
            <param name="item">The item whose site to get.</param>
            <returns>The site this node belongs to.</returns>
        </member>
        <member name="M:N2.Web.IHost.GetSite(System.Int32)">
            <summary>Gets the site with the given start page ID.</summary>
            <param name="startPageId">The id of the site's start page.</param>
            <returns>The site or null if no start page with that id exists.</returns>
        </member>
        <member name="M:N2.Web.IHost.AddSites(System.Collections.Generic.IEnumerable{N2.Web.Site})">
            <summary>Adds sites to the available sites.</summary>
            <param name="additionalSites">Sites to add.</param>
        </member>
        <member name="M:N2.Web.IHost.ReplaceSites(N2.Web.Site,System.Collections.Generic.IEnumerable{N2.Web.Site})">
            <summary>Replaces the site list with new sites.</summary>
            <param name="defaultSite">The default site to use.</param>
            <param name="newSites">The new site list.</param>
        </member>
        <member name="M:N2.Web.IHost.IsStartPage(N2.ContentItem)">
            <summary>Determines whether an item is a start page.</summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is a configured start page.</returns>
        </member>
        <member name="P:N2.Web.IHost.CurrentSite">
            <summary>The current site based on the request's host header information. Fallbacks to defualt site.</summary>
        </member>
        <member name="P:N2.Web.IHost.DefaultSite">
            <summary>The default site if the current cannot be determined.</summary>
        </member>
        <member name="P:N2.Web.IHost.Sites">
            <summary>All sites in the system.</summary>
        </member>
        <member name="E:N2.Web.IHost.SitesChanged">
            <summary>Is triggered when the sites collection changes.</summary>
        </member>
        <member name="M:N2.Web.Host.GetSite(N2.Web.Url)">
            <summary>Gets the site associated with an url.</summary>
            <param name="hostUrl">The url of the site.</param>
            <returns>The associated site or null if no matching site is found.</returns>
        </member>
        <member name="M:N2.Web.Host.GetSite(N2.ContentItem)">
            <summary>Gets the site associated with an item.</summary>
            <param name="item">The item whose site to get.</param>
            <returns>The site this node belongs to.</returns>
        </member>
        <member name="M:N2.Web.Host.GetSite(System.Int32)">
            <summary>Gets the site with the given start page ID.</summary>
            <param name="startPageId">The id of the site's start page.</param>
            <returns>The site or null if no start page with that id exists.</returns>
        </member>
        <member name="M:N2.Web.Host.AddSites(System.Collections.Generic.IEnumerable{N2.Web.Site})">
            <summary>Adds sites to the available sites.</summary>
            <param name="additionalSites">Sites to add.</param>
        </member>
        <member name="M:N2.Web.Host.ReplaceSites(N2.Web.Site,System.Collections.Generic.IEnumerable{N2.Web.Site})">
            <summary>Replaces the site list with new sites.</summary>
            <param name="newDefaultSite">The default site to use.</param>
            <param name="newSites">The new site list.</param>
        </member>
        <member name="M:N2.Web.Host.IsStartPage(N2.ContentItem)">
            <summary>Checks if an item is the startpage</summary>
            <param name="item">The item to compare</param>
            <returns>True if the item is a startpage</returns>
        </member>
        <member name="P:N2.Web.Host.DefaultSite">
            <summary>The default site if the current cannot be determined.</summary>
        </member>
        <member name="P:N2.Web.Host.CurrentSite">
            <summary>The current site based on the request's host header information. Fallbacks to defualt site.</summary>
        </member>
        <member name="P:N2.Web.Host.Sites">
            <summary>All sites in the system.</summary>
        </member>
        <member name="E:N2.Web.Host.SitesChanged">
            <summary>Is triggered when the sites collection changes.</summary>
        </member>
        <member name="T:N2.Web.Mail.IMailSender">
            <summary>
            Sends email messages.
            </summary>
        </member>
        <member name="M:N2.Web.Mail.IMailSender.Send(System.Net.Mail.MailMessage)">
            <summary>Sends the given mail message.</summary>
            <param name="mail">The mail to send.</param>
        </member>
        <member name="T:N2.Web.Mail.SmtpMailSender">
            <summary>
            Sends emails using <see cref="T:System.Net.Mail.SmtpClient"/>.
            </summary>
        </member>
        <member name="T:N2.Web.Parts.PartsAjaxService">
            <summary>
            Ajax service that adds itself to the ajax request dispatecher upon start.
            </summary>
        </member>
        <member name="T:N2.Web.IAjaxService">
            <summary>
            Represents a service that can handle client side ajax requests and return a response
            that makes sense to the javascript method on the client.
            </summary>
        </member>
        <member name="M:N2.Web.IAjaxService.IsValidHttpMethod(System.String)">
            <summary>Gets whether request's HTTP method is valid for this service.</summary>
        </member>
        <member name="M:N2.Web.IAjaxService.Handle(System.Web.HttpContextBase)">
            <summary>Processes the request and returns a response.</summary>
            <param name="context">The request to handle, usually the query string collection.</param>
            <returns>A response string that should make sense to the client.</returns>
        </member>
        <member name="P:N2.Web.IAjaxService.Name">
            <summary>Gets the name of the service used to map client calls to the appropriate service.</summary>
        </member>
        <member name="P:N2.Web.IAjaxService.RequiresEditAccess">
            <summary>Gets wether the service requires editor access.</summary>
        </member>
        <member name="T:N2.Web.PathData">
            <summary>
            A data carrier used to pass data about a found content item and 
            it's template from the content item to the url rewriter.
            </summary>
        </member>
        <member name="M:N2.Web.PathData.None(N2.ContentItem,System.String)">
            <summary>The path didn't correspond to a content item. The caller may use the last found item and remaining url to take action.</summary>
            <param name="closestMatch">The last item reporting no match.</param>
            <param name="remainingUrl">The remaining url when no match was found.</param>
            <returns>A an empty path data with additional information.</returns>
        </member>
        <member name="M:N2.Web.PathData.NonRewritable(N2.ContentItem)">
            <summary>Creates a path that isn't rewritten to it's template.</summary>
            <param name="item">The item associated with path.</param>
            <returns>A path data that is not rewritten.</returns>
        </member>
        <member name="M:N2.Web.PathData.Detach">
            <summary>Returns a copy of the path data stripped of the request specific instance of the content item.</summary>
            <returns>A copy of the path data.</returns>
        </member>
        <member name="M:N2.Web.PathData.Attach(N2.Persistence.IPersister)">
            <summary>Creates a copy of the PathData with a content item retrieved from the supplied persister. The reason for this is that PathData can be cached and we don't want to share instances between requests.</summary>
            <param name="persister">The perister providing the item.</param>
            <returns>A copy of the path data.</returns>
        </member>
        <member name="M:N2.Web.PathData.IsEmpty">
            <summary>Checks whether the path contains data.</summary>
            <returns>True if the path is empty.</returns>
        </member>
        <member name="P:N2.Web.PathData.Empty">
            <summary>An empty path. This probably indicates that the path didn't correspond to an item in the hierarchy.</summary>
        </member>
        <member name="P:N2.Web.PathData.ItemQueryKey">
            <summary>The item query string parameter.</summary>
        </member>
        <member name="P:N2.Web.PathData.PageQueryKey">
            <summary>The page query string parameter.</summary>
        </member>
        <member name="P:N2.Web.PathData.PartQueryKey">
            <summary>The part query string parameter.</summary>
        </member>
        <member name="P:N2.Web.PathData.SelectedQueryKey">
            <summary>The selection query string parameter.</summary>
        </member>
        <member name="P:N2.Web.PathData.CurrentItem">
            <summary>The item behind this path.</summary>
        </member>
        <member name="P:N2.Web.PathData.CurrentPage">
            <summary>The page behind this path (might differ from CurrentItem when the path leads to a part).</summary>
        </member>
        <member name="P:N2.Web.PathData.StopItem">
            <summary>The item reporting that the path isn't a match.</summary>
        </member>
        <member name="P:N2.Web.PathData.TemplateUrl">
            <summary>The template handling this path.</summary>
        </member>
        <member name="P:N2.Web.PathData.ID">
            <summary>The identifier of the content item behind this path.</summary>
        </member>
        <member name="P:N2.Web.PathData.PageID">
            <summary>The identifier of the content page behind this path.</summary>
        </member>
        <member name="P:N2.Web.PathData.Path">
            <summary>?</summary>
        </member>
        <member name="P:N2.Web.PathData.Action">
            <summary>An optional action to separate templates handling an item.</summary>
        </member>
        <member name="P:N2.Web.PathData.Argument">
            <summary>An additional argument to the action.</summary>
        </member>
        <member name="P:N2.Web.PathData.QueryParameters">
            <summary>Query parameters passed on to the template.</summary>
        </member>
        <member name="P:N2.Web.PathData.Ignore">
            <summary>Indicates that an existing file handle this path and it shouldn't be rewritten.</summary>
        </member>
        <member name="P:N2.Web.PathData.IsRewritable">
            <summary>Indicates that this path may be rewritten.</summary>
        </member>
        <member name="P:N2.Web.PathData.IsCacheable">
            <summary>Indicates that this path may be cached.</summary>
        </member>
        <member name="T:N2.Web.RegexTemplateAttribute">
            <summary>
            Registers a tempalte to serve a certain content based on regular 
            expression match on the remaining path.
            </summary>
            <example>
            // Would map /path/to/my/content/anything/that/matches/the/expression.aspx to AnyPath aspx.
            [RegexTemplate(".*", "~/Templates/AnyPath.aspx")]
            public class MyContent : ContentItem { }
            </example>
        </member>
        <member name="T:N2.Web.RequestItem`1">
            <summary>
            Provides access to shared objects stored in the request context.
            </summary>
            <typeparam name="T">The type of object to get. This class only holds one instance of such an object for each request.</typeparam>
        </member>
        <member name="T:N2.Web.RequestItem">
            <summary>
            Provides global access to the request item accessor. This can 
            be exchanged for a fake for testing.
            </summary>
        </member>
        <member name="P:N2.Web.RequestItem.Accessor">
            <summary>
            Wraps access to the http context's item store.
            </summary>
        </member>
        <member name="P:N2.Web.RequestItem`1.Instance">
            <summary>
            The instance of the object of the type as provided by <see cref="P:N2.Web.RequestItem.Accessor"/>.
            </summary>
        </member>
        <member name="T:N2.Web.TemplateAttribute">
            <summary>
            Registers a tempalte to serve a certain content item. Optionally based 
            on url remaining after the item is found. Multiple attributes can be 
            combined to allow for multiple views.
            </summary>
            <example>
            // Would map /path/to/my/content.aspx to MyContent aspx.
            // Would map /path/to/my/content/details.aspx to MyContentDetails aspx.
            [Template("~/Templates/MyContent.aspx")]
            [Template("details", "~/Templates/MyContentDetails.aspx")]
            public class MyContent : ContentItem { }
            </example>
        </member>
        <member name="M:N2.Web.TemplateAttribute.#ctor(System.String)">
            <summary>Registers a template for the default action. This is equivalent to overriding the TemplateUrl property on the content item.</summary>
            <param name="defaultActionTemplateUrl">The url to the template to register, e.g. "~/path/to/my/template.aspx".</param>
        </member>
        <member name="M:N2.Web.TemplateAttribute.#ctor(System.String,System.String)">
            <summary>Registers a template for the supplied action. This means that when no page matching the remaining path is found this template would be used if the remaining path starts with the given action url segment.</summary>
            <param name="urlSegmentOrTemplateKey">The action segment to look for in the remaining url when determining template.</param>
            <param name="actionTemplateUrl">The url to the template to register, e.g. "~/path/to/my/template.aspx".</param>
        </member>
        <member name="M:N2.Web.TemplateAttribute.GetPath(N2.ContentItem,System.String)">
            <summary>Examines the remaining url to find the appropriate template.</summary>
            <param name="item">The item to determine template for.</param>
            <param name="remainingUrl">The remaining url used to match against action url segment.</param>
            <returns>The matching template data if found, otherwise null.</returns>
        </member>
        <member name="P:N2.Web.TemplateAttribute.SelectableAsDefault">
            <summary>
            Indicates that this template is selectable as the default template via the management ui using the [EditableTemplate] attribute.
            </summary>
        </member>
        <member name="P:N2.Web.TemplateAttribute.TemplateTitle">
            <summary>
            The title of this template if selectable as default.
            </summary>
        </member>
        <member name="P:N2.Web.TemplateAttribute.TemplateDescription">
            <summary>
            The description of this template if selectable as default.
            </summary>
        </member>
        <member name="T:N2.Web.ThreadContext">
            <summary>
            A thread local context. It's used to store the nhibernate session 
            instance in situations where we don't have a request available such
            as code executed by the scheduler.
            </summary>
        </member>
        <member name="M:N2.Web.ThreadContext.ClearError">
            <summary>Doen't do anything.</summary>
        </member>
        <member name="P:N2.Web.ThreadContext.CurrentPath">
            <summary>The template used to serve this request.</summary>
        </member>
        <member name="P:N2.Web.ThreadContext.SkipAuthorization">
            <summary>Specifies whether the UrlAuthorizationModule should skip authorization for the current request.</summary>
        </member>
        <member name="P:N2.Web.ThreadContext.Url">
            <summary>The requested url, e.g. http://n2cms.com/path/to/a/page.aspx?some=query.</summary>
        </member>
        <member name="T:N2.Web.UI.ExpandableContainerAttribute">
            <summary>
            Organizes editors in a field set that can be expanded to show all details.
            </summary>
        </member>
        <member name="M:N2.Web.UI.ExpandableContainerAttribute.AddTo(System.Web.UI.Control)">
            <summary>Adds the fieldset to a parent container and returns it.</summary>
            <param name="container">The parent container onto which to add the container defined by this interface.</param>
            <returns>The newly added fieldset.</returns>
        </member>
        <member name="P:N2.Web.UI.ExpandableContainerAttribute.Legend">
            <summary>Gets or sets the fieldset legend (text/title).</summary>
        </member>
        <member name="T:N2.Web.UI.ContentPage">
            <summary>
            Page base class that provides easy access to the current page item.
            </summary>
        </member>
        <member name="T:N2.Web.UI.ContentUserControl">
            <summary>
            A user control that can be dynamically created, bound to non-page items and added to a page.
            </summary>
        </member>
        <member name="T:N2.Web.UI.PartUtilities">
            <summary>
            Helper methods for drag'n'drop support.
            </summary>
        </member>
        <member name="T:N2.Web.UI.SeparatorAttribute">
            <summary>
            Creates a separator that can be ordered between two editors
            </summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.OptionsMenu">
            <summary>
            This control is used in the edit interface and needs additional styling if
            it's to be used somewhere else.
            </summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.RawUrlForm">
            <summary>
            Renders Request.RawUrl instead of the standard action attribute. This 
            is useful to maintain the firnedly url upon postback.
            </summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.SimpleTemplateContainer">
            <summary>
            Used by the display control to instantiate templates.
            </summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.DroppableZone">
            <summary>
            A control that displays items in it's zone and supports rearranging of the items via drag and drop. 
            </summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.DroppableZone.AllowExternalManipulation">
            <summary>Set to true if parts that have been added to another page (and are displayed elsewhere) may be moved on other pages.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.HasValue">
            <summary>
            Hides it's contents if the given property has no value or is empty 
            string.
            </summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.HasValue.Path">
            <summary>Use the displayer and the values from this path.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.HasValue.PropertyName">
            <summary>The name of the property on the content item whose value is displayed with the Display control.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.HasValue.Inverse">
            <summary>Inverses the behaviour of the HasValue control, i.e. the contents are hidden if there is a value.</summary>
        </member>
        <member name="T:N2.Persistence.GenericFind`2">
            <summary>
            Facade for finding and querying items.
            </summary>
            <typeparam name="TRoot">The type of root page in the system.</typeparam>
            <typeparam name="TStart">The type of start page in the system.</typeparam>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.ClosestItem(System.Web.UI.Control)">
            <summary>Gets the currently displayed part or page.</summary>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.ClosestPage(System.Web.UI.Control)">
            <summary>Gets the currently displayed page (based on the control hierarchy or query string).</summary>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.ClosestPage(N2.ContentItem)">
            <summary>Gets the closest ancestor page.</summary>
            <param name="pageOrPart">The part whose page to get.</param>
            <returns>The given item if it's a page otherwise the closest ancestor that is a page.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.ClosestOf``1(N2.ContentItem)">
            <summary>
            Gets the item at of the specified type.
            </summary>
            <returns>An ancestor at the specified level.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.Closest``1(N2.ContentItem)">
            <summary>
            Gets the item at of the specified type.
            </summary>
            <returns>An ancestor at the specified level.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateParents(N2.ContentItem)">
            <summary>Enumerates parents of the initial item.</summary>
            <param name="initialItem">The page whose parents will be enumerated. The page itself will not appear in the enumeration.</param>
            <returns>An enumeration of the parents of the initial page.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateParents(N2.ContentItem,N2.ContentItem)">
            <summary>Enumerates parents of the initial item.</summary>
            <param name="initialItem">The page whose parents will be enumerated. The page itself will not appear in the enumeration.</param>
            <param name="lastAncestor">The last page of the enumeration. The enumeration will contain this page.</param>
            <returns>An enumeration of the parents of the initial page. If the last page isn't a parent of the inital page all pages until there are no more parents are returned.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateParents(N2.ContentItem,N2.ContentItem,System.Boolean)">
            <summary>Enumerates parents of the initial item.</summary>
            <param name="initialItem">The page whose parents will be enumerated. The page itself will appear in the enumeration if includeSelf is applied.</param>
            <param name="lastAncestor">The last page of the enumeration. The enumeration will contain this page.</param>
            <param name="includeSelf">Include the initial item in the enumeration.</param>
            <returns>An enumeration of the parents of the initial page. If the last page isn't a parent of the inital page all pages until there are no more parents are returned.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateBetween(N2.ContentItem,N2.ContentItem,System.Boolean)">
            <summary>Enumerates the trail of items from the last ancestor to the deepest child.</summary>
            <param name="deepestChild">The page whose parents will be enumerated. The page itself will appear in the enumeration if includeSelf is applied.</param>
            <param name="lastAncestor">The first page of the enumeration.</param>
            <param name="includeDeepestChild">Include the deepest child in the enumeration.</param>
            <returns>An enumeration of the from the ancestor uptil the deepest child.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.ListParents(N2.ContentItem,N2.ContentItem,System.Boolean)">
            <summary>Creates a list of the parents of the initial item.</summary>
            <param name="initialItem">The page whose parents will be enumerated. The page itself will not appear in the enumeration.</param>
            <param name="lastAncestor">The last page of the enumeration. The enumeration will contain this page.</param>
            <param name="includeInitialItem">Include the initial item in the list.</param>
            <returns>A list of the parents of the initial page. If the last page isn't a parent of the inital page all pages until there are no more parents are returned.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.ListParents(N2.ContentItem,N2.ContentItem)">
            <summary>Creates a list of the parents of the initial item.</summary>
            <param name="initialItem">The page whose parents will be enumerated. The page itself will not appear in the enumeration.</param>
            <param name="lastAncestor">The last page of the enumeration. The enumeration will contain this page.</param>
            <returns>A list of the parents of the initial page. If the last page isn't a parent of the inital page all pages until there are no more parents are returned.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.ListParents(N2.ContentItem)">
            <summary>Creates a list of the parents of the initial item.</summary>
            <param name="initialItem">The page whose parents will be enumerated. The page itself will not appear in the enumeration.</param>
            <returns>A list of the parents of the initial page.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateTree(N2.ContentItem)">
            <summary>Enumerates items in a tree hierarchy.</summary>
            <param name="rootItem">The parent item whose child items to enumerate. The item itself is not returned.</param>
            <returns>An enumeration of all children of an item.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateSiblings(N2.ContentItem)">
            <summary>Enumerates siblings of an item including the item itself.</summary>
            <param name="rootItem">The item whose siblings to enumerate. The item itself is included.</param>
            <returns>An enumeration of all siblings of an item.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateSiblings(N2.ContentItem,System.Int32,System.Int32)">
            <summary>Enumerates siblings of an item including the item itself.</summary>
            <param name="rootItem">The item whose siblings to enumerate. The item itself is included.</param>
            <returns>An enumeration of all siblings of an item.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateChildren(N2.ContentItem)">
            <summary>Enumerates child items and their children, and so on.</summary>
            <param name="item">The parent item whose child items to enumerate. The item itself is not returned.</param>
            <returns>An enumeration of all children of an item.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateChildren(N2.ContentItem,System.Boolean)">
            <summary>Enumerates itself, child items and their children, and so on.</summary>
            <param name="item">The parent item whose child items to enumerate. The item itself is not returned.</param>
            <param name="includeSlef">Enumerate the item itself and it's descendants.</param>
            <returns>An enumeration of all children of an item.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.EnumerateChildren(N2.ContentItem,System.Boolean,System.Boolean)">
            <summary>Enumerates itself, child items and their children, and so on.</summary>
            <param name="item">The parent item whose child items to enumerate. The item itself is not returned.</param>
            <param name="includeSlef">Enumerate the item itself and it's descendants.</param>
            <param name="useMasterVersion">Enumerate descendants of the master version if the passed item is a version.</param>
            <returns>An enumeration of all children of an item.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.OfType``1(System.Collections.Generic.IEnumerable{N2.ContentItem})">
            <summary>Filters items not of the given type and return an enumeration.</summary>
            <typeparam name="T">The typeof item to return.</typeparam>
            <param name="items">The input enumeration to filter.</param>
            <returns>An enumeration items of the supplied type.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.IsDescendant(N2.ContentItem,N2.ContentItem)">
            <summary>Determines wether an item is below a certain ancestral item.</summary>
            <param name="item">The item to check for beeing a child or descendant.</param>
            <param name="ancestor">The item to check for beeing parent or ancestor.</param>
            <returns>True if the item is descendant the ancestor.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.AtLevel(N2.ContentItem,N2.ContentItem,System.Int32)">
            <summary>Gets an item at a certain level from the last ancestor.</summary>
            <param name="initialItem">The item at the greatest depth.</param>
            <param name="lastAncestor">The root node for this operation.</param>
            <param name="depth">The depth counting from the last ancestor to retrieve an item from.</param>
            <returns>The item at the specified depth, or null if this is outside bounds.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.IsDescendantOrSelf(N2.ContentItem,N2.ContentItem)">
            <summary>Determines wether an item is below a certain ancestral item or is the ancestral item.</summary>
            <param name="item">The item to check for beeing a child or descendant.</param>
            <param name="ancestor">The item to check for beeing parent or ancestor.</param>
            <returns>True if the item is descendant the ancestor.</returns>
        </member>
        <member name="M:N2.Persistence.GenericFind`2.In(N2.ContentItem,System.Collections.Generic.IEnumerable{N2.ContentItem})">
            <summary>Determines wether an item is in a enumeration of items.</summary>
            <param name="wantedItem">The item to look for.</param>
            <param name="linedUpItems">The items to look among.</param>
            <returns>True if the item is in the enumeration of items.</returns>
        </member>
        <member name="P:N2.Persistence.GenericFind`2.StartPage">
            <summary>Gets the current start page (this may vary depending on host url).</summary>
        </member>
        <member name="P:N2.Persistence.GenericFind`2.RootItem">
            <summary>Gets the site's root items.</summary>
        </member>
        <member name="P:N2.Persistence.GenericFind`2.CurrentPage">
            <summary>Gets the currently displayed page (based on the query string).</summary>
        </member>
        <member name="P:N2.Persistence.GenericFind`2.Parents">
            <summary>Gets an enumeration of pages leading to the current page.</summary>
        </member>
        <member name="P:N2.Persistence.GenericFind`2.Items">
            <summary>Search for items based on properties and details.</summary>
        </member>
        <member name="T:N2.Persistence.IVersionManager">
            <summary>
            Classes implementing this interface can store and restore versions of 
            items.
            </summary>
        </member>
        <member name="M:N2.Persistence.IVersionManager.ReplaceVersion(N2.ContentItem,N2.ContentItem)">
            <summary>Update a page version with another, i.e. save a version of the current item and replace it with the replacement item and returns the previously published item.</summary>
            <param name="currentItem">The item that will be stored as a previous version.</param>
            <param name="replacementItem">The item that will take the place of the current item using it's ID. Any saved version of this item will not be modified.</param>
            <returns>The previously published version.</returns>
        </member>
        <member name="M:N2.Persistence.IVersionManager.ReplaceVersion(N2.ContentItem,N2.ContentItem,System.Boolean)">
            <summary>Update a page version with another, i.e. save a version of the current item and replace it with the replacement item and returns the previously published item.</summary>
            <param name="currentItem">The item that will be stored as a previous version.</param>
            <param name="replacementItem">The item that will take the place of the current item using it's ID. Any saved version of this item will not be modified.</param>
            <param name="storeCurrentVersion">Create a copy of the currently published version before overwriting it.</param>
            <returns>The previously published version.</returns>
        </member>
        <member name="M:N2.Persistence.IVersionManager.SaveVersion(N2.ContentItem)">
            <summary>Creates a "previous" version of an item. This must be called before the item item is modified.</summary>
            <param name="item">The item to create a old version of.</param>
            <returns>The old version.</returns>
        </member>
        <member name="M:N2.Persistence.IVersionManager.GetVersionsOf(N2.ContentItem)">
            <summary>Retrieves all versions of an item including the master version.</summary>
            <param name="publishedItem">The item whose versions to get.</param>
            <returns>A list of versions of the item.</returns>
        </member>
        <member name="M:N2.Persistence.IVersionManager.GetVersionsOf(N2.ContentItem,System.Int32)">
            <summary>Retrieves all versions of an item including the master version.</summary>
            <param name="publishedItem">The item whose versions to get.</param>
            <param name="count">The number of versions to get.</param>
            <returns>A list of versions of the item.</returns>
        </member>
        <member name="M:N2.Persistence.IVersionManager.TrimVersionCountTo(N2.ContentItem,System.Int32)">
            <summary>Removes exessive versions.</summary>
            <param name="publishedItem">The item whose versions to trim.</param>
            <param name="maximumNumberOfVersions">The maximum number of versions to keep.</param>
        </member>
        <member name="M:N2.Persistence.IVersionManager.IsVersionable(N2.ContentItem)">
            <summary>Checks whether an item  may have versions.</summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is allowed to have versions.</returns>
        </member>
        <member name="T:N2.Persistence.VersionManager">
            <summary>
            Handles saving and restoring versions of items.
            </summary>
        </member>
        <member name="M:N2.Persistence.VersionManager.SaveVersion(N2.ContentItem)">
            <summary>Creates a version of the item. This must be called before the item item is modified to save a version before modifications.</summary>
            <param name="item">The item to create a old version of.</param>
            <returns>The old version.</returns>
        </member>
        <member name="M:N2.Persistence.VersionManager.ReplaceVersion(N2.ContentItem,N2.ContentItem)">
            <summary>Update a page version with another, i.e. save a version of the current item and replace it with the replacement item. Returns a version of the previously published item.</summary>
            <param name="currentItem">The item that will be stored as a previous version.</param>
            <param name="replacementItem">The item that will take the place of the current item using it's ID. Any saved version of this item will not be modified.</param>
            <returns>A version of the previously published item.</returns>
        </member>
        <member name="M:N2.Persistence.VersionManager.ReplaceVersion(N2.ContentItem,N2.ContentItem,System.Boolean)">
            <summary>Update a page version with another, i.e. save a version of the current item and replace it with the replacement item. Returns a version of the previously published item.</summary>
            <param name="currentItem">The item that will be stored as a previous version.</param>
            <param name="replacementItem">The item that will take the place of the current item using it's ID. Any saved version of this item will not be modified.</param>
            <param name="storeCurrentVersion">Create a copy of the currently published version before overwriting it.</param>
            <returns>A version of the previously published item or the current item when storeCurrentVersion is false.</returns>
        </member>
        <member name="M:N2.Persistence.VersionManager.GetVersionsOf(N2.ContentItem)">
            <summary>Retrieves all versions of an item including the master version.</summary>
            <param name="publishedItem">The item whose versions to get.</param>
            <returns>A list of versions of the item.</returns>
        </member>
        <member name="M:N2.Persistence.VersionManager.GetVersionsOf(N2.ContentItem,System.Int32)">
            <summary>Retrieves all versions of an item including the master version.</summary>
            <param name="publishedItem">The item whose versions to get.</param>
            <param name="count">The number of versions to get.</param>
            <returns>A list of versions of the item.</returns>
        </member>
        <member name="M:N2.Persistence.VersionManager.TrimVersionCountTo(N2.ContentItem,System.Int32)">
            <summary>Removes exessive versions.</summary>
            <param name="publishedItem">The item whose versions to trim.</param>
            <param name="maximumNumberOfVersions">The maximum number of versions to keep.</param>
        </member>
        <member name="M:N2.Persistence.VersionManager.IsVersionable(N2.ContentItem)">
            <summary>Checks whether an item  may have versions.</summary>
            <param name="item">The item to check.</param>
            <returns>True if the item is allowed to have versions.</returns>
        </member>
        <member name="E:N2.Persistence.VersionManager.ItemSavingVersion">
            <summary>Occurs before an item is saved</summary>
        </member>
        <member name="E:N2.Persistence.VersionManager.ItemSavedVersion">
            <summary>Occurs before an item is saved</summary>
        </member>
        <member name="E:N2.Persistence.VersionManager.ItemReplacingVersion">
            <summary>Occurs before an item is saved</summary>
        </member>
        <member name="E:N2.Persistence.VersionManager.ItemReplacedVersion">
            <summary>Occurs before an item is saved</summary>
        </member>
        <member name="T:N2.Plugin.AutoInitializeAttribute">
            <summary>
            Marks a plugin initializer as eligible for auto initialization.
            </summary>
        </member>
        <member name="T:N2.Resources.Media">
            <summary>
            An enum of recognized media descriptors.
            </summary>
        </member>
        <member name="F:N2.Resources.Media.Screen">
            <summary>Intended for non-paged computer screens.</summary>
        </member>
        <member name="F:N2.Resources.Media.TTY">
            <summary>Intended for media using a fixed-pitch character grid, such as teletypes, terminals, or portable devices with limited display capabilities.</summary>
        </member>
        <member name="F:N2.Resources.Media.TV">
            <summary>Intended for television-type devices (low resolution, color, limited scrollability).</summary>
        </member>
        <member name="F:N2.Resources.Media.Projection">
            <summary>Intended for projectors.</summary>
        </member>
        <member name="F:N2.Resources.Media.Handheld">
            <summary>Intended for handheld devices (small screen, monochrome, bitmapped graphics, limited bandwidth).</summary>
        </member>
        <member name="F:N2.Resources.Media.Print">
            <summary>Intended for paged, opaque material and for documents viewed on screen in print preview mode.</summary>
        </member>
        <member name="F:N2.Resources.Media.Braille">
            <summary>Intended for braille tactile feedback devices.</summary>
        </member>
        <member name="F:N2.Resources.Media.Aural">
            <summary>Intended for speech synthesizers.</summary>
        </member>
        <member name="F:N2.Resources.Media.All">
            <summary>Suitable for all devices.</summary>
        </member>
        <member name="F:N2.Resources.ScriptOptions.None">
            <summary>Add the script exactly as given.</summary>
        </member>
        <member name="F:N2.Resources.ScriptOptions.ScriptTags">
            <summary>Embed the script in script tags.</summary>
        </member>
        <member name="F:N2.Resources.ScriptOptions.DocumentReady">
            <summary>Embed the script in script tags and use jQuery to await document loaded event.</summary>
        </member>
        <member name="F:N2.Resources.ScriptOptions.Include">
            <summary>The script is located at the supplied url.</summary>
        </member>
        <member name="F:N2.Resources.ScriptOptions.Prioritize">
            <summary>Try to register this before any other scripts.</summary>
        </member>
        <member name="F:N2.Resources.ScriptPosition.Header">
            <summary>In the head html section.</summary>
        </member>
        <member name="F:N2.Resources.ScriptPosition.Bottom">
            <summary>At the bottom of the page (startup script).</summary>
        </member>
        <member name="T:N2.Definitions.RootContainer">
            <summary>
            Used as root container when retrieving editable attributes and editor
            containers.
            </summary>
        </member>
        <member name="T:N2.Definitions.EditableHierarchyBuilder">
            <summary>
            Adds editables and containers to containers.
            </summary>
        </member>
        <member name="M:N2.Definitions.EditableHierarchyBuilder.Build(System.Collections.Generic.IEnumerable{N2.Definitions.IContainable},System.Collections.Generic.IEnumerable{N2.Definitions.IContainable})">
            <summary>Build the container hierarchy adding containers and editors to a root container.</summary>
            <param name="containers">The containers to add to themselves or the root container.</param>
            <param name="editables">The editables to add to the containers or a root container.</param>
            <returns>A new root container.</returns>
        </member>
        <member name="T:N2.Details.WithEditableChildAttribute">
            <summary>
            Defines an editable sub-item. The edited item is found by looking for 
            children with the <see cref="P:N2.Details.EditableItemAttribute.DefaultChildName"/> name.
            </summary>
            <example>
            	[N2.Details.WithEditableChild(typeof(ChildItem), "News", 10)]
            	public class ParentItem : N2.ContentItem
            	{
            	}
            </example>
        </member>
        <member name="T:N2.Details.EditableItemAttribute">
            <summary>
            Defines an editable item. The edited item is referenced by the 
            property decorated with this attribute. If the property is null a new
            item is created and added to the parent items child collection.
            </summary>
            <example>
            	public class ParentItem : N2.ContentItem
            	{
            		[N2.Details.EditableItem]
            		public virtual ChildItem News
            		{
            			get { return (ChildItem)(GetDetail("ChildItem")); }
            			set { SetDetail("ChildItem", value); }
            		}
            	}
            </example>
        </member>
        <member name="P:N2.Details.EditableItemAttribute.DefaultChildName">
            <summary>The name that will be assigned to new child items.</summary>
        </member>
        <member name="P:N2.Details.EditableItemAttribute.DefaultChildZoneName">
            <summary>The zone name that will be assigned to new child items.</summary>
        </member>
        <member name="T:N2.Details.EditableChildrenAttribute">
            <summary>
            Defines a deletedChild item editor. Renders a drop down list where you can 
            select what item to add and edit forms of added items.
            </summary>
        </member>
        <member name="T:N2.Edit.Settings.NavigationSettings">
            <summary>
            Abstracts the storage of user display data items settings.
            </summary>
        </member>
        <member name="P:N2.Edit.Settings.NavigationSettings.DisplayDataItems">
            <summary>
            Whether the user has chosen to display data items.
            </summary>
        </member>
        <member name="T:N2.Find">
            <summary>
            Provides easy access to finder and commonly used items.
            </summary>
        </member>
        <member name="T:N2.Persistence.Finder.IQueryEnding">
            <summary>
            Classes implementing this interface provide the last options before the
            end of the query.
            </summary>
        </member>
        <member name="T:N2.Persistence.Finder.IQueryEnd">
            <summary>
            Classes implementing this interface provides an endpoint for queries 
            allowing to select items using current criterias.
            </summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryEnd.Select">
            <summary>Selects items defined by the given criterias.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryEnd.Select``1">
            <summary>Selects items defined by the given criterias and converts result to a strongly typed list.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryEnd.Count">
            <summary>Selects the number of items matching the query.</summary>
            <returns>A number of items.</returns>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryEnding.PreviousVersions(N2.Persistence.Finder.VersionOption)">
            <summary>Defines wether previous versions are included in the query. By default previous versions are excluded.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryEnding.FirstResult(System.Int32)">
            <summary>Sets the first result index for the query to return.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryEnding.MaxResults(System.Int32)">
            <summary>Sets the maximum amount of results for the query to return.</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryEnding.Filters(N2.Collections.ItemFilter[])">
            <summary>Sets filters applied to the result set.</summary>
            <param name="filters">The filters that are applied.</param>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryEnding.Filters(System.Collections.Generic.IEnumerable{N2.Collections.ItemFilter})">
            <summary>Sets filters applied to the result set.</summary>
            <param name="filters">The filters that are applied.</param>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryEnding.OrderBy">
            <summary>Orders result by the given expression.</summary>
        </member>
        <member name="T:N2.Persistence.Finder.IQueryAction">
            <summary>
            Classes implementing this interface provides methods to continue the 
            query building or end the current query.
            </summary>
        </member>
        <member name="M:N2.Persistence.Finder.IQueryAction.CloseBracket">
            <summary>"Closes the bracket" i.e. end a group of criterias that are evaluated together.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryAction.And">
            <summary>Continues the building of a query combining previous expressions with the and operator.</summary>
        </member>
        <member name="P:N2.Persistence.Finder.IQueryAction.Or">
            <summary>Continues the building of a query combining previous expressions with the or operator.</summary>
        </member>
        <member name="T:N2.Persistence.Finder.IDetailCriteria">
            <summary>
            Classes implementing this interface provides options to add criteras 
            for various comparisons on item details.
            </summary>
        </member>
        <member name="M:N2.Persistence.Finder.IDetailCriteria.Null``1(System.Boolean)">
            <summary>Presence of a detail.</summary>
            <param name="isNull">True if the detail is expected to be present.</param>
        </member>
        <member name="T:N2.Persistence.Finder.IStringCriteria">
            <summary>
            Classes implementing this interface provides functionality to add 
            criteras for string equality and like operations.
            </summary>
        </member>
        <member name="M:N2.Persistence.Finder.IStringCriteria.Like(System.String)">
            <summary>SQL "Like" expression</summary>
        </member>
        <member name="M:N2.Persistence.Finder.IStringCriteria.NotLike(System.String)">
            <summary>SQL "Not Like" expression</summary>
        </member>
        <member name="T:N2.Persistence.NH.Finder.PropertyClassCriteria">
            <summary>
            The criteria building block of a query. Compares the item class to a value.
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.Finder.OrderBy">
            <summary>
            Transition to the property to order by.
            </summary>
        </member>
        <member name="T:N2.Persistence.Finder.VersionOption">
            <summary>
            Enum providing options to include or exclude item's previous versions.
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.Finder.DetailBetweenHqlProvider`1">
            <summary>
            Provides hql for between queries on details.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:N2.Persistence.NH.Finder.DetailHqlProvider`1">
            <summary>
            Provides hql for queries on details.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:N2.Persistence.NH.Finder.PropertyBetweenHqlProvider`1">
            <summary>
            Represents a property criteria to select values in a certain range.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="T:N2.Persistence.NH.Finder.QueryBuilder">
            <summary>
            The query builder stores query settings and can perform selects on the
            database.
            </summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.SessionProvider">
            <summary>Gets or sets the NHibernate session provider.</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.Cachable">
            <summary>Gets or sets wether the query should be cached.</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.Versions">
            <summary>Gets or sets wether previous versions should be included in the query.</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.CurrentOperator">
            <summary>Gets or sets the current operator (this is updated as the query is progressed using And or Or).</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.Criterias">
            <summary>Gets the current set of criterias.</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.Filters">
            <summary>Gets or sets filters applied to the result set after it has been fetched from the database.</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.OrderBy">
            <summary>Order expression applied to the sql statement.</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.SortExpression">
            <summary>Gets or sets the sort expression performed on the result list after selection (not in database).</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.MaxResults">
            <summary>Gets or sets the maximum number of results to return.</summary>
        </member>
        <member name="P:N2.Persistence.NH.Finder.QueryBuilder.FirstResult">
            <summary>Gets or sets the first result of the result set to return (skipping those before).</summary>
        </member>
        <member name="T:N2.Persistence.NH.Finder.Operator">
            <summary>
            Represents the operator between two criterias.
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.Finder.StringWrapper">
            <summary>
            Surrounds a string builder with two strings. The prefix is appended 
            right away, the suffix is appended upon disposal.
            </summary>
            <example>
            using(new StringWrapper(myStringBuilder, "(", ")"))
            {
            	myStringBuilder.Append("something that should be between the parenthesis");
            }
            </example>
        </member>
        <member name="T:N2.Persistence.NH.Finder.TextOnlyHqlProvider">
            <summary>
            Appends custom strings to a hql query.
            </summary>
        </member>
        <member name="T:N2.Persistence.NH.Finder.VersionOfHqlProvider">
            <summary>
            Creates the hql query for finding versions of an item.
            </summary>
        </member>
        <member name="T:N2.Resources.Register">
            <summary>
            Methods to register styles and javascripts.
            </summary>
        </member>
        <member name="M:N2.Resources.Register.StyleSheet(System.Web.UI.Page,System.Type,System.String)">
            <summary>Register an embedded style sheet reference in the page's header.</summary>
            <param name="page">The page onto which to register the style sheet.</param>
            <param name="type">The type whose assembly contains the embedded style sheet.</param>
            <param name="resourceName">The name of the embedded resource.</param>
        </member>
        <member name="M:N2.Resources.Register.StyleSheet(System.Web.UI.Page,System.String)">
            <summary>Register a style sheet reference in the page's header.</summary>
            <param name="page">The page onto which to register the style sheet.</param>
            <param name="resourceUrl">The url to the style sheet to register.</param>
        </member>
        <member name="M:N2.Resources.Register.StyleSheet(System.Web.UI.Page,System.String,N2.Resources.Media)">
            <summary>Register a style sheet reference in the page's header with media type.</summary>
            <param name="page">The page onto which to register the style sheet.</param>
            <param name="resourceUrl">The url to the style sheet to register.</param>
            <param name="media">The media type to assign, e.g. print.</param>
        </member>
        <member name="M:N2.Resources.Register.JavaScript(System.Web.UI.Page,System.Type,System.String)">
            <summary>Register an embedded javascript resource reference in the page header.</summary>
            <param name="page">The page in whose header to register the javascript.</param>
            <param name="type">The type in whose assembly the javascript is embedded.</param>
            <param name="resourceName">The name of the embedded resource.</param>
        </member>
        <member name="M:N2.Resources.Register.JavaScript(System.Web.UI.Page,System.Type,System.String,N2.Resources.ScriptOptions)">
            <summary>Register an embedded javascript resource reference in the page header with options.</summary>
            <param name="page">The page in whose header to register the javascript.</param>
            <param name="type">The type in whose assembly the javascript is embedded.</param>
            <param name="resourceName">The name of the embedded resource.</param>
            <param name="options">Options flag.</param>
        </member>
        <member name="M:N2.Resources.Register.JavaScript(System.Web.UI.Page,System.String,N2.Resources.ScriptPosition,N2.Resources.ScriptOptions)">
            <summary>Registers a script block on a page.</summary>
            <param name="page">The page onto which to added the script.</param>
            <param name="script">The script to add.</param>
            <param name="position">Where to add the script.</param>
            <param name="options">Script registration options.</param>
        </member>
        <member name="M:N2.Resources.Register.JavaScript(System.Web.UI.Page,System.String)">
            <summary>Registers a script reference in the page's header.</summary>
            <param name="page">The page onto which to register the javascript.</param>
            <param name="resourceUrl">The url to the javascript to register.</param>
        </member>
        <member name="T:N2.Security.ISecurityEnforcer">
            <summary>
            Is responsible of securing the web site.
            </summary>
        </member>
        <member name="E:N2.Security.ISecurityEnforcer.AuthorizationFailed">
            <summary>
            Is invoked when a security violation is encountered. The security 
            exception can be cancelled by setting the cancel property on the event 
            arguments.
            </summary>
        </member>
        <member name="T:N2.Security.SecurityEnforcer">
            <summary>
            Checks against unauthorized requests, and updates of content items.
            </summary>
        </member>
        <member name="M:N2.Security.SecurityEnforcer.AuthorizeRequest(System.Security.Principal.IPrincipal,N2.ContentItem,N2.Security.Permission)">
            <summary>Checks that the current user is authorized to access the current item.</summary>
        </member>
        <member name="M:N2.Security.SecurityEnforcer.OnItemSaving(N2.ContentItem)">
            <summary>Is invoked when an item is saved.</summary>
            <param name="item">The item that is to be saved.</param>
        </member>
        <member name="M:N2.Security.SecurityEnforcer.OnItemMoving(N2.ContentItem,N2.ContentItem)">
            <summary>Is Invoked when an item is moved.</summary>
            <param name="source">The item that is to be moved.</param>
            <param name="destination">The destination for the item.</param>
        </member>
        <member name="M:N2.Security.SecurityEnforcer.OnItemDeleting(N2.ContentItem)">
            <summary>Is invoked when an item is to be deleted.</summary>
            <param name="item">The item to delete.</param>
        </member>
        <member name="M:N2.Security.SecurityEnforcer.OnItemCopying(N2.ContentItem,N2.ContentItem)">
            <summary>Is invoked when an item is to be copied.</summary>
            <param name="source">The item that is to be copied.</param>
            <param name="destination">The destination for the copied item.</param>
        </member>
        <member name="E:N2.Security.SecurityEnforcer.AuthorizationFailed">
            <summary>
            Is invoked when a security violation is encountered. The security 
            exception can be cancelled by setting the cancel property on the event 
            arguments.
            </summary>
        </member>
        <member name="T:N2.Web.AjaxRequestDispatcher">
            <summary>
            Dispatches an ajax request to the handler specified by the action 
            parameter.
            </summary>
        </member>
        <member name="T:N2.Web.AjaxRequestHandler">
            <summary>
            Handles ajax requests.
            </summary>
            <example>
            web.config:
            ...
            &lt;httpHandlers&gt;
            	&lt;add path="*.n2.ashx" verb="*" type="N2.Web.AjaxRequestHandler, N2" /&gt;
            &lt;/httpHandlers&gt;
            ...
            </example>
        </member>
        <member name="T:N2.Web.ILinkBuilder">
            <summary>
            Builds and modifies a link to somewhere.
            </summary>
        </member>
        <member name="M:N2.Web.ILinkBuilder.Href(System.String)">
            <summary>Sets the link href.</summary>
            <param name="href">An url.</param>
            <returns>The same object for chaining.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.Text(System.String)">
            <summary>Sets the link text.</summary>
            <param name="text">A string or html.</param>
            <returns>The same object for chaining.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.Target(System.String)">
            <summary>Sets the link target frame.</summary>
            <param name="target">A window or frame name.</param>
            <returns>The same object for chaining.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.Title(System.String)">
            <summary>Sets the link title/tooltip.</summary>
            <param name="title">A string.</param>
            <returns>The same object for chaining.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.Class(System.String)">
            <summary>Sets the link class.</summary>
            <param name="className">One or more CSS classes.</param>
            <returns>The same object for chaining.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.Query(System.String)">
            <summary>Sets the href's query string.</summary>
            <param name="query">A query string with one or more query parameters.</param>
            <returns>The same object for chaining.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.AddQuery(System.String,System.String)">
            <summary>Adds a query key value pair to any existing query.</summary>
            <param name="key">The query key.</param>
            <param name="value">The query value.</param>
            <returns>The same object for chaining.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.SetFragment(System.String)">
            <summary>Sets a the link fragment (#fragment).</summary>
            <param name="fragment">The fragment.</param>
            <returns>The same object for chaining.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.Attribute(System.String,System.String)">
            <summary>Sets an attribute on the link.</summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns>The same object for chaining.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.WriteTo(System.IO.TextWriter)">
            <summary>Writes the link to the given writer.</summary>
            <param name="writer">The writer that the link html will be written to (unless empty).</param>
        </member>
        <member name="M:N2.Web.ILinkBuilder.ToString">
            <summary>Gets the link's string representation.</summary>
            <returns>A string anchor.</returns>
        </member>
        <member name="M:N2.Web.ILinkBuilder.ToControl">
            <summary>Creates an anchor control representing the link.</summary>
            <returns>An anchor control.</returns>
        </member>
        <member name="T:N2.Web.Link">
            <summary>
            A link representation that can be conver to text or an anchor control.
            </summary>
        </member>
        <member name="T:N2.Web.PageNotFoundEventArgs">
            <summary>
            Exposes information about url's that can't be parsed into a page.
            </summary>
        </member>
        <member name="P:N2.Web.PageNotFoundEventArgs.Url">
            <summary>The url that didn't match any page.</summary>
        </member>
        <member name="P:N2.Web.PageNotFoundEventArgs.AffectedPath">
            <summary>The template data to associate with the not found url.</summary>
        </member>
        <member name="T:N2.Web.Tree">
            <summary>
            Creates a hierarchical tree of ul and li:s for usage on web pages.
            </summary>
        </member>
        <member name="M:N2.Web.Tree.IdProvider(System.Func{N2.Collections.HierarchyNode{N2.ContentItem},System.String},System.Func{N2.Collections.HierarchyNode{N2.ContentItem},System.String})">
            <summary>Provides the id for the list item elements in the resulting html.</summary>
            <param name="ulIdProvider">Returns an id for the list element given a content item and hierarchy depth.</param>
            <returns>The same <see cref="T:N2.Web.Tree"/> instance.</returns>
        </member>
        <member name="M:N2.Web.Tree.ClassProvider(System.Func{N2.ContentItem,System.String})">
            <summary>Provides the class name for the list item elements in the resulting html.</summary>
            <param name="liClassProvider">Returns a css class for a content item.</param>
            <returns>The same tree instance.</returns>
        </member>
        <member name="M:N2.Web.Tree.ClassProvider(System.Func{N2.Collections.HierarchyNode{N2.ContentItem},System.String},System.Func{N2.Collections.HierarchyNode{N2.ContentItem},System.String})">
            <summary>Provides the class name for the list item elements in the resulting html.</summary>
            <param name="ulClassProvider">Returns a css class for the list element given a content item and hierarchy depth.</param>
            <param name="liClassProvider">Returns a css class for the list item element given a content item.</param>
            <returns>The same <see cref="T:N2.Web.Tree"/> instance.</returns>
        </member>
        <member name="M:N2.Web.Tree.Filters(N2.Collections.ItemFilter[])">
            <summary>Applies filters to the hierarchy for this tree.</summary>
            <param name="filters">The filters to apply.</param>
            <returns>The same <see cref="T:N2.Web.Tree"/> instance.</returns>
        </member>
        <member name="M:N2.Web.Tree.ExcludeRoot(System.Boolean)">
            <summary>Do not render the root element and surrounding list element.</summary>
            <param name="exclude">True to exclude the root.</param>
            <returns>The same <see cref="T:N2.Web.Tree"/> instance.</returns>
        </member>
        <member name="M:N2.Web.Tree.Tag(System.Action{N2.Collections.HierarchyNode{N2.ContentItem},System.Web.Mvc.TagBuilder})">
            <summary>Modifies container tags before they are written.</summary>
            <param name="tagModifier"></param>
            <returns></returns>
        </member>
        <member name="T:N2.Web.UI.DividerAttribute">
            <summary>
            Defines a horizontal ruler on the edit interface.
            </summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.ControlPanelState">
            <summary>
            Display state for the control panel.
            </summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ControlPanelState.Unknown">
            <summary>Who knows.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ControlPanelState.Hidden">
            <summary>The control panel is hidden (e.g. the user is not an editor).</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ControlPanelState.Visible">
            <summary>The control panel is visible displaying a page normally.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ControlPanelState.Editing">
            <summary>The control panel is displayed while editing the page in place.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ControlPanelState.DragDrop">
            <summary>The control panel is displayed during drag and drop of parts.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ControlPanelState.Previewing">
            <summary>The control panel is displayed whlie previewing an item version.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.EditableDisplay">
            <summary>
            This control will either display content using the defined editor 
            just as the <see cref="T:N2.Web.UI.WebControls.Display"/> does or edit using the defined 
            editor. The GetState method on the <see cref="T:N2.Web.UI.WebControls.ControlPanel"/> determines 
            wether the content should be displayed or edited.
            </summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.Hr">
            <summary>
            A horizontal ruler.
            </summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditorList.ParentItemID">
            <summary>Gets the parent item where to look for items.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditorList.ParentItemType">
            <summary>Gets the parent item where to look for items.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditorList.ZoneName">
            <summary>Gets or sets the zone name to list.</summary>
        </member>
        <member name="P:N2.Web.UI.WebControls.ItemEditorList.MinimumType">
            <summary>The minimum type to filter children by.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.ItemEditorVersioningMode">
            <summary>
            Defines how versioning should be handled when saving an item.
            </summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ItemEditorVersioningMode.SaveOnly">
            <summary>Saves the item without creating a version.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ItemEditorVersioningMode.VersionAndSave">
            <summary>Saves a version before updating the item and saving it.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ItemEditorVersioningMode.VersionOnly">
            <summary>Updates and saves a version without updating the item.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.ItemEditorVersioningMode.SaveAsMaster">
            <summary>Saves an unpublished version as the master version.</summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.TabPanel">
            <summary>
            A panel that is made into a tab panel throgh jquery client side 
            scripting.
            </summary>
        </member>
        <member name="T:N2.Web.UI.WebControls.UrlRelativityMode">
            <summary>
            Defines whether the managementUrls should be app- or server relative.
            </summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.UrlRelativityMode.Absolute">
            <summary>Server relative managementUrls, i.e. /myapp/upload/myfile.gif.</summary>
        </member>
        <member name="F:N2.Web.UI.WebControls.UrlRelativityMode.Application">
            <summary>Application relative managementUrls, i.e. ~/upload/myfile.gif.</summary>
        </member>
        <member name="T:N2.Web.Url">
            <summary>
            A lightweight and somewhat forgiving URI helper class.
            </summary>
        </member>
        <member name="F:N2.Web.Url.Amp">
            <summary>Ampersand string.</summary>
        </member>
        <member name="F:N2.Web.Url.ManagementUrlToken">
            <summary>The token used for resolving the management url.</summary>
        </member>
        <member name="M:N2.Web.Url.PathPart(System.String)">
            <summary>Retrieves the path part of an url, e.g. /path/to/page.aspx.</summary>
        </member>
        <member name="M:N2.Web.Url.QueryPart(System.String)">
            <summary><![CDATA[Retrieves the query part of an url, e.g. page=12&value=something.]]></summary>
        </member>
        <member name="M:N2.Web.Url.RemoveHash(System.String)">
            <summary>Removes the hash (#...) from an url.</summary>
            <param name="url">An url that might hav a hash in it.</param>
            <returns>An url without the hash part.</returns>
        </member>
        <member name="M:N2.Web.Url.Parse(System.String)">
            <summary>Converts a string URI to an Url class. The method will make any app-relative managementUrls absolute.</summary>
            <param name="url">The URI to parse.</param>
            <returns>An Url object or null if the input was null.</returns>
        </member>
        <member name="M:N2.Web.Url.ParseTokenized(System.String)">
            <summary>Converts a string URI to an Url class. The method will make any app-relative managementUrls absolute and resolve tokens within the url string.</summary>
            <param name="url">The URI to parse.</param>
            <returns>An Url object or null if the input was null.</returns>
        </member>
        <member name="M:N2.Web.Url.SetFragment(System.String)">
            <summary>Returns an url with the specified fragment</summary>
            <param name="fragment">The fragment to use in the Url.</param>
            <returns>An url with the given fragment.</returns>
        </member>
        <member name="M:N2.Web.Url.RemoveExtension">
            <summary>Returns the url without the file extension (if any).</summary>
            <returns>An url with it's extension removed.</returns>
        </member>
        <member name="M:N2.Web.Url.RemoveExtension(System.String[])">
            <summary>Returns the url without the file extension (if any).</summary>
            <param name="validExtensions">Extensions that may be removed.</param>
            <returns>An url with it's extension removed.</returns>
        </member>
        <member name="M:N2.Web.Url.RemoveDefaultDocument(System.String)">
            <summary>Removes the given default document from the end of the url, if there.</summary>
            <param name="defualtDocument">The default document to remove, e.g. "Default.aspx"</param>
            <returns>An url without ending default document, or the same url if no ending default document.</returns>
        </member>
        <member name="M:N2.Web.Url.ToAbsolute(System.String)">
            <summary>Converts a possibly relative to an absolute url.</summary>
            <param name="path">The url to convert.</param>
            <returns>The absolute url.</returns>
        </member>
        <member name="M:N2.Web.Url.ToAbsolute(System.String,System.String)">
            <summary>Converts a possibly relative to an absolute url.</summary>
            <param name="applicationPath">The application path to be absolute about.</param>
            <param name="path">The url to convert.</param>
            <returns>The absolute url.</returns>
        </member>
        <member name="M:N2.Web.Url.ToRelative(System.String)">
            <summary>Converts a virtual path to a relative path, e.g. /myapp/path/to/a/page.aspx -> ~/path/to/a/page.aspx</summary>
            <param name="path">The virtual path.</param>
            <returns>A relative path</returns>
        </member>
        <member name="M:N2.Web.Url.ToRelative(System.String,System.String)">
            <summary>Converts a virtual path to a relative path, e.g. /myapp/path/to/a/page.aspx -> ~/path/to/a/page.aspx</summary>
            <param name="path">The virtual path.</param>
            <returns>A relative path</returns>
        </member>
        <member name="M:N2.Web.Url.RemoveAnyExtension(System.String)">
            <summary>Removes the file extension from a path.</summary>
            <param name="path">The server relative path.</param>
            <returns>The path without the file extension or the same path if no extension was found.</returns>
        </member>
        <member name="M:N2.Web.Url.RemoveTrailingSegment(System.Boolean)">
            <summary>Removes the last part from the url segments.</summary>
            <returns></returns>
        </member>
        <member name="M:N2.Web.Url.RemoveTrailingSegment">
            <summary>Removes the last part from the url segments.</summary>
        </member>
        <member name="M:N2.Web.Url.RemoveSegment(System.Int32)">
            <summary>Removes the segment at the specified location.</summary>
            <param name="index">The segment index to remove</param>
            <returns>An url without the specified segment.</returns>
        </member>
        <member name="M:N2.Web.Url.RemoveLastSegment(System.String)">
            <summary>Removes the last segment from a path, e.g. "/hello/world" -> "/hello/"</summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Web.Url.GetName(System.String)">
            <summary>Gets the last segment of a path, e.g. "/hello/world/" -> "world"</summary>
            <param name="path">The path whose name to get.</param>
            <returns>The name of the path or empty.</returns>
        </member>
        <member name="M:N2.Web.Url.Combine(System.String,System.String)">
            <summary>Mimics the behavior of VirtualPathUtility.Combine with less restrictions and minimal dependencies.</summary>
            <param name="url1">First part</param>
            <param name="url2">Last part</param>
            <returns>The combined URL.</returns>
        </member>
        <member name="M:N2.Web.Url.ParseQueryString(System.String)">
            <summary>Converts a text query string to a dictionary.</summary>
            <param name="query">The query string</param>
            <returns>A dictionary of the query parts.</returns>
        </member>
        <member name="M:N2.Web.Url.Rebase(System.String,System.String,System.String)">
            <summary>Changes the application base of an url.</summary>
            <param name="currentPath">Replaces an absolute url in one app, to the absolute path of another app.</param>
            <param name="fromAppPath">The origin application path.</param>
            <param name="toAppPath">The destination application path.</param>
            <returns>A rebased url.</returns>
        </member>
        <member name="M:N2.Web.Url.GetToken(System.String)">
            <summary>Gets a replacement used by <see cref="M:N2.Web.Url.ResolveTokens(System.String)"/>.</summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Web.Url.SetToken(System.String,System.String)">
            <summary>Adds a replacement used by <see cref="M:N2.Web.Url.ResolveTokens(System.String)"/>.</summary>
            <param name="token">They token to replace.</param>
            <param name="value">The value to replace the token with.</param>
        </member>
        <member name="M:N2.Web.Url.ResolveTokens(System.String)">
            <summary>Formats an url using replacement tokens.</summary>
            <param name="urlFormat">The url format to resolve, e.g. {ManagementUrl}/Resources/icons/add.png</param>
            <returns>An an absolut path with all tokens replaced by their corresponding value.</returns>
        </member>
        <member name="M:N2.Web.Url.ResolveTokens">
            <summary>Formsats this url using replacement tokens.</summary>
            <returns>An url without replacement tokens.</returns>
        </member>
        <member name="P:N2.Web.Url.Scheme">
            <summary>E.g. http</summary>
        </member>
        <member name="P:N2.Web.Url.Authority">
            <summary>The domain name and port information.</summary>
        </member>
        <member name="P:N2.Web.Url.Path">
            <summary>The path after domain name and before query string, e.g. /path/to/a/page.aspx.</summary>
        </member>
        <member name="P:N2.Web.Url.Query">
            <summary>The query string, e.g. key=value.</summary>
        </member>
        <member name="P:N2.Web.Url.PathAndQuery">
            <summary>The combination of the path and the query string, e.g. /path.aspx?key=value.</summary>
        </member>
        <member name="P:N2.Web.Url.Fragment">
            <summary>The bookmark.</summary>
        </member>
        <member name="P:N2.Web.Url.IsAbsolute">
            <summary>Tells whether the url contains authority information.</summary>
        </member>
        <member name="P:N2.Web.Url.DefaultExtension">
            <summary>The extension used for url's to content items.</summary>
        </member>
        <member name="P:N2.Web.Url.DefaultDocument">
            <summary>The default document to use when removing default document from paths.</summary>
        </member>
        <member name="P:N2.Web.Url.ApplicationPath">
            <summary>Gets the root path of the web application. e.g. "/" if the application doesn't run in a virtual directory.</summary>
        </member>
        <member name="P:N2.Web.Url.ServerUrl">
            <summary>The address to the server where the site is running.</summary>
        </member>
        <member name="T:N2.Web.WebRequestContext">
            <summary>
            A request context class that interacts with HttpContext.Current.
            </summary>
        </member>
        <member name="M:N2.Web.WebRequestContext.ToAbsolute(System.String)">
            <summary>Converts a virtual url to an absolute url.</summary>
            <param name="virtualPath">The virtual url to make absolute.</param>
            <returns>The absolute url.</returns>
        </member>
        <member name="M:N2.Web.WebRequestContext.ToAppRelative(System.String)">
            <summary>Converts an absolute url to an app relative url.</summary>
            <param name="virtualPath">The absolute url to convert.</param>
            <returns>An app relative url.</returns>
        </member>
        <member name="M:N2.Web.WebRequestContext.MapPath(System.String)">
            <summary>Maps a virtual path to a physical disk path.</summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:N2.Web.WebRequestContext.RewritePath(System.String)">
            <summary>Assigns a rewrite path.</summary>
            <param name="path">The path to the template that will handle the request.</param>
        </member>
        <member name="M:N2.Web.WebRequestContext.RewritePath(System.String,System.String)">
            <summary>Assigns a rewrite path.</summary>
            <param name="path">The path to the template that will handle the request.</param>
            <param name="queryString">The query string to rewrite to.</param>
        </member>
        <member name="M:N2.Web.WebRequestContext.ClearError">
            <summary>Calls into HttpContext.ClearError().</summary>
        </member>
        <member name="M:N2.Web.WebRequestContext.Close">
            <summary>Disposes request items that needs disposing. This method should be called at the end of each request.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.CurrentHttpContext">
            <summary>Provides access to HttpContext.Current.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.RequestItems">
            <summary>Gets a dictionary of request scoped items.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.CurrentPage">
            <summary>A page instance stored in the request context.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.CurrentPath">
            <summary>The template used to serve this request.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.SkipAuthorization">
            <summary>Specifies whether the UrlAuthorizationModule should skip authorization for the current request.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.Handler">
            <summary>The handler associated with the current request.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.Request">
            <summary>The current request object.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.PhysicalPath">
            <summary>The physical path on disk to the requested resource.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.Url">
            <summary>The host part of the requested url, e.g. http://n2cms.com/path/to/a/page.aspx?some=query.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.Response">
            <summary>The current request object.</summary>
        </member>
        <member name="P:N2.Web.WebRequestContext.User">
            <summary>Gets the current user in the web execution context.</summary>
        </member>
        <member name="T:N2.Web.Parts.PartsAdapter">
            <summary>
            Adapts operations related to zones, zone definitions, and items to display in a zone.
            </summary>
        </member>
        <member name="M:N2.Web.Parts.PartsAdapter.GetItemsInZone(N2.ContentItem,System.String)">
            <summary>Retrieves content items added to a zone of the parnet item.</summary>
            <param name="parentItem">The item whose items to get.</param>
            <param name="zoneName">The zone in which the items should be contained.</param>
            <returns>A list of items in the zone.</returns>
        </member>
        <member name="M:N2.Web.Parts.PartsAdapter.GetAllowedDefinitions(N2.ContentItem,System.String,System.Security.Principal.IPrincipal)">
            <summary>Retrieves allowed item definitions.</summary>
            <param name="parentItem">The parent item.</param>
            <param name="zoneName">The zone where children would be placed.</param>
            <param name="user">The user to restrict access for.</param>
            <returns>Item definitions allowed by zone, parent restrictions and security.</returns>
        </member>
        <member name="M:N2.Web.Parts.PartsAdapter.GetAllowedDefinitions(N2.ContentItem,System.Security.Principal.IPrincipal)">
            <summary>Retrieves allowed item definitions.</summary>
            <param name="parentItem">The parent item.</param>
            <param name="user">The user to restrict access for.</param>
            <returns>Item definitions allowed by zone, parent restrictions and security.</returns>
        </member>
        <member name="M:N2.Web.Parts.PartsAdapter.AddChildPart(N2.ContentItem,System.Web.UI.Control)">
            <summary>Adds a content item part to a containing control hierarchy (typically a zone control). Override this method to adapt how a parent gets it's children added.</summary>
            <param name="item">The item to add a part.</param>
            <param name="container">The container control to host the part user interface.</param>
        </member>
        <member name="M:N2.Web.Parts.PartsAdapter.AddTo(N2.ContentItem,System.Web.UI.Control)">
            <summary>Adds a content part to a containing control. Override this method to adapt how a part is added to a parent.</summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:N2.Web.Parts.PartsAdapter.GetTemplateUrl(N2.ContentItem)">
            <summary>Gets the path to the given item's template. This is a way to override the default template provided by the content item.</summary>
            <param name="item">The item whose path is requested.</param>
            <returns>The virtual path of the template or null if the item is not supposed to be added.</returns>
        </member>
    </members>
</doc>
